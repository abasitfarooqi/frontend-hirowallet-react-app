'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var auth = require('@stacks/auth');
var jsontokens = require('jsontokens');
var common = require('@stacks/common');
var network = require('@stacks/network');
var transactions = require('@stacks/transactions');
var loader = require('@stacks/connect-ui/loader');

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}

function getStacksProvider() {
  return window.StacksProvider || window.BlockstackProvider;
}
function isStacksWalletInstalled() {
  return !!getStacksProvider();
}

var defaultAuthURL = "https://app.blockstack.org";
var version = "7.1.1";
if (typeof window !== "undefined") {
  window.__CONNECT_VERSION__ = version;
}
var isMobile = function isMobile() {
  var ua = navigator.userAgent;
  if (/android/i.test(ua)) {
    return true;
  }
  if (/iPad|iPhone|iPod/.test(ua)) {
    return true;
  }
  return /windows phone/i.test(ua);
};
var shouldUsePopup = function shouldUsePopup() {
  return !isMobile();
};
var getOrCreateUserSession = function getOrCreateUserSession(userSession) {
  if (!userSession) {
    var appConfig = new auth.AppConfig(["store_write"], document.location.href);
    userSession = new auth.UserSession({
      appConfig: appConfig
    });
  }
  return userSession;
};
var authenticate = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authOptions) {
    var provider, _authOptions$redirect, redirectTo, manifestPath, onFinish, onCancel, _authOptions$sendToSi, sendToSignIn, _userSession, appDetails, userSession, transitKey, authRequest, authResponse, token, payload, authResponsePayload;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          provider = getStacksProvider();
          if (provider) {
            _context.next = 3;
            break;
          }
          throw new Error("Unable to authenticate without Hiro Wallet extension");
        case 3:
          _authOptions$redirect = authOptions.redirectTo, redirectTo = _authOptions$redirect === void 0 ? "/" : _authOptions$redirect, manifestPath = authOptions.manifestPath, onFinish = authOptions.onFinish, onCancel = authOptions.onCancel, _authOptions$sendToSi = authOptions.sendToSignIn, sendToSignIn = _authOptions$sendToSi === void 0 ? false : _authOptions$sendToSi, _userSession = authOptions.userSession, appDetails = authOptions.appDetails;
          userSession = getOrCreateUserSession(_userSession);
          if (userSession.isUserSignedIn()) {
            userSession.signUserOut();
          }
          transitKey = userSession.generateAndStoreTransitKey();
          authRequest = userSession.makeAuthRequest(transitKey, "" + document.location.origin + redirectTo, "" + document.location.origin + manifestPath, userSession.appConfig.scopes, void 0, void 0, {
            sendToSignIn: sendToSignIn,
            appDetails: appDetails,
            connectVersion: version
          });
          _context.prev = 8;
          _context.next = 11;
          return provider.authenticationRequest(authRequest);
        case 11:
          authResponse = _context.sent;
          _context.next = 14;
          return userSession.handlePendingSignIn(authResponse);
        case 14:
          token = jsontokens.decodeToken(authResponse);
          payload = token == null ? void 0 : token.payload;
          authResponsePayload = payload;
          onFinish == null ? void 0 : onFinish({
            authResponse: authResponse,
            authResponsePayload: authResponsePayload,
            userSession: userSession
          });
          _context.next = 24;
          break;
        case 20:
          _context.prev = 20;
          _context.t0 = _context["catch"](8);
          console.error("[Connect] Error during auth request", _context.t0);
          onCancel == null ? void 0 : onCancel();
        case 24:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[8, 20]]);
  }));
  return function authenticate(_x) {
    return _ref.apply(this, arguments);
  };
}();
var getUserData = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(userSession) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          userSession = getOrCreateUserSession(userSession);
          if (!userSession.isUserSignedIn()) {
            _context2.next = 3;
            break;
          }
          return _context2.abrupt("return", userSession.loadUserData());
        case 3:
          if (!userSession.isSignInPending()) {
            _context2.next = 5;
            break;
          }
          return _context2.abrupt("return", userSession.handlePendingSignIn());
        case 5:
          return _context2.abrupt("return", null);
        case 6:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function getUserData(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

(function (TransactionTypes2) {
  TransactionTypes2["ContractCall"] = "contract_call";
  TransactionTypes2["ContractDeploy"] = "smart_contract";
  TransactionTypes2["STXTransfer"] = "token_transfer";
})(exports.TransactionTypes || (exports.TransactionTypes = {}));
(function (ContractCallArgumentType2) {
  ContractCallArgumentType2["BUFFER"] = "buffer";
  ContractCallArgumentType2["UINT"] = "uint";
  ContractCallArgumentType2["INT"] = "int";
  ContractCallArgumentType2["PRINCIPAL"] = "principal";
  ContractCallArgumentType2["BOOL"] = "bool";
})(exports.ContractCallArgumentType || (exports.ContractCallArgumentType = {}));

var _excluded = ["functionArgs", "appDetails", "userSession"],
  _excluded2 = ["appDetails", "userSession"],
  _excluded3 = ["amount", "appDetails", "userSession"];
var getUserSession = function getUserSession(_userSession) {
  var userSession = _userSession;
  if (!userSession) {
    var appConfig = new auth.AppConfig(["store_write"], document.location.href);
    userSession = new auth.UserSession({
      appConfig: appConfig
    });
  }
  return userSession;
};
function hasAppPrivateKey(userSession) {
  try {
    var session = getUserSession(userSession).loadUserData();
    return session.appPrivateKey;
  } catch (e) {
    return false;
  }
}
var getKeys = function getKeys(_userSession) {
  var userSession = getUserSession(_userSession);
  var privateKey = userSession.loadUserData().appPrivateKey;
  var publicKey = jsontokens.SECP256K1Client.derivePublicKey(privateKey);
  return {
    privateKey: privateKey,
    publicKey: publicKey
  };
};
function getStxAddress(options) {
  var _userSession$loadUser, _chainIdToKey;
  var stxAddress = options.stxAddress,
    userSession = options.userSession,
    network = options.network;
  if (stxAddress) return stxAddress;
  if (!userSession || !network) return void 0;
  var stxAddresses = userSession == null ? void 0 : (_userSession$loadUser = userSession.loadUserData().profile) == null ? void 0 : _userSession$loadUser.stxAddress;
  var chainIdToKey = (_chainIdToKey = {}, _chainIdToKey[transactions.ChainID.Mainnet] = "mainnet", _chainIdToKey[transactions.ChainID.Testnet] = "testnet", _chainIdToKey);
  var address = stxAddresses == null ? void 0 : stxAddresses[chainIdToKey[network.chainId]];
  return address;
}
function getDefaults(options) {
  var network$1 = options.network || new network.StacksTestnet();
  var userSession = getUserSession(options.userSession);
  var defaults = _extends({}, options, {
    network: network$1,
    userSession: userSession
  });
  return _extends({
    stxAddress: getStxAddress(defaults)
  }, defaults);
}
function encodePostConditions(postConditions) {
  return postConditions.map(function (pc) {
    return common.bytesToHex(transactions.serializePostCondition(pc));
  });
}
function signPayload(_x, _x2) {
  return _signPayload.apply(this, arguments);
}
function _signPayload() {
  _signPayload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(payload, privateKey) {
    var postConditions, tokenSigner;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          postConditions = payload.postConditions;
          if (postConditions && typeof postConditions[0] !== "string") {
            postConditions = encodePostConditions(postConditions);
          }
          tokenSigner = new jsontokens.TokenSigner("ES256k", privateKey);
          return _context5.abrupt("return", tokenSigner.signAsync(_extends({}, payload, {
            postConditions: postConditions
          })));
        case 4:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return _signPayload.apply(this, arguments);
}
function createUnsignedTransactionPayload(payload) {
  var postConditions = payload.postConditions;
  if (postConditions && typeof postConditions[0] !== "string") {
    postConditions = encodePostConditions(postConditions);
  }
  return jsontokens.createUnsecuredToken(_extends({}, payload, {
    postConditions: postConditions
  }));
}
var openTransactionPopup = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
    var token, options, provider, txResponse, txRaw, txBytes, stacksTransaction;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          token = _ref.token, options = _ref.options;
          provider = getStacksProvider();
          if (provider) {
            _context.next = 4;
            break;
          }
          throw new Error("Hiro Wallet not installed");
        case 4:
          _context.prev = 4;
          _context.next = 7;
          return provider.transactionRequest(token);
        case 7:
          txResponse = _context.sent;
          txRaw = txResponse.txRaw;
          txBytes = common.hexToBytes(txRaw.replace(/^0x/, ""));
          stacksTransaction = transactions.deserializeTransaction(txBytes);
          if (!("sponsored" in options && options.sponsored)) {
            _context.next = 14;
            break;
          }
          options.onFinish == null ? void 0 : options.onFinish(_extends({}, txResponse, {
            stacksTransaction: stacksTransaction
          }));
          return _context.abrupt("return");
        case 14:
          options.onFinish == null ? void 0 : options.onFinish(_extends({}, txResponse, {
            stacksTransaction: stacksTransaction
          }));
          _context.next = 21;
          break;
        case 17:
          _context.prev = 17;
          _context.t0 = _context["catch"](4);
          console.error("[Connect] Error during transaction request", _context.t0);
          options.onCancel == null ? void 0 : options.onCancel();
        case 21:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[4, 17]]);
  }));
  return function openTransactionPopup(_x3) {
    return _ref2.apply(this, arguments);
  };
}();
var makeContractCallToken = /*#__PURE__*/function () {
  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(options) {
    var functionArgs, appDetails, userSession, _options, args, _getKeys, privateKey, publicKey, payload2, payload;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          functionArgs = options.functionArgs, appDetails = options.appDetails, userSession = options.userSession, _options = _objectWithoutPropertiesLoose(options, _excluded);
          args = functionArgs.map(function (arg) {
            if (typeof arg === "string") {
              return arg;
            }
            return common.bytesToHex(transactions.serializeCV(arg));
          });
          if (!hasAppPrivateKey(userSession)) {
            _context2.next = 7;
            break;
          }
          _getKeys = getKeys(userSession), privateKey = _getKeys.privateKey, publicKey = _getKeys.publicKey;
          payload2 = _extends({}, _options, {
            functionArgs: args,
            txType: exports.TransactionTypes.ContractCall,
            publicKey: publicKey
          });
          if (appDetails) payload2.appDetails = appDetails;
          return _context2.abrupt("return", signPayload(payload2, privateKey));
        case 7:
          payload = _extends({}, _options, {
            functionArgs: args,
            txType: exports.TransactionTypes.ContractCall
          });
          if (appDetails) payload.appDetails = appDetails;
          return _context2.abrupt("return", createUnsignedTransactionPayload(payload));
        case 10:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function makeContractCallToken(_x4) {
    return _ref3.apply(this, arguments);
  };
}();
var makeContractDeployToken = /*#__PURE__*/function () {
  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {
    var appDetails, userSession, _options, _getKeys2, privateKey, publicKey, payload2, payload;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          appDetails = options.appDetails, userSession = options.userSession, _options = _objectWithoutPropertiesLoose(options, _excluded2);
          if (!hasAppPrivateKey(userSession)) {
            _context3.next = 6;
            break;
          }
          _getKeys2 = getKeys(userSession), privateKey = _getKeys2.privateKey, publicKey = _getKeys2.publicKey;
          payload2 = _extends({}, _options, {
            publicKey: publicKey,
            txType: exports.TransactionTypes.ContractDeploy
          });
          if (appDetails) payload2.appDetails = appDetails;
          return _context3.abrupt("return", signPayload(payload2, privateKey));
        case 6:
          payload = _extends({}, _options, {
            txType: exports.TransactionTypes.ContractDeploy
          });
          if (appDetails) payload.appDetails = appDetails;
          return _context3.abrupt("return", createUnsignedTransactionPayload(payload));
        case 9:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function makeContractDeployToken(_x5) {
    return _ref4.apply(this, arguments);
  };
}();
var makeSTXTransferToken = /*#__PURE__*/function () {
  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(options) {
    var amount, appDetails, userSession, _options, _getKeys3, privateKey, publicKey, payload2, payload;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          amount = options.amount, appDetails = options.appDetails, userSession = options.userSession, _options = _objectWithoutPropertiesLoose(options, _excluded3);
          if (!hasAppPrivateKey(userSession)) {
            _context4.next = 6;
            break;
          }
          _getKeys3 = getKeys(userSession), privateKey = _getKeys3.privateKey, publicKey = _getKeys3.publicKey;
          payload2 = _extends({}, _options, {
            amount: amount.toString(10),
            publicKey: publicKey,
            txType: exports.TransactionTypes.STXTransfer
          });
          if (appDetails) payload2.appDetails = appDetails;
          return _context4.abrupt("return", signPayload(payload2, privateKey));
        case 6:
          payload = _extends({}, _options, {
            amount: amount.toString(10),
            txType: exports.TransactionTypes.STXTransfer
          });
          if (appDetails) payload.appDetails = appDetails;
          return _context4.abrupt("return", createUnsignedTransactionPayload(payload));
        case 9:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function makeSTXTransferToken(_x6) {
    return _ref5.apply(this, arguments);
  };
}();
function generateTokenAndOpenPopup(_x7, _x8) {
  return _generateTokenAndOpenPopup.apply(this, arguments);
}
function _generateTokenAndOpenPopup() {
  _generateTokenAndOpenPopup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(options, makeTokenFn) {
    var token;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          _context6.next = 2;
          return makeTokenFn(_extends({}, getDefaults(options), options));
        case 2:
          token = _context6.sent;
          return _context6.abrupt("return", openTransactionPopup({
            token: token,
            options: options
          }));
        case 4:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return _generateTokenAndOpenPopup.apply(this, arguments);
}
function openContractCall(options) {
  return generateTokenAndOpenPopup(options, makeContractCallToken);
}
function openContractDeploy(options) {
  return generateTokenAndOpenPopup(options, makeContractDeployToken);
}
function openSTXTransfer(options) {
  return generateTokenAndOpenPopup(options, makeSTXTransferToken);
}

var _excluded$1 = ["userSession"];
function getStxAddress$1(options) {
  var _userSession$loadUser, _chainIdToKey;
  var userSession = options.userSession,
    network = options.network;
  if (!userSession || !network) return void 0;
  var stxAddresses = userSession == null ? void 0 : (_userSession$loadUser = userSession.loadUserData().profile) == null ? void 0 : _userSession$loadUser.stxAddress;
  var chainIdToKey = (_chainIdToKey = {}, _chainIdToKey[transactions.ChainID.Mainnet] = "mainnet", _chainIdToKey[transactions.ChainID.Testnet] = "testnet", _chainIdToKey);
  var address = stxAddresses == null ? void 0 : stxAddresses[chainIdToKey[network.chainId]];
  return address;
}
function signPayload$1(_x, _x2) {
  return _signPayload$1.apply(this, arguments);
}
function _signPayload$1() {
  _signPayload$1 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(payload, privateKey) {
    var tokenSigner;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          tokenSigner = new jsontokens.TokenSigner("ES256k", privateKey);
          return _context2.abrupt("return", tokenSigner.signAsync(_extends({}, payload)));
        case 2:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _signPayload$1.apply(this, arguments);
}
function getDefaultSignatureRequestOptions(options) {
  var network$1 = options.network || new network.StacksTestnet();
  var userSession = getUserSession(options.userSession);
  var defaults = _extends({}, options, {
    network: network$1,
    userSession: userSession
  });
  return _extends({
    stxAddress: getStxAddress$1(defaults)
  }, defaults);
}
function openSignaturePopup(_x3) {
  return _openSignaturePopup.apply(this, arguments);
}
function _openSignaturePopup() {
  _openSignaturePopup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref) {
    var token, options, provider, signatureResponse;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          token = _ref.token, options = _ref.options;
          provider = getStacksProvider();
          if (provider) {
            _context3.next = 4;
            break;
          }
          throw new Error("Hiro Wallet not installed.");
        case 4:
          _context3.prev = 4;
          _context3.next = 7;
          return provider.signatureRequest(token);
        case 7:
          signatureResponse = _context3.sent;
          options.onFinish == null ? void 0 : options.onFinish(signatureResponse);
          _context3.next = 15;
          break;
        case 11:
          _context3.prev = 11;
          _context3.t0 = _context3["catch"](4);
          console.error("[Connect] Error during signature request", _context3.t0);
          options.onCancel == null ? void 0 : options.onCancel();
        case 15:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[4, 11]]);
  }));
  return _openSignaturePopup.apply(this, arguments);
}
var signMessage = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
    var userSession, _options, _getKeys, privateKey, publicKey, payload2, payload;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          userSession = options.userSession, _options = _objectWithoutPropertiesLoose(options, _excluded$1);
          if (!hasAppPrivateKey(userSession)) {
            _context.next = 5;
            break;
          }
          _getKeys = getKeys(userSession), privateKey = _getKeys.privateKey, publicKey = _getKeys.publicKey;
          payload2 = _extends({}, _options, {
            publicKey: publicKey
          });
          return _context.abrupt("return", signPayload$1(payload2, privateKey));
        case 5:
          payload = _extends({}, _options);
          return _context.abrupt("return", jsontokens.createUnsecuredToken(payload));
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function signMessage(_x4) {
    return _ref2.apply(this, arguments);
  };
}();
function generateTokenAndOpenPopup$1(_x5, _x6) {
  return _generateTokenAndOpenPopup$1.apply(this, arguments);
}
function _generateTokenAndOpenPopup$1() {
  _generateTokenAndOpenPopup$1 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(options, makeTokenFn) {
    var token;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return makeTokenFn(_extends({}, getDefaultSignatureRequestOptions(options), options));
        case 2:
          token = _context4.sent;
          return _context4.abrupt("return", openSignaturePopup({
            token: token,
            options: options
          }));
        case 4:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _generateTokenAndOpenPopup$1.apply(this, arguments);
}
function openSignatureRequestPopup(options) {
  return generateTokenAndOpenPopup$1(options, signMessage);
}

var _excluded$2 = ["userSession"];
function generateTokenAndOpenPopup$2(_x, _x2) {
  return _generateTokenAndOpenPopup$2.apply(this, arguments);
}
function _generateTokenAndOpenPopup$2() {
  _generateTokenAndOpenPopup$2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options, makeTokenFn) {
    var token;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return makeTokenFn(_extends({}, getDefaultSignatureRequestOptions(options), options));
        case 2:
          token = _context.sent;
          return _context.abrupt("return", openStructuredDataSignaturePopup({
            token: token,
            options: options
          }));
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _generateTokenAndOpenPopup$2.apply(this, arguments);
}
function parseUnserializableBigIntValues(payload) {
  return _extends({}, payload, {
    message: common.bytesToHex(transactions.serializeCV(payload.message)),
    domain: common.bytesToHex(transactions.serializeCV(payload.domain))
  });
}
function signPayload$2(_x3, _x4) {
  return _signPayload$2.apply(this, arguments);
}
function _signPayload$2() {
  _signPayload$2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(payload, privateKey) {
    var tokenSigner;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          tokenSigner = new jsontokens.TokenSigner("ES256k", privateKey);
          return _context2.abrupt("return", tokenSigner.signAsync(parseUnserializableBigIntValues(payload)));
        case 2:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _signPayload$2.apply(this, arguments);
}
function signStructuredMessage(_x5) {
  return _signStructuredMessage.apply(this, arguments);
}
function _signStructuredMessage() {
  _signStructuredMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {
    var userSession, _options, _getKeys, privateKey, publicKey, payload;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          userSession = options.userSession, _options = _objectWithoutPropertiesLoose(options, _excluded$2);
          if (!hasAppPrivateKey(userSession)) {
            _context3.next = 5;
            break;
          }
          _getKeys = getKeys(userSession), privateKey = _getKeys.privateKey, publicKey = _getKeys.publicKey;
          payload = _extends({}, _options, {
            publicKey: publicKey
          });
          return _context3.abrupt("return", signPayload$2(payload, privateKey));
        case 5:
          return _context3.abrupt("return", jsontokens.createUnsecuredToken(parseUnserializableBigIntValues(options)));
        case 6:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _signStructuredMessage.apply(this, arguments);
}
function openStructuredDataSignaturePopup(_x6) {
  return _openStructuredDataSignaturePopup.apply(this, arguments);
}
function _openStructuredDataSignaturePopup() {
  _openStructuredDataSignaturePopup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref) {
    var token, options, provider, signatureResponse;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          token = _ref.token, options = _ref.options;
          provider = getStacksProvider();
          if (provider) {
            _context4.next = 4;
            break;
          }
          throw new Error("Hiro Wallet not installed.");
        case 4:
          _context4.prev = 4;
          _context4.next = 7;
          return provider.structuredDataSignatureRequest(token);
        case 7:
          signatureResponse = _context4.sent;
          options.onFinish == null ? void 0 : options.onFinish(signatureResponse);
          _context4.next = 15;
          break;
        case 11:
          _context4.prev = 11;
          _context4.t0 = _context4["catch"](4);
          console.error("[Connect] Error during signature request", _context4.t0);
          options.onCancel == null ? void 0 : options.onCancel();
        case 15:
        case "end":
          return _context4.stop();
      }
    }, _callee4, null, [[4, 11]]);
  }));
  return _openStructuredDataSignaturePopup.apply(this, arguments);
}
function openStructuredDataSignatureRequestPopup(options) {
  return generateTokenAndOpenPopup$2(options, signStructuredMessage);
}

var _excluded$3 = ["userSession", "profile"];
function signPayload$3(_x, _x2) {
  return _signPayload$3.apply(this, arguments);
}
function _signPayload$3() {
  _signPayload$3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(payload, privateKey) {
    var tokenSigner;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          tokenSigner = new jsontokens.TokenSigner("ES256k", privateKey);
          return _context2.abrupt("return", tokenSigner.signAsync(_extends({}, payload)));
        case 2:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _signPayload$3.apply(this, arguments);
}
function getDefaultProfileUpdateRequestOptions(options) {
  var network$1 = options.network || new network.StacksTestnet();
  var userSession = getUserSession(options.userSession);
  var defaults = _extends({}, options, {
    network: network$1,
    userSession: userSession
  });
  return _extends({}, defaults);
}
function openProfileUpdatePopup(_x3) {
  return _openProfileUpdatePopup.apply(this, arguments);
}
function _openProfileUpdatePopup() {
  _openProfileUpdatePopup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref) {
    var token, options, provider, profileUpdateResponse;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          token = _ref.token, options = _ref.options;
          provider = getStacksProvider();
          if (provider) {
            _context3.next = 4;
            break;
          }
          throw new Error("Hiro Wallet not installed.");
        case 4:
          _context3.prev = 4;
          _context3.next = 7;
          return provider.profileUpdateRequest(token);
        case 7:
          profileUpdateResponse = _context3.sent;
          options.onFinish == null ? void 0 : options.onFinish(profileUpdateResponse);
          _context3.next = 15;
          break;
        case 11:
          _context3.prev = 11;
          _context3.t0 = _context3["catch"](4);
          console.error("[Connect] Error during signature request", _context3.t0);
          options.onCancel == null ? void 0 : options.onCancel();
        case 15:
        case "end":
          return _context3.stop();
      }
    }, _callee3, null, [[4, 11]]);
  }));
  return _openProfileUpdatePopup.apply(this, arguments);
}
var makeProfileUpdateToken = /*#__PURE__*/function () {
  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
    var userSession, profile, _options, _getKeys, privateKey, publicKey, payload2, payload;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          userSession = options.userSession, profile = options.profile, _options = _objectWithoutPropertiesLoose(options, _excluded$3);
          if (!hasAppPrivateKey(userSession)) {
            _context.next = 5;
            break;
          }
          _getKeys = getKeys(userSession), privateKey = _getKeys.privateKey, publicKey = _getKeys.publicKey;
          payload2 = _extends({}, _options, {
            profile: profile,
            publicKey: publicKey
          });
          return _context.abrupt("return", signPayload$3(payload2, privateKey));
        case 5:
          payload = _extends({}, _options);
          return _context.abrupt("return", jsontokens.createUnsecuredToken(payload));
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function makeProfileUpdateToken(_x4) {
    return _ref2.apply(this, arguments);
  };
}();
function generateTokenAndOpenPopup$3(_x5, _x6) {
  return _generateTokenAndOpenPopup$3.apply(this, arguments);
}
function _generateTokenAndOpenPopup$3() {
  _generateTokenAndOpenPopup$3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(options, makeTokenFn) {
    var token;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return makeTokenFn(_extends({}, getDefaultProfileUpdateRequestOptions(options), options));
        case 2:
          token = _context4.sent;
          return _context4.abrupt("return", openProfileUpdatePopup({
            token: token,
            options: options
          }));
        case 4:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _generateTokenAndOpenPopup$3.apply(this, arguments);
}
function openProfileUpdateRequestPopup(options) {
  return generateTokenAndOpenPopup$3(options, makeProfileUpdateToken);
}

var showConnect = function showConnect(authOptions) {
  if (getStacksProvider()) {
    void authenticate(authOptions);
    return;
  }
  if (typeof window !== void 0) {
    void loader.defineCustomElements(window);
    var element = document.createElement("connect-modal");
    element.authOptions = authOptions;
    document.body.appendChild(element);
    var handleEsc = function handleEsc(ev) {
      if (ev.key === "Escape") {
        document.removeEventListener("keydown", handleEsc);
        element.remove();
      }
    };
    document.addEventListener("keydown", handleEsc);
  }
};
var showBlockstackConnect = function showBlockstackConnect(authOptions) {
  return showConnect(authOptions);
};

Object.keys(auth).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return auth[k];
    }
  });
});
exports.authenticate = authenticate;
exports.defaultAuthURL = defaultAuthURL;
exports.getDefaultProfileUpdateRequestOptions = getDefaultProfileUpdateRequestOptions;
exports.getDefaultSignatureRequestOptions = getDefaultSignatureRequestOptions;
exports.getKeys = getKeys;
exports.getOrCreateUserSession = getOrCreateUserSession;
exports.getStacksProvider = getStacksProvider;
exports.getStxAddress = getStxAddress;
exports.getUserData = getUserData;
exports.getUserSession = getUserSession;
exports.hasAppPrivateKey = hasAppPrivateKey;
exports.isMobile = isMobile;
exports.isStacksWalletInstalled = isStacksWalletInstalled;
exports.makeContractCallToken = makeContractCallToken;
exports.makeContractDeployToken = makeContractDeployToken;
exports.makeProfileUpdateToken = makeProfileUpdateToken;
exports.makeSTXTransferToken = makeSTXTransferToken;
exports.openContractCall = openContractCall;
exports.openContractDeploy = openContractDeploy;
exports.openProfileUpdateRequestPopup = openProfileUpdateRequestPopup;
exports.openSTXTransfer = openSTXTransfer;
exports.openSignatureRequestPopup = openSignatureRequestPopup;
exports.openStructuredDataSignatureRequestPopup = openStructuredDataSignatureRequestPopup;
exports.shouldUsePopup = shouldUsePopup;
exports.showBlockstackConnect = showBlockstackConnect;
exports.showConnect = showConnect;
exports.signMessage = signMessage;
exports.signStructuredMessage = signStructuredMessage;
//# sourceMappingURL=connect.cjs.development.js.map
