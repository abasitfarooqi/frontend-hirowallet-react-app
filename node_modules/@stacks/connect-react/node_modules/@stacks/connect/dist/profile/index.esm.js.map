{"version":3,"file":"index.esm.js","sources":["../../src/profile/index.ts"],"sourcesContent":["import { StacksTestnet } from '@stacks/network';\nimport { createUnsecuredToken, Json, TokenSigner } from 'jsontokens';\nimport { getKeys, getUserSession, hasAppPrivateKey } from '../transactions';\nimport { ProfileUpdatePayload, ProfileUpdatePopup, ProfileUpdateRequestOptions } from '../types';\n\nimport { getStacksProvider } from '../utils';\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: ProfileUpdatePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload } as any);\n}\n\nexport function getDefaultProfileUpdateRequestOptions(options: ProfileUpdateRequestOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: ProfileUpdateRequestOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    ...defaults,\n  };\n}\n\nasync function openProfileUpdatePopup({ token, options }: ProfileUpdatePopup) {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const profileUpdateResponse = await provider.profileUpdateRequest(token);\n    options.onFinish?.(profileUpdateResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeProfileUpdateToken = async (options: ProfileUpdateRequestOptions) => {\n  const { userSession, profile, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: ProfileUpdatePayload = {\n      ..._options,\n      profile,\n      publicKey,\n    };\n\n    return signPayload(payload, privateKey);\n  }\n  const payload = { ..._options };\n  return createUnsecuredToken(payload as Json);\n};\n\nasync function generateTokenAndOpenPopup<T extends ProfileUpdateRequestOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaultProfileUpdateRequestOptions(options),\n    ...options,\n  } as T);\n  return openProfileUpdatePopup({ token, options });\n}\n\nexport function openProfileUpdateRequestPopup(options: ProfileUpdateRequestOptions) {\n  return generateTokenAndOpenPopup(options, makeProfileUpdateToken);\n}\n"],"names":["payload","privateKey","tokenSigner","TokenSigner","signAsync","options","network","StacksTestnet","userSession","getUserSession","defaults","token","provider","getStacksProvider","Error","profileUpdateRequest","profileUpdateResponse","onFinish","error","onCancel","makeProfileUpdateToken","profile","_options","hasAppPrivateKey","getKeys","publicKey","payload2","signPayload","createUnsecuredToken","makeTokenFn","getDefaultProfileUpdateRequestOptions","openProfileUpdatePopup","generateTokenAndOpenPopup"],"mappings":";;;;;;;;;;;4EAQA,kBAA2BA,SAA+BC;;;;;UAClDC,cAAc,IAAIC,YAAY,UAAUF;4CAEvCC,YAAYE,uBAAeJ;;;;;;;;;+CAGkBK,SAAsC;MACpFC,UAAUD,QAAQC,WAAW,IAAIC;MACjCC,cAAcC,eAAeJ,QAAQG;MACrCE,wBACDL;IACHC,SAAAA;IACAE,aAAAA;;sBAGGE;AAAA;;;;;uFAIP;IAAA;IAAA;MAAA;QAAA;UAAwCC,aAAAA,OAAON,eAAAA;UACvCO,WAAWC;cACZD;;;;gBACG,IAAIE,MAAM;;;;iBAIoBF,SAASG,qBAAqBJ;;UAA5DK;kBACEC,oCAAAA,SAAWD;;;;;;kBAEXE,MAAM;kBACNC,oCAAAA;;;;;;;;;IAKCC;sFAAyB,iBAAOf;;;;;UACnCG,cAAsCH,QAAtCG,aAAaa,UAAyBhB,QAAzBgB,SAAYC,yCAAajB;eAC1CkB,iBAAiBf;;;;qBACegB,QAAQhB,cAAlCP,sBAAAA,YAAYwB,qBAAAA;UAEdC,wBACDJ;YACHD,SAAAA;YACAI,WAAAA;;2CAGKE,YAAYD,UAASzB;;UAExBD,uBAAesB;2CACdM,qBAAqB5B;;;;;;;kBAdjBoB;;;;;;;;0FAiBb,kBACEf,SACAwB;;;;;;iBAEoBA,yBACfC,sCAAsCzB,UACtCA;;UAFCM;4CAICoB,uBAAuB;YAAEpB,OAAAA;YAAON,SAAAA;;;;;;;;;;uCAGKA,SAAsC;SAC3E2B,0BAA0B3B,SAASe;AAAA;;;;"}