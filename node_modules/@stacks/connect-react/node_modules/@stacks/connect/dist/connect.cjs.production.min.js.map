{"version":3,"file":"connect.cjs.production.min.js","sources":["../src/utils.ts","../src/auth.ts","../src/types/transactions.ts","../src/transactions/index.ts","../src/signature/index.ts","../src/signature/structuredData.ts","../src/profile/index.ts","../src/ui.ts"],"sourcesContent":["export function getStacksProvider() {\n  return window.StacksProvider || window.BlockstackProvider;\n}\n\nexport function isStacksWalletInstalled() {\n  return !!getStacksProvider();\n}\n","import { AppConfig, UserSession } from '@stacks/auth';\nimport { decodeToken } from 'jsontokens';\nimport type { AuthOptions, AuthResponsePayload } from './types';\n\nimport { getStacksProvider } from './utils';\n\nexport const defaultAuthURL = 'https://app.blockstack.org';\n\nconst version = __VERSION__;\n\nif (typeof window !== 'undefined') {\n  window.__CONNECT_VERSION__ = version;\n}\n\nexport const isMobile = () => {\n  const ua = navigator.userAgent;\n  if (/android/i.test(ua)) {\n    return true;\n  }\n  if (/iPad|iPhone|iPod/.test(ua)) {\n    return true;\n  }\n  return /windows phone/i.test(ua);\n};\n\n/**\n * mobile should not use a 'popup' type of window.\n */\nexport const shouldUsePopup = () => {\n  return !isMobile();\n};\n\nexport const getOrCreateUserSession = (userSession?: UserSession): UserSession => {\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport const authenticate = async (authOptions: AuthOptions) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Unable to authenticate without Hiro Wallet extension');\n  }\n\n  const {\n    redirectTo = '/',\n    manifestPath,\n    onFinish,\n    onCancel,\n    sendToSignIn = false,\n    userSession: _userSession,\n    appDetails,\n  } = authOptions;\n  const userSession = getOrCreateUserSession(_userSession);\n  if (userSession.isUserSignedIn()) {\n    userSession.signUserOut();\n  }\n  const transitKey = userSession.generateAndStoreTransitKey();\n  const authRequest = userSession.makeAuthRequest(\n    transitKey,\n    `${document.location.origin}${redirectTo}`,\n    `${document.location.origin}${manifestPath}`,\n    userSession.appConfig.scopes,\n    undefined,\n    undefined,\n    {\n      sendToSignIn,\n      appDetails,\n      connectVersion: version,\n    }\n  );\n\n  try {\n    const authResponse = await provider.authenticationRequest(authRequest);\n    await userSession.handlePendingSignIn(authResponse);\n    const token = decodeToken(authResponse);\n    const payload = token?.payload;\n    const authResponsePayload = payload as unknown as AuthResponsePayload;\n    onFinish?.({\n      authResponse,\n      authResponsePayload,\n      userSession,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during auth request', error);\n    onCancel?.();\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const getUserData = async (userSession?: UserSession) => {\n  userSession = getOrCreateUserSession(userSession);\n  if (userSession.isUserSignedIn()) {\n    return userSession.loadUserData();\n  }\n  if (userSession.isSignInPending()) {\n    return userSession.handlePendingSignIn();\n  }\n  return null;\n};\n","import { UserSession } from '@stacks/auth';\nimport type { AuthOptions } from '../types/auth';\nimport {\n  PostConditionMode,\n  PostCondition,\n  AnchorMode,\n  ClarityValue,\n  StacksTransaction,\n} from '@stacks/transactions';\nimport { StacksNetwork } from '@stacks/network';\n\nexport interface TxBase {\n  appDetails?: AuthOptions['appDetails'];\n  postConditionMode?: PostConditionMode;\n  postConditions?: (string | PostCondition)[];\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  attachment?: string;\n  fee?: number | string;\n  /**\n   * Provide the Hiro Wallet with a suggested account to sign this transaction with.\n   * This is set by default if a `userSession` option is provided.\n   */\n  stxAddress?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  senderKey?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  nonce?: number;\n}\n\nexport interface SponsoredFinishedTxPayload {\n  txRaw: string;\n}\n\nexport interface SponsoredFinishedTxData extends SponsoredFinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport interface FinishedTxPayload extends SponsoredFinishedTxPayload {\n  txId: string;\n}\n\nexport interface FinishedTxData extends FinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport enum TransactionTypes {\n  ContractCall = 'contract_call',\n  ContractDeploy = 'smart_contract',\n  STXTransfer = 'token_transfer',\n}\n\n/**\n * Contract Call\n */\n\nexport enum ContractCallArgumentType {\n  BUFFER = 'buffer',\n  UINT = 'uint',\n  INT = 'int',\n  PRINCIPAL = 'principal',\n  BOOL = 'bool',\n}\n\nexport interface ContractCallBase extends TxBase {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: (string | ClarityValue)[];\n}\n\nexport interface OptionsBase {\n  /**\n   * @deprecated Authentication is no longer supported through a hosted\n   * version. Users must install an extension.\n   */\n  authOrigin?: string;\n  userSession?: UserSession;\n}\n\nexport type SponsoredFinished = (data: SponsoredFinishedTxData) => void;\nexport type Finished = (data: FinishedTxData) => void;\nexport type Canceled = () => void;\n\nexport interface SponsoredOptionsBase extends TxBase, OptionsBase {\n  sponsored: true;\n  onFinish?: SponsoredFinished;\n  onCancel?: Canceled;\n}\n\nexport interface RegularOptionsBase extends TxBase, OptionsBase {\n  sponsored?: false;\n  onFinish?: Finished;\n  onCancel?: Canceled;\n}\n\nexport type ContractCallRegularOptions = ContractCallBase & RegularOptionsBase;\nexport type ContractCallSponsoredOptions = ContractCallBase & SponsoredOptionsBase;\nexport type ContractCallOptions = ContractCallRegularOptions | ContractCallSponsoredOptions;\n\nexport interface ContractCallArgument {\n  type: ContractCallArgumentType;\n  value: string;\n}\n\nexport interface ContractCallPayload extends ContractCallBase {\n  txType: TransactionTypes.ContractCall;\n  publicKey: string;\n  functionArgs: string[];\n  sponsored?: boolean;\n}\n\n/**\n * Contract Deploy\n */\nexport interface ContractDeployBase extends TxBase {\n  contractName: string;\n  codeBody: string;\n}\n\nexport type ContractDeployRegularOptions = ContractDeployBase & RegularOptionsBase;\nexport type ContractDeploySponsoredOptions = ContractDeployBase & SponsoredOptionsBase;\nexport type ContractDeployOptions = ContractDeployRegularOptions | ContractDeploySponsoredOptions;\n\nexport interface ContractDeployPayload extends ContractDeployBase {\n  publicKey: string;\n  txType: TransactionTypes.ContractDeploy;\n  sponsored?: boolean;\n}\n\n/**\n * STX Transfer\n */\n\nexport interface STXTransferBase extends TxBase {\n  recipient: string;\n  amount: BigInt | string;\n  memo?: string;\n}\n\nexport type STXTransferRegularOptions = STXTransferBase & RegularOptionsBase;\nexport type STXTransferSponsoredOptions = STXTransferBase & SponsoredOptionsBase;\nexport type STXTransferOptions = STXTransferRegularOptions | STXTransferSponsoredOptions;\n\nexport interface STXTransferPayload extends STXTransferBase {\n  publicKey: string;\n  txType: TransactionTypes.STXTransfer;\n  amount: string;\n  sponsored?: boolean;\n}\n\n/**\n * Transaction Popup\n */\n\nexport type TransactionOptions = ContractCallOptions | ContractDeployOptions | STXTransferOptions;\nexport type TransactionPayload = ContractCallPayload | ContractDeployPayload | STXTransferPayload;\n\nexport interface TransactionPopup {\n  token: string;\n  options: TransactionOptions;\n}\n","import { AppConfig, UserSession } from '@stacks/auth';\nimport { bytesToHex, hexToBytes } from '@stacks/common';\nimport { StacksTestnet } from '@stacks/network';\nimport {\n  ChainID,\n  deserializeTransaction,\n  PostCondition,\n  serializeCV,\n  serializePostCondition,\n} from '@stacks/transactions';\nimport { createUnsecuredToken, Json, SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  FinishedTxPayload,\n  SponsoredFinishedTxPayload,\n  STXTransferOptions,\n  STXTransferPayload,\n  STXTransferRegularOptions,\n  STXTransferSponsoredOptions,\n  TransactionOptions,\n  TransactionPayload,\n  TransactionPopup,\n  TransactionTypes,\n} from '../types/transactions';\nimport { getStacksProvider } from '../utils';\n\n// TODO extract out of transactions\nexport const getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport function hasAppPrivateKey(userSession?: UserSession) {\n  try {\n    const session = getUserSession(userSession).loadUserData();\n    return session.appPrivateKey;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\n// TODO extract out of transactions\nexport function getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nfunction encodePostConditions(postConditions: PostCondition[]) {\n  return postConditions.map(pc => bytesToHex(serializePostCondition(pc)));\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: TransactionPayload, privateKey: string) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload, postConditions } as any);\n}\n\nfunction createUnsignedTransactionPayload(payload: Partial<TransactionPayload>) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  return createUnsecuredToken({ ...payload, postConditions } as unknown as Json);\n}\n\nconst openTransactionPopup = async ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed');\n  }\n\n  try {\n    const txResponse = await provider.transactionRequest(token);\n    const { txRaw } = txResponse;\n    const txBytes = hexToBytes(txRaw.replace(/^0x/, ''));\n    const stacksTransaction = deserializeTransaction(txBytes);\n\n    if ('sponsored' in options && options.sponsored) {\n      options.onFinish?.({\n        ...(txResponse as SponsoredFinishedTxPayload),\n        stacksTransaction,\n      });\n      return;\n    }\n    options.onFinish?.({\n      ...(txResponse as FinishedTxPayload),\n      stacksTransaction,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during transaction request', error);\n    options.onCancel?.();\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return bytesToHex(serializeCV(arg));\n  });\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractCallPayload = {\n      ..._options,\n      functionArgs: args,\n      txType: TransactionTypes.ContractCall,\n      publicKey,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n  const payload: Partial<ContractCallPayload> = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractDeployPayload = {\n      ..._options,\n      publicKey,\n      txType: TransactionTypes.ContractDeploy,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<ContractDeployPayload> = {\n    ..._options,\n    txType: TransactionTypes.ContractDeploy,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: STXTransferPayload = {\n      ..._options,\n      amount: amount.toString(10),\n      publicKey,\n      txType: TransactionTypes.STXTransfer,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<STXTransferPayload> = {\n    ..._options,\n    amount: amount.toString(10),\n    txType: TransactionTypes.STXTransfer,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n","import { StacksTestnet } from '@stacks/network';\nimport { ChainID } from '@stacks/transactions';\nimport { createUnsecuredToken, TokenSigner } from 'jsontokens';\nimport { getKeys, getUserSession, hasAppPrivateKey } from '../transactions';\nimport {\n  CommonSignatureRequestOptions,\n  SignatureOptions,\n  SignaturePayload,\n  SignaturePopup,\n  SignatureRequestOptions,\n} from '../types/signature';\nimport { getStacksProvider } from '../utils';\n\nfunction getStxAddress(options: CommonSignatureRequestOptions) {\n  const { userSession, network } = options;\n\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: SignaturePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload } as any);\n}\n\nexport function getDefaultSignatureRequestOptions(options: CommonSignatureRequestOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: CommonSignatureRequestOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nasync function openSignaturePopup({ token, options }: SignaturePopup) {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const signatureResponse = await provider.signatureRequest(token);\n    options.onFinish?.(signatureResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\nexport interface SignatureRequestPayload {\n  message: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const signMessage = async (options: SignatureRequestOptions) => {\n  const { userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: SignaturePayload = {\n      ..._options,\n      publicKey,\n    };\n\n    return signPayload(payload, privateKey);\n  }\n  const payload = { ..._options };\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return createUnsecuredToken(payload as any);\n};\n\nasync function generateTokenAndOpenPopup<T extends SignatureOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaultSignatureRequestOptions(options),\n    ...options,\n  } as T);\n  return openSignaturePopup({ token, options });\n}\n\nexport function openSignatureRequestPopup(options: SignatureRequestOptions) {\n  return generateTokenAndOpenPopup(options, signMessage);\n}\n","import { bytesToHex } from '@stacks/common';\nimport { serializeCV } from '@stacks/transactions';\nimport { createUnsecuredToken, TokenSigner } from 'jsontokens';\nimport { getDefaultSignatureRequestOptions } from '.';\nimport { getKeys, hasAppPrivateKey } from '../transactions';\nimport {\n  StructuredDataSignatureOptions,\n  StructuredDataSignaturePayload,\n  StructuredDataSignaturePopup,\n  StructuredDataSignatureRequestOptions,\n} from '../types/structuredDataSignature';\nimport { getStacksProvider } from '../utils';\n\nasync function generateTokenAndOpenPopup<T extends StructuredDataSignatureOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaultSignatureRequestOptions(options),\n    ...options,\n  } as T);\n  return openStructuredDataSignaturePopup({ token, options });\n}\n\nfunction parseUnserializableBigIntValues(payload: any) {\n  return {\n    ...payload,\n    message: bytesToHex(serializeCV(payload.message)),\n    domain: bytesToHex(serializeCV(payload.domain)),\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: StructuredDataSignaturePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync(parseUnserializableBigIntValues(payload));\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function signStructuredMessage(options: StructuredDataSignatureRequestOptions) {\n  const { userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: StructuredDataSignaturePayload = {\n      ..._options,\n      publicKey,\n    };\n    return signPayload(payload, privateKey);\n  }\n  // Type casting `any` as payload contains non-serialisable content,\n  // such as `StacksNetwork`\n  return createUnsecuredToken(parseUnserializableBigIntValues(options));\n}\n\nasync function openStructuredDataSignaturePopup({ token, options }: StructuredDataSignaturePopup) {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const signatureResponse = await provider.structuredDataSignatureRequest(token);\n\n    options.onFinish?.(signatureResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\nexport function openStructuredDataSignatureRequestPopup(\n  options: StructuredDataSignatureRequestOptions\n) {\n  return generateTokenAndOpenPopup(options, signStructuredMessage);\n}\n","import { StacksTestnet } from '@stacks/network';\nimport { createUnsecuredToken, Json, TokenSigner } from 'jsontokens';\nimport { getKeys, getUserSession, hasAppPrivateKey } from '../transactions';\nimport { ProfileUpdatePayload, ProfileUpdatePopup, ProfileUpdateRequestOptions } from '../types';\n\nimport { getStacksProvider } from '../utils';\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: ProfileUpdatePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload } as any);\n}\n\nexport function getDefaultProfileUpdateRequestOptions(options: ProfileUpdateRequestOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: ProfileUpdateRequestOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    ...defaults,\n  };\n}\n\nasync function openProfileUpdatePopup({ token, options }: ProfileUpdatePopup) {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const profileUpdateResponse = await provider.profileUpdateRequest(token);\n    options.onFinish?.(profileUpdateResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeProfileUpdateToken = async (options: ProfileUpdateRequestOptions) => {\n  const { userSession, profile, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: ProfileUpdatePayload = {\n      ..._options,\n      profile,\n      publicKey,\n    };\n\n    return signPayload(payload, privateKey);\n  }\n  const payload = { ..._options };\n  return createUnsecuredToken(payload as Json);\n};\n\nasync function generateTokenAndOpenPopup<T extends ProfileUpdateRequestOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaultProfileUpdateRequestOptions(options),\n    ...options,\n  } as T);\n  return openProfileUpdatePopup({ token, options });\n}\n\nexport function openProfileUpdateRequestPopup(options: ProfileUpdateRequestOptions) {\n  return generateTokenAndOpenPopup(options, makeProfileUpdateToken);\n}\n","import { authenticate } from './auth';\nimport type { AuthOptions } from './types/auth';\nimport { defineCustomElements } from '@stacks/connect-ui/loader';\nimport { getStacksProvider } from './utils';\n\nexport const showConnect = (authOptions: AuthOptions) => {\n  if (getStacksProvider()) {\n    void authenticate(authOptions);\n    return;\n  }\n  if (typeof window !== undefined) {\n    void defineCustomElements(window);\n    const element = document.createElement('connect-modal');\n    element.authOptions = authOptions;\n    document.body.appendChild(element);\n    const handleEsc = (ev: KeyboardEvent) => {\n      if (ev.key === 'Escape') {\n        document.removeEventListener('keydown', handleEsc);\n        element.remove();\n      }\n    };\n    document.addEventListener('keydown', handleEsc);\n  }\n};\n\n/**\n * @deprecated Use the renamed `showConnect` method\n */\nexport const showBlockstackConnect = (authOptions: AuthOptions) => showConnect(authOptions);\n"],"names":["window","StacksProvider","BlockstackProvider","__CONNECT_VERSION__","__VERSION__","TransactionTypes2","ContractCallArgumentType2","isMobile","ua","navigator","userAgent","test","getOrCreateUserSession","userSession","appConfig","AppConfig","document","location","href","UserSession","authenticate","authOptions","provider","getStacksProvider","Error","redirectTo","manifestPath","onFinish","onCancel","sendToSignIn","appDetails","isUserSignedIn","signUserOut","transitKey","generateAndStoreTransitKey","authRequest","makeAuthRequest","origin","scopes","connectVersion","authenticationRequest","authResponse","handlePendingSignIn","token","decodeToken","authResponsePayload","payload","error","getUserData","loadUserData","isSignInPending","TransactionTypes","ContractCallArgumentType","getUserSession","_userSession","appPrivateKey","e","getKeys","privateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","_userSession$loadUser","chainIdToKey","ChainID","Mainnet","Testnet","chainId","defaults","StacksTestnet","getStxAddress","postConditions","map","bytesToHex","serializePostCondition","pc","encodePostConditions","tokenSigner","TokenSigner","signAsync","createUnsecuredToken","openTransactionPopup","transactionRequest","txBytes","hexToBytes","txResponse","txRaw","replace","stacksTransaction","deserializeTransaction","sponsored","makeContractCallToken","functionArgs","_options","args","arg","serializeCV","hasAppPrivateKey","payload2","txType","ContractCall","signPayload","createUnsignedTransactionPayload","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","toString","STXTransfer","makeTokenFn","getDefaults","signatureRequest","signatureResponse","signMessage","getDefaultSignatureRequestOptions","openSignaturePopup","openStructuredDataSignaturePopup","message","domain","parseUnserializableBigIntValues","structuredDataSignatureRequest","profileUpdateRequest","profileUpdateResponse","makeProfileUpdateToken","getDefaultProfileUpdateRequestOptions","openProfileUpdatePopup","showConnect","defineCustomElements","element","createElement","body","appendChild","addEventListener","handleEsc","ev","key","removeEventListener","remove","generateTokenAndOpenPopup","signStructuredMessage"],"mappings":"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"}