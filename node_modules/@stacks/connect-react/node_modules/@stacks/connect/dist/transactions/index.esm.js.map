{"version":3,"file":"index.esm.js","sources":["../../src/transactions/index.ts"],"sourcesContent":["import { AppConfig, UserSession } from '@stacks/auth';\nimport { bytesToHex, hexToBytes } from '@stacks/common';\nimport { StacksTestnet } from '@stacks/network';\nimport {\n  ChainID,\n  deserializeTransaction,\n  PostCondition,\n  serializeCV,\n  serializePostCondition,\n} from '@stacks/transactions';\nimport { createUnsecuredToken, Json, SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  FinishedTxPayload,\n  SponsoredFinishedTxPayload,\n  STXTransferOptions,\n  STXTransferPayload,\n  STXTransferRegularOptions,\n  STXTransferSponsoredOptions,\n  TransactionOptions,\n  TransactionPayload,\n  TransactionPopup,\n  TransactionTypes,\n} from '../types/transactions';\nimport { getStacksProvider } from '../utils';\n\n// TODO extract out of transactions\nexport const getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport function hasAppPrivateKey(userSession?: UserSession) {\n  try {\n    const session = getUserSession(userSession).loadUserData();\n    return session.appPrivateKey;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport const getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\n// TODO extract out of transactions\nexport function getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nfunction encodePostConditions(postConditions: PostCondition[]) {\n  return postConditions.map(pc => bytesToHex(serializePostCondition(pc)));\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: TransactionPayload, privateKey: string) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload, postConditions } as any);\n}\n\nfunction createUnsignedTransactionPayload(payload: Partial<TransactionPayload>) {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = encodePostConditions(postConditions as PostCondition[]);\n  }\n  return createUnsecuredToken({ ...payload, postConditions } as unknown as Json);\n}\n\nconst openTransactionPopup = async ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed');\n  }\n\n  try {\n    const txResponse = await provider.transactionRequest(token);\n    const { txRaw } = txResponse;\n    const txBytes = hexToBytes(txRaw.replace(/^0x/, ''));\n    const stacksTransaction = deserializeTransaction(txBytes);\n\n    if ('sponsored' in options && options.sponsored) {\n      options.onFinish?.({\n        ...(txResponse as SponsoredFinishedTxPayload),\n        stacksTransaction,\n      });\n      return;\n    }\n    options.onFinish?.({\n      ...(txResponse as FinishedTxPayload),\n      stacksTransaction,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during transaction request', error);\n    options.onCancel?.();\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return bytesToHex(serializeCV(arg));\n  });\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractCallPayload = {\n      ..._options,\n      functionArgs: args,\n      txType: TransactionTypes.ContractCall,\n      publicKey,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n  const payload: Partial<ContractCallPayload> = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: ContractDeployPayload = {\n      ..._options,\n      publicKey,\n      txType: TransactionTypes.ContractDeploy,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<ContractDeployPayload> = {\n    ..._options,\n    txType: TransactionTypes.ContractDeploy,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n    const payload: STXTransferPayload = {\n      ..._options,\n      amount: amount.toString(10),\n      publicKey,\n      txType: TransactionTypes.STXTransfer,\n    };\n    if (appDetails) payload.appDetails = appDetails;\n    return signPayload(payload, privateKey);\n  }\n\n  const payload: Partial<STXTransferPayload> = {\n    ..._options,\n    amount: amount.toString(10),\n    txType: TransactionTypes.STXTransfer,\n  };\n  if (appDetails) payload.appDetails = appDetails;\n  return createUnsignedTransactionPayload(payload);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n"],"names":["getUserSession","_userSession","userSession","appConfig","AppConfig","document","location","href","UserSession","session","loadUserData","appPrivateKey","e","getKeys","privateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","StacksTestnet","defaults","getStxAddress","postConditions","map","bytesToHex","serializePostCondition","pc","payload","encodePostConditions","tokenSigner","TokenSigner","signAsync","createUnsecuredToken","openTransactionPopup","token","provider","getStacksProvider","Error","transactionRequest","txResponse","txRaw","txBytes","hexToBytes","replace","stacksTransaction","deserializeTransaction","sponsored","onFinish","error","onCancel","makeContractCallToken","functionArgs","appDetails","_options","args","arg","serializeCV","hasAppPrivateKey","payload2","txType","TransactionTypes","ContractCall","signPayload","createUnsignedTransactionPayload","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","toString","STXTransfer","makeTokenFn","getDefaults","generateTokenAndOpenPopup"],"mappings":"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"}