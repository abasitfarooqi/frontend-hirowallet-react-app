{"version":3,"file":"index.esm.js","sources":["../../src/signature/index.ts"],"sourcesContent":["import { StacksTestnet } from '@stacks/network';\nimport { ChainID } from '@stacks/transactions';\nimport { createUnsecuredToken, TokenSigner } from 'jsontokens';\nimport { getKeys, getUserSession, hasAppPrivateKey } from '../transactions';\nimport {\n  CommonSignatureRequestOptions,\n  SignatureOptions,\n  SignaturePayload,\n  SignaturePopup,\n  SignatureRequestOptions,\n} from '../types/signature';\nimport { getStacksProvider } from '../utils';\n\nfunction getStxAddress(options: CommonSignatureRequestOptions) {\n  const { userSession, network } = options;\n\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nasync function signPayload(payload: SignaturePayload, privateKey: string) {\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return tokenSigner.signAsync({ ...payload } as any);\n}\n\nexport function getDefaultSignatureRequestOptions(options: CommonSignatureRequestOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: CommonSignatureRequestOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nasync function openSignaturePopup({ token, options }: SignaturePopup) {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const signatureResponse = await provider.signatureRequest(token);\n    options.onFinish?.(signatureResponse);\n  } catch (error) {\n    console.error('[Connect] Error during signature request', error);\n    options.onCancel?.();\n  }\n}\n\nexport interface SignatureRequestPayload {\n  message: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport const signMessage = async (options: SignatureRequestOptions) => {\n  const { userSession, ..._options } = options;\n  if (hasAppPrivateKey(userSession)) {\n    const { privateKey, publicKey } = getKeys(userSession);\n\n    const payload: SignaturePayload = {\n      ..._options,\n      publicKey,\n    };\n\n    return signPayload(payload, privateKey);\n  }\n  const payload = { ..._options };\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return createUnsecuredToken(payload as any);\n};\n\nasync function generateTokenAndOpenPopup<T extends SignatureOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaultSignatureRequestOptions(options),\n    ...options,\n  } as T);\n  return openSignaturePopup({ token, options });\n}\n\nexport function openSignatureRequestPopup(options: SignatureRequestOptions) {\n  return generateTokenAndOpenPopup(options, signMessage);\n}\n"],"names":["options","userSession","network","stxAddresses","loadUserData","profile","stxAddress","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","payload","privateKey","tokenSigner","TokenSigner","signAsync","StacksTestnet","getUserSession","defaults","getStxAddress","token","provider","getStacksProvider","Error","signatureRequest","signatureResponse","onFinish","error","onCancel","signMessage","_options","hasAppPrivateKey","getKeys","publicKey","payload2","signPayload","createUnsecuredToken","makeTokenFn","getDefaultSignatureRequestOptions","openSignaturePopup","generateTokenAndOpenPopup"],"mappings":";;;;;;;;AAaA,uBAAuBA,SAAwC;EAAA;MACrDC,cAAyBD,QAAzBC;IAAaC,UAAYF,QAAZE;MAEjB,CAACD,eAAe,CAACC,gBAAgB;MAC/BC,eAAeF,wDAAAA,YAAaG,eAAeC,4BAA5B,sBAAqCC;MACpDC,kDACHC,QAAQC,WAAU,yBAClBD,QAAQE,WAAU;MAEfC,UAA8BR,gCAAAA,aAAeI,aAAaL,QAAQU;SACjED;AAAA;;;;;4EAIT,kBAA2BE,SAA2BC;;;;;UAC9CC,cAAc,IAAIC,YAAY,UAAUF;4CAEvCC,YAAYE,uBAAeJ;;;;;;;;;2CAGcb,SAAwC;MAClFE,UAAUF,QAAQE,WAAW,IAAIgB;MACjCjB,cAAckB,eAAenB,QAAQC;MACrCmB,wBACDpB;IACHE,SAAAA;IACAD,aAAAA;;;IAGAK,YAAYe,cAAcD;KACvBA;AAAA;;;;;mFAIP;IAAA;IAAA;MAAA;QAAA;UAAoCE,aAAAA,OAAOtB,eAAAA;UACnCuB,WAAWC;cACZD;;;;gBACG,IAAIE,MAAM;;;;iBAIgBF,SAASG,iBAAiBJ;;UAApDK;kBACEC,oCAAAA,SAAWD;;;;;;kBAEXE,MAAM;kBACNC,oCAAAA;;;;;;;;;IASCC;sFAAc,iBAAO/B;;;;;UACxBC,cAA6BD,QAA7BC,aAAgB+B,yCAAahC;eACjCiC,iBAAiBhC;;;;qBACeiC,QAAQjC,cAAlCa,sBAAAA,YAAYqB,qBAAAA;UAEdC,wBACDJ;YACHG,WAAAA;;2CAGKE,YAAYD,UAAStB;;UAExBD,uBAAemB;2CAEdM,qBAAqBzB;;;;;;;kBAdjBkB;;;;;;;;0FAiBb,kBACE/B,SACAuC;;;;;;iBAEoBA,yBACfC,kCAAkCxC,UAClCA;;UAFCsB;4CAICmB,mBAAmB;YAAEnB,OAAAA;YAAOtB,SAAAA;;;;;;;;;;mCAGKA,SAAkC;SACnE0C,0BAA0B1C,SAAS+B;AAAA;;;;"}