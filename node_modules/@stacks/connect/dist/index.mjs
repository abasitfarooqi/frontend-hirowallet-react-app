import { AppConfig, UserSession } from '@stacks/auth';
export * from '@stacks/auth';
import { decodeToken, SECP256K1Client, createUnsecuredToken, TokenSigner } from 'jsontokens';
import { StacksTestnet } from '@stacks/network';
import { ChainID, serializeCV, serializePostCondition, deserializeTransaction } from '@stacks/transactions';
import { defineCustomElements } from '@stacks/connect-ui/loader';

var N=Object.defineProperty,M=Object.defineProperties;var L=Object.getOwnPropertyDescriptors;var P=Object.getOwnPropertySymbols;var D=Object.prototype.hasOwnProperty,R=Object.prototype.propertyIsEnumerable;var k=(t,e,n)=>e in t?N(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,i=(t,e)=>{for(var n in e||(e={}))D.call(e,n)&&k(t,n,e[n]);if(P)for(var n of P(e))R.call(e,n)&&k(t,n,e[n]);return t},p=(t,e)=>M(t,L(e));var f=(t,e)=>{var n={};for(var r in t)D.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(t!=null&&P)for(var r of P(t))e.indexOf(r)<0&&R.call(t,r)&&(n[r]=t[r]);return n};function d(){return window.StacksProvider||window.BlockstackProvider}function Ht(){return !!d()}var jt="https://app.blockstack.org",U="7.3.1";typeof window!="undefined"&&(window.__CONNECT_VERSION__=U);var H=()=>{let t=navigator.userAgent;return /android/i.test(t)||/iPad|iPhone|iPod/.test(t)?!0:/windows phone/i.test(t)},Qt=()=>!H(),B=t=>{if(!t){let e=new AppConfig(["store_write"],document.location.href);t=new UserSession({appConfig:e});}return t},A=async t=>{let e=d();if(!e)throw new Error("Unable to authenticate without Hiro Wallet extension");let{redirectTo:n="/",manifestPath:r,onFinish:s,onCancel:o,sendToSignIn:a=!1,userSession:c,appDetails:u}=t,l=B(c);l.isUserSignedIn()&&l.signUserOut();let m=l.generateAndStoreTransitKey(),$=l.makeAuthRequest(m,`${document.location.origin}${n}`,`${document.location.origin}${r}`,l.appConfig.scopes,void 0,void 0,{sendToSignIn:a,appDetails:u,connectVersion:U});try{let T=await e.authenticationRequest($);await l.handlePendingSignIn(T);let h=decodeToken(T),X=h==null?void 0:h.payload;s==null||s({authResponse:T,authResponsePayload:X,userSession:l});}catch(T){console.error("[Connect] Error during auth request",T),o==null||o();}},Zt=async t=>(t=B(t),t.isUserSignedIn()?t.loadUserData():t.isSignInPending()?t.handlePendingSignIn():null);var J=Array.from({length:256},(t,e)=>e.toString(16).padStart(2,"0"));function S(t){if(!(t instanceof Uint8Array))throw new Error("Uint8Array expected");let e="";for(let n of t)e+=J[n];return e}function I(t){if(typeof t!="string")throw new TypeError(`hexToBytes: expected string, got ${typeof t}`);let e=t.length%2?`0${t}`:t,n=new Uint8Array(e.length/2);for(let r=0;r<n.length;r++){let s=r*2,o=e.slice(s,s+2),a=Number.parseInt(o,16);if(Number.isNaN(a)||a<0)throw new Error("Invalid byte sequence");n[r]=a;}return n}var z=(r=>(r.ContractCall="contract_call",r.ContractDeploy="smart_contract",r.STXTransfer="token_transfer",r))(z||{}),Y=(o=>(o.BUFFER="buffer",o.UINT="uint",o.INT="int",o.PRINCIPAL="principal",o.BOOL="bool",o))(Y||{});var x=t=>{let e=t;if(!e){let n=new AppConfig(["store_write"],document.location.href);e=new UserSession({appConfig:n});}return e};function g(t){try{return x(t).loadUserData().appPrivateKey}catch(e){return !1}}var y=t=>{let n=x(t).loadUserData().appPrivateKey,r=SECP256K1Client.derivePublicKey(n);return {privateKey:n,publicKey:r}};function st(t){var c;let{stxAddress:e,userSession:n,network:r}=t;if(e)return e;if(!n||!r)return;let s=(c=n==null?void 0:n.loadUserData().profile)==null?void 0:c.stxAddress,o={[ChainID.Mainnet]:"mainnet",[ChainID.Testnet]:"testnet"};return s==null?void 0:s[o[r.chainId]]}function it(t){let e=t.network||new StacksTestnet,n=x(t.userSession),r=p(i({},t),{network:e,userSession:n});return i({stxAddress:st(r)},r)}function E(t){return t.map(e=>S(serializePostCondition(e)))}async function C(t,e){let{postConditions:n}=t;return n&&typeof n[0]!="string"&&(n=E(n)),new TokenSigner("ES256k",e).signAsync(p(i({},t),{postConditions:n}))}function w(t){let{postConditions:e}=t;return e&&typeof e[0]!="string"&&(e=E(e)),createUnsecuredToken(p(i({},t),{postConditions:e}))}var at=async({token:t,options:e})=>{var r,s,o;let n=d();if(!n)throw new Error("Hiro Wallet not installed");try{let a=await n.transactionRequest(t),{txRaw:c}=a,u=I(c.replace(/^0x/,"")),l=deserializeTransaction(u);if("sponsored"in e&&e.sponsored){(r=e.onFinish)==null||r.call(e,p(i({},a),{stacksTransaction:l}));return}(s=e.onFinish)==null||s.call(e,p(i({},a),{stacksTransaction:l}));}catch(a){console.error("[Connect] Error during transaction request",a),(o=e.onCancel)==null||o.call(e);}},pt=async t=>{let c=t,{functionArgs:e,appDetails:n,userSession:r}=c,s=f(c,["functionArgs","appDetails","userSession"]),o=e.map(u=>typeof u=="string"?u:S(serializeCV(u)));if(g(r)){let{privateKey:u,publicKey:l}=y(r),m=p(i({},s),{functionArgs:o,txType:"contract_call",publicKey:l});return n&&(m.appDetails=n),C(m,u)}let a=p(i({},s),{functionArgs:o,txType:"contract_call"});return n&&(a.appDetails=n),w(a)},ct=async t=>{let o=t,{appDetails:e,userSession:n}=o,r=f(o,["appDetails","userSession"]);if(g(n)){let{privateKey:a,publicKey:c}=y(n),u=p(i({},r),{publicKey:c,txType:"smart_contract"});return e&&(u.appDetails=e),C(u,a)}let s=p(i({},r),{txType:"smart_contract"});return e&&(s.appDetails=e),w(s)},ut=async t=>{let a=t,{amount:e,appDetails:n,userSession:r}=a,s=f(a,["amount","appDetails","userSession"]);if(g(r)){let{privateKey:c,publicKey:u}=y(r),l=p(i({},s),{amount:e.toString(10),publicKey:u,txType:"token_transfer"});return n&&(l.appDetails=n),C(l,c)}let o=p(i({},s),{amount:e.toString(10),txType:"token_transfer"});return n&&(o.appDetails=n),w(o)};async function O(t,e){let n=await e(i(i({},it(t)),t));return at({token:n,options:t})}function le(t){return O(t,pt)}function de(t){return O(t,ct)}function fe(t){return O(t,ut)}async function gt(t,e){return new TokenSigner("ES256k",e).signAsync(i({},t))}function yt(t){let e=t.network||new StacksTestnet,n=x(t.userSession),r=p(i({},t),{network:e,userSession:n});return i({},r)}async function xt({token:t,options:e}){var r,s;let n=d();if(!n)throw new Error("Hiro Wallet not installed");try{let o=await n.psbtRequest(t);(r=e.onFinish)==null||r.call(e,o);}catch(o){console.error("[Connect] Error during psbt request",o),(s=e.onCancel)==null||s.call(e);}}var mt=async t=>{let c=t,{allowedSighash:e,hex:n,signAtIndex:r,userSession:s}=c,o=f(c,["allowedSighash","hex","signAtIndex","userSession"]);if(g(s)){let{privateKey:u,publicKey:l}=y(s),m=p(i({},o),{allowedSighash:e,hex:n,signAtIndex:r,publicKey:l});return gt(m,u)}let a=i({},o);return createUnsecuredToken(a)};async function St(t,e){let n=await e(i(i({},yt(t)),t));return xt({token:n,options:t})}function he(t){return St(t,mt)}function Ct(t){var a;let{userSession:e,network:n}=t;if(!e||!n)return;let r=(a=e==null?void 0:e.loadUserData().profile)==null?void 0:a.stxAddress,s={[ChainID.Mainnet]:"mainnet",[ChainID.Testnet]:"testnet"};return r==null?void 0:r[s[n.chainId]]}async function wt(t,e){return new TokenSigner("ES256k",e).signAsync(i({},t))}function b(t){let e=t.network||new StacksTestnet,n=x(t.userSession),r=p(i({},t),{network:e,userSession:n});return i({stxAddress:Ct(r)},r)}async function Ot({token:t,options:e}){var r,s;let n=d();if(!n)throw new Error("Hiro Wallet not installed.");try{let o=await n.signatureRequest(t);(r=e.onFinish)==null||r.call(e,o);}catch(o){console.error("[Connect] Error during signature request",o),(s=e.onCancel)==null||s.call(e);}}var bt=async t=>{let s=t,{userSession:e}=s,n=f(s,["userSession"]);if(g(e)){let{privateKey:o,publicKey:a}=y(e),c=p(i({},n),{publicKey:a});return wt(c,o)}let r=i({},n);return createUnsecuredToken(r)};async function kt(t,e){let n=await e(i(i({},b(t)),t));return Ot({token:n,options:t})}function Ue(t){return kt(t,bt)}async function Ut(t,e){let n=await e(i(i({},b(t)),t));return It({token:n,options:t})}function F(t){return p(i({},t),{message:S(serializeCV(t.message)),domain:S(serializeCV(t.domain))})}async function Bt(t,e){return new TokenSigner("ES256k",e).signAsync(F(t))}async function At(t){let r=t,{userSession:e}=r,n=f(r,["userSession"]);if(g(e)){let{privateKey:s,publicKey:o}=y(e),a=p(i({},n),{publicKey:o});return Bt(a,s)}return createUnsecuredToken(F(t))}async function It({token:t,options:e}){var r,s;let n=d();if(!n)throw new Error("Hiro Wallet not installed.");try{let o=await n.structuredDataSignatureRequest(t);(r=e.onFinish)==null||r.call(e,o);}catch(o){console.error("[Connect] Error during signature request",o),(s=e.onCancel)==null||s.call(e);}}function $e(t){return Ut(t,At)}async function Kt(t,e){return new TokenSigner("ES256k",e).signAsync(i({},t))}function Ft(t){let e=t.network||new StacksTestnet,n=x(t.userSession),r=p(i({},t),{network:e,userSession:n});return i({},r)}async function $t({token:t,options:e}){var r,s;let n=d();if(!n)throw new Error("Hiro Wallet not installed.");try{let o=await n.profileUpdateRequest(t);(r=e.onFinish)==null||r.call(e,o);}catch(o){console.error("[Connect] Error during signature request",o),(s=e.onCancel)==null||s.call(e);}}var Xt=async t=>{let o=t,{userSession:e,profile:n}=o,r=f(o,["userSession","profile"]);if(g(e)){let{privateKey:a,publicKey:c}=y(e),u=p(i({},r),{profile:n,publicKey:c});return Kt(u,a)}let s=i({},r);return createUnsecuredToken(s)};async function Nt(t,e){let n=await e(i(i({},Ft(t)),t));return $t({token:n,options:t})}function He(t){return Nt(t,Xt)}var Mt=(o=>(o[o.DEFAULT=0]="DEFAULT",o[o.ALL=1]="ALL",o[o.NONE=2]="NONE",o[o.SINGLE=3]="SINGLE",o[o.ANYONECANPAY=128]="ANYONECANPAY",o))(Mt||{});var _t=t=>{if(d()){A(t);return}if(typeof window!==void 0){defineCustomElements(window);let e=document.createElement("connect-modal");e.authOptions=t,document.body.appendChild(e);let n=r=>{r.key==="Escape"&&(document.removeEventListener("keydown",n),e.remove());};document.addEventListener("keydown",n);}},Ze=t=>_t(t);

export { Y as ContractCallArgumentType, Mt as SignatureHash, z as TransactionTypes, A as authenticate, jt as defaultAuthURL, Ft as getDefaultProfileUpdateRequestOptions, yt as getDefaultPsbtRequestOptions, b as getDefaultSignatureRequestOptions, y as getKeys, B as getOrCreateUserSession, d as getStacksProvider, st as getStxAddress, Zt as getUserData, x as getUserSession, g as hasAppPrivateKey, H as isMobile, Ht as isStacksWalletInstalled, pt as makeContractCallToken, ct as makeContractDeployToken, Xt as makeProfileUpdateToken, mt as makePsbtToken, ut as makeSTXTransferToken, le as openContractCall, de as openContractDeploy, He as openProfileUpdateRequestPopup, he as openPsbtRequestPopup, fe as openSTXTransfer, Ue as openSignatureRequestPopup, $e as openStructuredDataSignatureRequestPopup, Qt as shouldUsePopup, Ze as showBlockstackConnect, _t as showConnect, bt as signMessage, At as signStructuredMessage };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=index.mjs.map