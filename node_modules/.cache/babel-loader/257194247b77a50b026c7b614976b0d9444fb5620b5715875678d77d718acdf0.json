{"ast":null,"code":"import { utf8ToBytes } from '@stacks/common';\nimport { addressToString } from '../../common';\nimport { createAddress, createLPString } from '../../postcondition-types';\nimport { ClarityType } from '../constants';\nfunction principalToString(principal) {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\nfunction principalCV(principal) {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\nfunction standardPrincipalCV(addressString) {\n  const addr = createAddress(addressString);\n  return {\n    type: ClarityType.PrincipalStandard,\n    address: addr\n  };\n}\nfunction standardPrincipalCVFromAddress(address) {\n  return {\n    type: ClarityType.PrincipalStandard,\n    address\n  };\n}\nfunction contractPrincipalCV(addressString, contractName) {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\nfunction contractPrincipalCVFromAddress(address, contractName) {\n  if (utf8ToBytes(contractName.content).byteLength >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return {\n    type: ClarityType.PrincipalContract,\n    address,\n    contractName\n  };\n}\nfunction contractPrincipalCVFromStandard(sp, contractName) {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName\n  };\n}\nexport { principalCV, principalToString, standardPrincipalCV, standardPrincipalCVFromAddress, contractPrincipalCV, contractPrincipalCVFromAddress, contractPrincipalCVFromStandard };","map":{"version":3,"names":["utf8ToBytes","addressToString","createAddress","createLPString","ClarityType","principalToString","principal","type","PrincipalStandard","address","PrincipalContract","contractName","content","Error","JSON","stringify","principalCV","includes","split","contractPrincipalCV","standardPrincipalCV","addressString","addr","standardPrincipalCVFromAddress","lengthPrefixedContractName","contractPrincipalCVFromAddress","byteLength","contractPrincipalCVFromStandard","sp"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\principalCV.ts"],"sourcesContent":["import { utf8ToBytes } from '@stacks/common';\nimport { Address, addressToString } from '../../common';\nimport { LengthPrefixedString, createAddress, createLPString } from '../../postcondition-types';\nimport { ClarityType } from '../constants';\n\ntype PrincipalCV = StandardPrincipalCV | ContractPrincipalCV;\n\ninterface StandardPrincipalCV {\n  readonly type: ClarityType.PrincipalStandard;\n  readonly address: Address;\n}\n\ninterface ContractPrincipalCV {\n  readonly type: ClarityType.PrincipalContract;\n  readonly address: Address;\n  readonly contractName: LengthPrefixedString;\n}\n/** Returns a string in the format `address` or `address.contract-name` from a principal (standard or contract) */\nfunction principalToString(principal: PrincipalCV): string {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal: string): PrincipalCV {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCV } from '@stacks/transactions';\n *\n *  const addr = standardPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B');\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction standardPrincipalCV(addressString: string): StandardPrincipalCV {\n  const addr = createAddress(addressString);\n  return { type: ClarityType.PrincipalStandard, address: addr };\n}\n\n/**\n * Converts stx address in to StandardPrincipalCV clarity type\n * @param {addressString} string value to be converted to StandardPrincipalCV clarity type\n * @returns {StandardPrincipalCV} returns instance of type StandardPrincipalCV\n *\n * @example\n * ```\n *  import { standardPrincipalCVFromAddress, Address  } from '@stacks/transactions';\n *\n *  const address: Address = {\n *    type: 0,\n *    version: 22,\n *    hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6'\n *  };\n *\n *  const principalCV = standardPrincipalCVFromAddress(address);\n *  // { type: 5, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction standardPrincipalCVFromAddress(address: Address): StandardPrincipalCV {\n  return { type: ClarityType.PrincipalStandard, address };\n}\n\n/**\n * Converts stx address in to ContractPrincipalCV clarity type\n * @param {addressString} string value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} string containing contract name\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCV } from '@stacks/transactions';\n *\n *  const contractAddress = contractPrincipalCV('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B', 'test');\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction contractPrincipalCV(addressString: string, contractName: string): ContractPrincipalCV {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\n/**\n * Create ContractPrincipalCV from Address type\n * @param {address} address value to be converted to ContractPrincipalCV clarity type\n * @param {contractName} contract name of type LengthPrefixedString\n * @returns {ContractPrincipalCV} returns instance of type ContractPrincipalCV\n *\n * @example\n * ```\n *  import { contractPrincipalCVFromAddress, createLPString, createAddress } from '@stacks/transactions';\n *\n *  const contractAddressCV = contractPrincipalCVFromAddress(createAddress('SP2JXKMSH007NPYAQHKJPQMAQYAD90NQGTVJVQ02B'), createLPString('test'));\n *\n *  // { type: 6, address: { type: 0, version: 22, hash160: 'a5d9d331000f5b79578ce56bd157f29a9056f0d6' }, contractName: { type: 2, content: 'test', lengthPrefixBytes: 1, maxLengthBytes: 128 } }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction contractPrincipalCVFromAddress(\n  address: Address,\n  contractName: LengthPrefixedString\n): ContractPrincipalCV {\n  if (utf8ToBytes(contractName.content).byteLength >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n  return { type: ClarityType.PrincipalContract, address, contractName };\n}\n\nfunction contractPrincipalCVFromStandard(\n  sp: StandardPrincipalCV,\n  contractName: string\n): ContractPrincipalCV {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName,\n  };\n}\n\nexport {\n  PrincipalCV,\n  StandardPrincipalCV,\n  ContractPrincipalCV,\n  principalCV,\n  principalToString,\n  standardPrincipalCV,\n  standardPrincipalCVFromAddress,\n  contractPrincipalCV,\n  contractPrincipalCVFromAddress,\n  contractPrincipalCVFromStandard,\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,gBAAgB;AAC5C,SAAkBC,eAAe,QAAQ,cAAc;AACvD,SAA+BC,aAAa,EAAEC,cAAc,QAAQ,2BAA2B;AAC/F,SAASC,WAAW,QAAQ,cAAc;AAe1C,SAASC,iBAAiBA,CAACC,SAAsB;EAC/C,IAAIA,SAAS,CAACC,IAAI,KAAKH,WAAW,CAACI,iBAAiB,EAAE;IACpD,OAAOP,eAAe,CAACK,SAAS,CAACG,OAAO,CAAC;GAC1C,MAAM,IAAIH,SAAS,CAACC,IAAI,KAAKH,WAAW,CAACM,iBAAiB,EAAE;IAC3D,MAAMD,OAAO,GAAGR,eAAe,CAACK,SAAS,CAACG,OAAO,CAAC;IAClD,OAAO,GAAGA,OAAO,IAAIH,SAAS,CAACK,YAAY,CAACC,OAAO,EAAE;GACtD,MAAM;IACL,MAAM,IAAIC,KAAK,CAAC,8BAA8BC,IAAI,CAACC,SAAS,CAACT,SAAS,CAAC,EAAE,CAAC;;AAE9E;AAEA,SAASU,WAAWA,CAACV,SAAiB;EACpC,IAAIA,SAAS,CAACW,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3B,MAAM,CAACR,OAAO,EAAEE,YAAY,CAAC,GAAGL,SAAS,CAACY,KAAK,CAAC,GAAG,CAAC;IACpD,OAAOC,mBAAmB,CAACV,OAAO,EAAEE,YAAY,CAAC;GAClD,MAAM;IACL,OAAOS,mBAAmB,CAACd,SAAS,CAAC;;AAEzC;AAkBA,SAASc,mBAAmBA,CAACC,aAAqB;EAChD,MAAMC,IAAI,GAAGpB,aAAa,CAACmB,aAAa,CAAC;EACzC,OAAO;IAAEd,IAAI,EAAEH,WAAW,CAACI,iBAAiB;IAAEC,OAAO,EAAEa;EAAI,CAAE;AAC/D;AAwBA,SAASC,8BAA8BA,CAACd,OAAgB;EACtD,OAAO;IAAEF,IAAI,EAAEH,WAAW,CAACI,iBAAiB;IAAEC;EAAO,CAAE;AACzD;AAmBA,SAASU,mBAAmBA,CAACE,aAAqB,EAAEV,YAAoB;EACtE,MAAMW,IAAI,GAAGpB,aAAa,CAACmB,aAAa,CAAC;EACzC,MAAMG,0BAA0B,GAAGrB,cAAc,CAACQ,YAAY,CAAC;EAC/D,OAAOc,8BAA8B,CAACH,IAAI,EAAEE,0BAA0B,CAAC;AACzE;AAoBA,SAASC,8BAA8BA,CACrChB,OAAgB,EAChBE,YAAkC;EAElC,IAAIX,WAAW,CAACW,YAAY,CAACC,OAAO,CAAC,CAACc,UAAU,IAAI,GAAG,EAAE;IACvD,MAAM,IAAIb,KAAK,CAAC,2CAA2C,CAAC;;EAE9D,OAAO;IAAEN,IAAI,EAAEH,WAAW,CAACM,iBAAiB;IAAED,OAAO;IAAEE;EAAY,CAAE;AACvE;AAEA,SAASgB,+BAA+BA,CACtCC,EAAuB,EACvBjB,YAAoB;EAEpB,MAAMa,0BAA0B,GAAGrB,cAAc,CAACQ,YAAY,CAAC;EAC/D,OAAO;IACLJ,IAAI,EAAEH,WAAW,CAACM,iBAAiB;IACnCD,OAAO,EAAEmB,EAAE,CAACnB,OAAO;IACnBE,YAAY,EAAEa;GACf;AACH;AAEA,SAIER,WAAW,EACXX,iBAAiB,EACjBe,mBAAmB,EACnBG,8BAA8B,EAC9BJ,mBAAmB,EACnBM,8BAA8B,EAC9BE,+BAA+B"},"metadata":{},"sourceType":"module","externalDependencies":[]}