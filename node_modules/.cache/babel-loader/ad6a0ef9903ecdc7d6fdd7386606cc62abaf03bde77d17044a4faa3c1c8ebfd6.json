{"ast":null,"code":"/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '00';\n  const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n  const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n  if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n    throw new TypeError('Argument must be of type Uint8Array or string');\n  }\n  const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n  return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n  const bytes = basex(ALPHABET).decode(string);\n  const prefixBytes = bytes.slice(0, 1);\n  const dataBytes = bytes.slice(1, -4);\n  // todo: for better performance replace spread with `concatBytes` method\n  const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n  bytes.slice(-4).forEach((check, index) => {\n    if (check !== checksum[index]) {\n      throw new Error('Invalid checksum');\n    }\n  });\n  return {\n    prefix: prefixBytes,\n    data: dataBytes\n  };\n}\nexports.decode = decode;","map":{"version":3,"names":["Object","defineProperty","exports","value","decode","encode","sha256_1","require","utils_1","basex","ALPHABET","data","prefix","arguments","length","undefined","dataBytes","hexToBytes","prefixBytes","Uint8Array","TypeError","checksum","sha256","slice","string","bytes","forEach","check","index","Error"],"sources":["C:/Users/abasi/Desktop/web3-apps/react-cra/node_modules/c32check/lib/base58check.js"],"sourcesContent":["/*\n * From https://github.com/wzbg/base58check\n * @Author: zyc\n * @Date:   2016-09-11 23:36:05\n */\n'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decode = exports.encode = void 0;\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst basex = require(\"base-x\");\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nfunction encode(data, prefix = '00') {\n    const dataBytes = typeof data === 'string' ? (0, utils_1.hexToBytes)(data) : data;\n    const prefixBytes = typeof prefix === 'string' ? (0, utils_1.hexToBytes)(prefix) : data;\n    if (!(dataBytes instanceof Uint8Array) || !(prefixBytes instanceof Uint8Array)) {\n        throw new TypeError('Argument must be of type Uint8Array or string');\n    }\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    return basex(ALPHABET).encode([...prefixBytes, ...dataBytes, ...checksum.slice(0, 4)]);\n}\nexports.encode = encode;\nfunction decode(string) {\n    const bytes = basex(ALPHABET).decode(string);\n    const prefixBytes = bytes.slice(0, 1);\n    const dataBytes = bytes.slice(1, -4);\n    // todo: for better performance replace spread with `concatBytes` method\n    const checksum = (0, sha256_1.sha256)((0, sha256_1.sha256)(new Uint8Array([...prefixBytes, ...dataBytes])));\n    bytes.slice(-4).forEach((check, index) => {\n        if (check !== checksum[index]) {\n            throw new Error('Invalid checksum');\n        }\n    });\n    return { prefix: prefixBytes, data: dataBytes };\n}\nexports.decode = decode;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAGF,OAAO,CAACG,MAAM,GAAG,KAAK,CAAC;AACxC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAChD,MAAMC,OAAO,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAC9C,MAAME,KAAK,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC/B,MAAMG,QAAQ,GAAG,4DAA4D;AAC7E,SAASL,MAAMA,CAACM,IAAI,EAAiB;EAAA,IAAfC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC/B,MAAMG,SAAS,GAAG,OAAOL,IAAI,KAAK,QAAQ,GAAG,CAAC,CAAC,EAAEH,OAAO,CAACS,UAAU,EAAEN,IAAI,CAAC,GAAGA,IAAI;EACjF,MAAMO,WAAW,GAAG,OAAON,MAAM,KAAK,QAAQ,GAAG,CAAC,CAAC,EAAEJ,OAAO,CAACS,UAAU,EAAEL,MAAM,CAAC,GAAGD,IAAI;EACvF,IAAI,EAAEK,SAAS,YAAYG,UAAU,CAAC,IAAI,EAAED,WAAW,YAAYC,UAAU,CAAC,EAAE;IAC5E,MAAM,IAAIC,SAAS,CAAC,+CAA+C,CAAC;EACxE;EACA,MAAMC,QAAQ,GAAG,CAAC,CAAC,EAAEf,QAAQ,CAACgB,MAAM,EAAE,CAAC,CAAC,EAAEhB,QAAQ,CAACgB,MAAM,EAAE,IAAIH,UAAU,CAAC,CAAC,GAAGD,WAAW,EAAE,GAAGF,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3G,OAAOP,KAAK,CAACC,QAAQ,CAAC,CAACL,MAAM,CAAC,CAAC,GAAGa,WAAW,EAAE,GAAGF,SAAS,EAAE,GAAGK,QAAQ,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1F;AACArB,OAAO,CAACG,MAAM,GAAGA,MAAM;AACvB,SAASD,MAAMA,CAACoB,MAAM,EAAE;EACpB,MAAMC,KAAK,GAAGhB,KAAK,CAACC,QAAQ,CAAC,CAACN,MAAM,CAACoB,MAAM,CAAC;EAC5C,MAAMN,WAAW,GAAGO,KAAK,CAACF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACrC,MAAMP,SAAS,GAAGS,KAAK,CAACF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACpC;EACA,MAAMF,QAAQ,GAAG,CAAC,CAAC,EAAEf,QAAQ,CAACgB,MAAM,EAAE,CAAC,CAAC,EAAEhB,QAAQ,CAACgB,MAAM,EAAE,IAAIH,UAAU,CAAC,CAAC,GAAGD,WAAW,EAAE,GAAGF,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3GS,KAAK,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC,CAACG,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;IACtC,IAAID,KAAK,KAAKN,QAAQ,CAACO,KAAK,CAAC,EAAE;MAC3B,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;IACvC;EACJ,CAAC,CAAC;EACF,OAAO;IAAEjB,MAAM,EAAEM,WAAW;IAAEP,IAAI,EAAEK;EAAU,CAAC;AACnD;AACAd,OAAO,CAACE,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}