{"ast":null,"code":"\"use strict\";\n\n//  NOTICE\n//  Copyright 2015 D2L Corporation\n//\n//  Licensed under the Apache License, Version 2.0 (the \"License\");\n//  you may not use this file except in compliance with the License.\n//  You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n//  Unless required by applicable law or agreed to in writing, software\n//  distributed under the License is distributed on an \"AS IS\" BASIS,\n//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n//  See the License for the specific language governing permissions and\n//  limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.joseToDer = exports.derToJose = void 0;\n// The following code is adapted from https://github.com/Brightspace/node-ecdsa-sig-formatter\nconst base64_js_1 = require(\"base64-js\");\nconst base64Url_1 = require(\"./base64Url\");\nfunction getParamSize(keySize) {\n  return (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);\n}\nconst paramBytesForAlg = {\n  ES256: getParamSize(256),\n  ES384: getParamSize(384),\n  ES512: getParamSize(521)\n};\nfunction getParamBytesForAlg(alg) {\n  const paramBytes = paramBytesForAlg[alg];\n  if (paramBytes) {\n    return paramBytes;\n  }\n  throw new Error(`Unknown algorithm \"${alg}\"`);\n}\nconst MAX_OCTET = 0x80;\nconst CLASS_UNIVERSAL = 0;\nconst PRIMITIVE_BIT = 0x20;\nconst TAG_SEQ = 0x10;\nconst TAG_INT = 0x02;\nconst ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6;\nconst ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;\nfunction signatureAsBytes(signature) {\n  if (signature instanceof Uint8Array) {\n    return signature;\n  } else if ('string' === typeof signature) {\n    return (0, base64_js_1.toByteArray)((0, base64Url_1.pad)(signature));\n  }\n  throw new TypeError('ECDSA signature must be a Base64 string or a Uint8Array');\n}\nfunction derToJose(signature, alg) {\n  const signatureBytes = signatureAsBytes(signature);\n  const paramBytes = getParamBytesForAlg(alg);\n  // the DER encoded param should at most be the param size, plus a padding\n  // zero, since due to being a signed integer\n  const maxEncodedParamLength = paramBytes + 1;\n  const inputLength = signatureBytes.length;\n  let offset = 0;\n  if (signatureBytes[offset++] !== ENCODED_TAG_SEQ) {\n    throw new Error('Could not find expected \"seq\"');\n  }\n  let seqLength = signatureBytes[offset++];\n  if (seqLength === (MAX_OCTET | 1)) {\n    seqLength = signatureBytes[offset++];\n  }\n  if (inputLength - offset < seqLength) {\n    throw new Error(`\"seq\" specified length of \"${seqLength}\", only \"${inputLength - offset}\" remaining`);\n  }\n  if (signatureBytes[offset++] !== ENCODED_TAG_INT) {\n    throw new Error('Could not find expected \"int\" for \"r\"');\n  }\n  const rLength = signatureBytes[offset++];\n  if (inputLength - offset - 2 < rLength) {\n    throw new Error(`\"r\" specified length of \"${rLength}\", only \"${inputLength - offset - 2}\" available`);\n  }\n  if (maxEncodedParamLength < rLength) {\n    throw new Error(`\"r\" specified length of \"${rLength}\", max of \"${maxEncodedParamLength}\" is acceptable`);\n  }\n  const rOffset = offset;\n  offset += rLength;\n  if (signatureBytes[offset++] !== ENCODED_TAG_INT) {\n    throw new Error('Could not find expected \"int\" for \"s\"');\n  }\n  const sLength = signatureBytes[offset++];\n  if (inputLength - offset !== sLength) {\n    throw new Error(`\"s\" specified length of \"${sLength}\", expected \"${inputLength - offset}\"`);\n  }\n  if (maxEncodedParamLength < sLength) {\n    throw new Error(`\"s\" specified length of \"${sLength}\", max of \"${maxEncodedParamLength}\" is acceptable`);\n  }\n  const sOffset = offset;\n  offset += sLength;\n  if (offset !== inputLength) {\n    throw new Error(`Expected to consume entire array, but \"${inputLength - offset}\" bytes remain`);\n  }\n  const rPadding = paramBytes - rLength;\n  const sPadding = paramBytes - sLength;\n  const dst = new Uint8Array(rPadding + rLength + sPadding + sLength);\n  for (offset = 0; offset < rPadding; ++offset) {\n    dst[offset] = 0;\n  }\n  dst.set(signatureBytes.subarray(rOffset + Math.max(-rPadding, 0), rOffset + rLength), offset);\n  offset = paramBytes;\n  for (const o = offset; offset < o + sPadding; ++offset) {\n    dst[offset] = 0;\n  }\n  dst.set(signatureBytes.subarray(sOffset + Math.max(-sPadding, 0), sOffset + sLength), offset);\n  return (0, base64Url_1.escape)((0, base64_js_1.fromByteArray)(dst));\n}\nexports.derToJose = derToJose;\nfunction countPadding(buf, start, stop) {\n  let padding = 0;\n  while (start + padding < stop && buf[start + padding] === 0) {\n    ++padding;\n  }\n  const needsSign = buf[start + padding] >= MAX_OCTET;\n  if (needsSign) {\n    --padding;\n  }\n  return padding;\n}\nfunction joseToDer(signature, alg) {\n  signature = signatureAsBytes(signature);\n  const paramBytes = getParamBytesForAlg(alg);\n  const signatureBytes = signature.length;\n  if (signatureBytes !== paramBytes * 2) {\n    throw new TypeError(`\"${alg}\" signatures must be \"${paramBytes * 2}\" bytes, saw \"${signatureBytes}\"`);\n  }\n  const rPadding = countPadding(signature, 0, paramBytes);\n  const sPadding = countPadding(signature, paramBytes, signature.length);\n  const rLength = paramBytes - rPadding;\n  const sLength = paramBytes - sPadding;\n  const rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;\n  const shortLength = rsBytes < MAX_OCTET;\n  const dst = new Uint8Array((shortLength ? 2 : 3) + rsBytes);\n  let offset = 0;\n  dst[offset++] = ENCODED_TAG_SEQ;\n  if (shortLength) {\n    // Bit 8 has value \"0\"\n    // bits 7-1 give the length.\n    dst[offset++] = rsBytes;\n  } else {\n    // Bit 8 of first octet has value \"1\"\n    // bits 7-1 give the number of additional length octets.\n    dst[offset++] = MAX_OCTET | 1;\n    // length, base 256\n    dst[offset++] = rsBytes & 0xff;\n  }\n  dst[offset++] = ENCODED_TAG_INT;\n  dst[offset++] = rLength;\n  if (rPadding < 0) {\n    dst[offset++] = 0;\n    dst.set(signature.subarray(0, paramBytes), offset);\n    offset += paramBytes;\n  } else {\n    dst.set(signature.subarray(rPadding, paramBytes), offset);\n    offset += paramBytes - rPadding;\n  }\n  dst[offset++] = ENCODED_TAG_INT;\n  dst[offset++] = sLength;\n  if (sPadding < 0) {\n    dst[offset++] = 0;\n    dst.set(signature.subarray(paramBytes), offset);\n  } else {\n    dst.set(signature.subarray(paramBytes + sPadding), offset);\n  }\n  return dst;\n}\nexports.joseToDer = joseToDer;","map":{"version":3,"names":["base64_js_1","require","base64Url_1","getParamSize","keySize","paramBytesForAlg","ES256","ES384","ES512","getParamBytesForAlg","alg","paramBytes","Error","MAX_OCTET","CLASS_UNIVERSAL","PRIMITIVE_BIT","TAG_SEQ","TAG_INT","ENCODED_TAG_SEQ","ENCODED_TAG_INT","signatureAsBytes","signature","Uint8Array","toByteArray","pad","TypeError","derToJose","signatureBytes","maxEncodedParamLength","inputLength","length","offset","seqLength","rLength","rOffset","sLength","sOffset","rPadding","sPadding","dst","set","subarray","Math","max","o","escape","fromByteArray","exports","countPadding","buf","start","stop","padding","needsSign","joseToDer","rsBytes","shortLength"],"sources":["ecdsaSigFormatter.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}