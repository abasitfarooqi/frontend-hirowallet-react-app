{"ast":null,"code":"import { useContext } from 'react';\nimport { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport { ConnectContext, ConnectDispatchContext, States } from '../components/connect/context.esm.js';\nimport { authenticate, showBlockstackConnect, openContractCall, openContractDeploy, openSTXTransfer, openProfileUpdateRequestPopup, openSignatureRequestPopup, openStructuredDataSignatureRequestPopup } from '@stacks/connect';\nvar useConnectDispatch = function useConnectDispatch() {\n  var dispatch = useContext(ConnectDispatchContext);\n  if (!dispatch) {\n    throw new Error(\"This must be used within the ConnectProvider component.\");\n  }\n  return dispatch;\n};\nvar useConnect = function useConnect() {\n  var _useContext = useContext(ConnectContext),\n    isOpen = _useContext.isOpen,\n    isAuthenticating = _useContext.isAuthenticating,\n    authData = _useContext.authData,\n    authOptions = _useContext.authOptions,\n    userSession = _useContext.userSession;\n  var dispatch = useConnectDispatch();\n  var doUpdateAuthOptions = function doUpdateAuthOptions(payload) {\n    return dispatch({\n      type: States.UPDATE_AUTH_OPTIONS,\n      payload: payload\n    });\n  };\n  var doOpenAuth = function doOpenAuth(signIn, options) {\n    if (signIn) {\n      var _options = _extends({}, authOptions, options, {\n        onFinish: function onFinish(payload) {\n          authOptions.onFinish == null ? void 0 : authOptions.onFinish(payload);\n        },\n        sendToSignIn: true\n      });\n      void authenticate(_options);\n      return;\n    } else {\n      showBlockstackConnect(_extends({}, authOptions, {\n        sendToSignIn: false\n      }));\n    }\n    authOptions && doUpdateAuthOptions(authOptions);\n  };\n  var doAuth = function doAuth(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    void authenticate(_extends({}, authOptions, options, {\n      onFinish: function onFinish(payload) {\n        authOptions.onFinish == null ? void 0 : authOptions.onFinish(payload);\n      }\n    }));\n  };\n  function doContractCall(options) {\n    return openContractCall(_extends({}, options, {\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails\n    }));\n  }\n  function doContractDeploy(options) {\n    return openContractDeploy(_extends({}, options, {\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails\n    }));\n  }\n  function doSTXTransfer(options) {\n    return openSTXTransfer(_extends({}, options, {\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails\n    }));\n  }\n  function doProfileUpdate(options) {\n    return openProfileUpdateRequestPopup(_extends({}, options, {\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails\n    }));\n  }\n  function sign(options) {\n    return openSignatureRequestPopup(_extends({}, options, {\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails\n    }));\n  }\n  function signStructuredData(options) {\n    return openStructuredDataSignatureRequestPopup(_extends({}, options, {\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails\n    }));\n  }\n  return {\n    isOpen: isOpen,\n    isAuthenticating: isAuthenticating,\n    authData: authData,\n    authOptions: authOptions,\n    userSession: userSession,\n    doOpenAuth: doOpenAuth,\n    doAuth: doAuth,\n    authenticate: authenticate,\n    doContractCall: doContractCall,\n    doContractDeploy: doContractDeploy,\n    doSTXTransfer: doSTXTransfer,\n    doProfileUpdate: doProfileUpdate,\n    sign: sign,\n    signStructuredData: signStructuredData\n  };\n};\nexport { useConnect };","map":{"version":3,"names":["useConnectDispatch","dispatch","useContext","ConnectDispatchContext","Error","useConnect","ConnectContext","isOpen","_useContext","isAuthenticating","authData","authOptions","userSession","doUpdateAuthOptions","payload","type","States","UPDATE_AUTH_OPTIONS","doOpenAuth","signIn","options","_options","_extends","onFinish","sendToSignIn","authenticate","doAuth","openContractCall","authOrigin","appDetails","openContractDeploy","openSTXTransfer","openProfileUpdateRequestPopup","openSignatureRequestPopup","openStructuredDataSignatureRequestPopup","doContractCall","doContractDeploy","doSTXTransfer","doProfileUpdate","sign","signStructuredData"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\connect-react\\src\\react\\hooks\\use-connect.ts"],"sourcesContent":["import {\n  authenticate,\n  AuthOptions,\n  ContractCallOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  ContractDeployOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  FinishedAuthData,\n  openContractCall,\n  openContractDeploy,\n  openProfileUpdateRequestPopup,\n  openSignatureRequestPopup,\n  openStructuredDataSignatureRequestPopup,\n  openSTXTransfer,\n  ProfileUpdateRequestOptions,\n  showBlockstackConnect,\n  SignatureRequestOptions,\n  STXTransferOptions,\n  STXTransferRegularOptions,\n  STXTransferSponsoredOptions,\n} from '@stacks/connect';\nimport { StructuredDataSignatureRequestOptions } from '@stacks/connect/src/types/structuredDataSignature';\nimport { useContext } from 'react';\nimport { ConnectContext, ConnectDispatchContext, States } from '../components/connect/context';\n\nconst useConnectDispatch = () => {\n  const dispatch = useContext(ConnectDispatchContext);\n  if (!dispatch) {\n    throw new Error('This must be used within the ConnectProvider component.');\n  }\n  return dispatch;\n};\n\nexport const useConnect = () => {\n  const { isOpen, isAuthenticating, authData, authOptions, userSession } =\n    useContext(ConnectContext);\n\n  const dispatch = useConnectDispatch();\n\n  const doUpdateAuthOptions = (payload: Partial<AuthOptions>) => {\n    return dispatch({ type: States.UPDATE_AUTH_OPTIONS, payload });\n  };\n\n  /**\n   *\n   * @param signIn Whether the user should be sent to sign in\n   * @param options\n   */\n  const doOpenAuth = (signIn?: boolean, options?: Partial<AuthOptions>) => {\n    if (signIn) {\n      const _options: AuthOptions = {\n        ...authOptions,\n        ...options,\n        onFinish: (payload: FinishedAuthData) => {\n          authOptions.onFinish?.(payload);\n        },\n        sendToSignIn: true,\n      };\n      void authenticate(_options);\n      return;\n    } else {\n      showBlockstackConnect({\n        ...authOptions,\n        sendToSignIn: false,\n      });\n    }\n    authOptions && doUpdateAuthOptions(authOptions);\n  };\n\n  const doAuth = (options: Partial<AuthOptions> = {}) => {\n    void authenticate({\n      ...authOptions,\n      ...options,\n      onFinish: (payload: FinishedAuthData) => {\n        authOptions.onFinish?.(payload);\n      },\n    });\n  };\n\n  function doContractCall(options: ContractCallRegularOptions): Promise<void>;\n  function doContractCall(options: ContractCallSponsoredOptions): Promise<void>;\n  function doContractCall(options: ContractCallOptions): Promise<void>;\n  function doContractCall(options: ContractCallOptions) {\n    return openContractCall({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function doContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\n  function doContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\n  function doContractDeploy(options: ContractDeployOptions): Promise<void>;\n  function doContractDeploy(options: ContractDeployOptions) {\n    return openContractDeploy({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function doSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\n  function doSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\n  function doSTXTransfer(options: STXTransferOptions): Promise<void>;\n  function doSTXTransfer(options: STXTransferOptions) {\n    return openSTXTransfer({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function doProfileUpdate(options: ProfileUpdateRequestOptions) {\n    return openProfileUpdateRequestPopup({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function sign(options: SignatureRequestOptions) {\n    return openSignatureRequestPopup({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  function signStructuredData(options: StructuredDataSignatureRequestOptions) {\n    return openStructuredDataSignatureRequestPopup({\n      ...options,\n      authOrigin: authOptions.authOrigin,\n      appDetails: authOptions.appDetails,\n    });\n  }\n\n  return {\n    isOpen,\n    isAuthenticating,\n    authData,\n    authOptions,\n    userSession,\n    doOpenAuth,\n    doAuth,\n    authenticate,\n    doContractCall,\n    doContractDeploy,\n    doSTXTransfer,\n    doProfileUpdate,\n    sign,\n    signStructuredData,\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}