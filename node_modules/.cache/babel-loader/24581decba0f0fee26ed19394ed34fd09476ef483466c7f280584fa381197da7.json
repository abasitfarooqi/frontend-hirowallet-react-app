{"ast":null,"code":"import { hexToBytes } from './utils';\nexport function privateKeyToBytes(privateKey) {\n  const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n  if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n    throw new Error(`Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`);\n  }\n  if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n    throw new Error('Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01');\n  }\n  return privateKeyBuffer;\n}","map":{"version":3,"names":["hexToBytes","privateKeyToBytes","privateKey","privateKeyBuffer","length","Error"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\common\\src\\keys.ts"],"sourcesContent":["import { hexToBytes } from './utils';\n\n/**\n * @private\n * @ignore\n */\nexport function privateKeyToBytes(privateKey: string | Uint8Array): Uint8Array {\n  const privateKeyBuffer = typeof privateKey === 'string' ? hexToBytes(privateKey) : privateKey;\n\n  if (privateKeyBuffer.length != 32 && privateKeyBuffer.length != 33) {\n    throw new Error(\n      `Improperly formatted private-key. Private-key byte length should be 32 or 33. Length provided: ${privateKeyBuffer.length}`\n    );\n  }\n\n  if (privateKeyBuffer.length == 33 && privateKeyBuffer[32] !== 1) {\n    throw new Error(\n      'Improperly formatted private-key. 33 bytes indicate compressed key, but the last byte must be == 01'\n    );\n  }\n\n  return privateKeyBuffer;\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,SAAS;AAMpC,OAAM,SAAUC,iBAAiBA,CAACC,UAA+B;EAC/D,MAAMC,gBAAgB,GAAG,OAAOD,UAAU,KAAK,QAAQ,GAAGF,UAAU,CAACE,UAAU,CAAC,GAAGA,UAAU;EAE7F,IAAIC,gBAAgB,CAACC,MAAM,IAAI,EAAE,IAAID,gBAAgB,CAACC,MAAM,IAAI,EAAE,EAAE;IAClE,MAAM,IAAIC,KAAK,CACb,kGAAkGF,gBAAgB,CAACC,MAAM,EAAE,CAC5H;;EAGH,IAAID,gBAAgB,CAACC,MAAM,IAAI,EAAE,IAAID,gBAAgB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;IAC/D,MAAM,IAAIE,KAAK,CACb,qGAAqG,CACtG;;EAGH,OAAOF,gBAAgB;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}