{"ast":null,"code":"\"use strict\";\n\nfunction t(t, r) {\n  (null == r || r > t.length) && (r = t.length);\n  for (var n = 0, e = new Array(r); n < r; n++) e[n] = t[n];\n  return e;\n}\nfunction r(r, n) {\n  var e;\n  if (\"undefined\" == typeof Symbol || null == r[Symbol.iterator]) {\n    if (Array.isArray(r) || (e = function (r, n) {\n      if (r) {\n        if (\"string\" == typeof r) return t(r, void 0);\n        var e = Object.prototype.toString.call(r).slice(8, -1);\n        return \"Object\" === e && r.constructor && (e = r.constructor.name), \"Map\" === e || \"Set\" === e ? Array.from(r) : \"Arguments\" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? t(r, void 0) : void 0;\n      }\n    }(r)) || n && r && \"number\" == typeof r.length) {\n      e && (r = e);\n      var a = 0;\n      return function () {\n        return a >= r.length ? {\n          done: !0\n        } : {\n          done: !1,\n          value: r[a++]\n        };\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  return (e = r[Symbol.iterator]()).next.bind(e);\n}\nfunction n(t, n) {\n  return void 0 === n && (n = \"{$origin}\\n{$ttl}\\n\\n; SOA Record\\n{name} {ttl}    IN  SOA {mname}{rname}(\\n{serial} ;serial\\n{refresh} ;refresh\\n{retry} ;retry\\n{expire} ;expire\\n{minimum} ;minimum ttl\\n)\\n\\n; NS Records\\n{ns}\\n\\n; MX Records\\n{mx}\\n\\n; A Records\\n{a}\\n\\n; AAAA Records\\n{aaaa}\\n\\n; CNAME Records\\n{cname}\\n\\n; PTR Records\\n{ptr}\\n\\n; TXT Records\\n{txt}\\n\\n; SRV Records\\n{srv}\\n\\n; SPF Records\\n{spf}\\n\\n; URI Records\\n{uri}\\n\"), n = function (t, r) {\n    var n = \"\";\n    return void 0 !== t && (n += \"$ORIGIN \" + t), r.replace(\"{$origin}\", n);\n  }(t.$origin, n), n = function (t, r) {\n    var n = \"\";\n    return void 0 !== t && (n += \"$TTL \" + t), r.replace(\"{$ttl}\", n);\n  }(t.$ttl, n), n = function (t, r) {\n    var n = r;\n    if (void 0 !== t) for (var e in t.name = t.name || \"@\", t.ttl = t.ttl || \"\", t) n = n.replace(\"{\" + e + \"}\", t[e] + \"\\t\");\n    return n;\n  }(t.soa, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tNS\\t\" + s.host + \"\\n\";\n    }\n    return n.replace(\"{ns}\", e);\n  }(t.ns, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tA\\t\" + s.ip + \"\\n\";\n    }\n    return n.replace(\"{a}\", e);\n  }(t.a, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tAAAA\\t\" + s.ip + \"\\n\";\n    }\n    return n.replace(\"{aaaa}\", e);\n  }(t.aaaa, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tCNAME\\t\" + s.alias + \"\\n\";\n    }\n    return n.replace(\"{cname}\", e);\n  }(t.cname, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tMX\\t\" + s.preference + \"\\t\" + s.host + \"\\n\";\n    }\n    return n.replace(\"{mx}\", e);\n  }(t.mx, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tPTR\\t\" + s.host + \"\\n\";\n    }\n    return n.replace(\"{ptr}\", e);\n  }(t.ptr, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tTXT\\t\";\n      var o = s.txt;\n      \"string\" == typeof o ? e += '\"' + o + '\"' : o instanceof Array && (e += o.map(function (t) {\n        return '\"' + t + '\"';\n      }).join(\" \")), e += \"\\n\";\n    }\n    return n.replace(\"{txt}\", e);\n  }(t.txt, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tSRV\\t\" + s.priority + \"\\t\", e += s.weight + \"\\t\", e += s.port + \"\\t\", e += s.target + \"\\n\";\n    }\n    return n.replace(\"{srv}\", e);\n  }(t.srv, n), n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tSPF\\t\" + s.data + \"\\n\";\n    }\n    return n.replace(\"{spf}\", e);\n  }(t.spf, n), (n = function (t, r) {\n    r = (r = r.replace(\"{zone}\", t.$origin || !!t.soa && t.soa.name || \"\")).replace(\"{datetime}\", new Date().toISOString());\n    var n = Math.round(Date.now() / 1e3);\n    return r.replace(\"{time}\", \"\" + n);\n  }(t, n = function (t, n) {\n    var e = \"\";\n    if (t) for (var a, i = r(t); !(a = i()).done;) {\n      var s = a.value;\n      e += (s.name || \"@\") + \"\\t\", s.ttl && (e += s.ttl + \"\\t\"), e += \"IN\\tURI\\t\" + s.priority + \"\\t\", e += s.weight + \"\\t\", e += '\"' + s.target + '\"\\n';\n    }\n    return n.replace(\"{uri}\", e);\n  }(t.uri, n))).replace(/\\n{2,}/gim, \"\\n\\n\");\n}\nfunction e(t) {\n  return function (t) {\n    for (var n, e = {}, g = r(t.split(\"\\n\")); !(n = g()).done;) {\n      var h = n.value;\n      if (h && h.trim()) {\n        var d = h.toUpperCase();\n        /\\s+TXT\\s+/.test(d) ? (e.txt = e.txt || [], e.txt.push(u(h))) : 0 === d.indexOf(\"$ORIGIN\") ? e.$origin = h.split(/\\s+/g)[1] : 0 === d.indexOf(\"$TTL\") ? e.$ttl = parseInt(h.split(/\\s+/g)[1], 10) : /\\s+SOA\\s+/.test(d) ? e.soa = a(h) : /\\s+NS\\s+/.test(d) ? (e.ns = e.ns || [], e.ns.push(i(h))) : /\\s+A\\s+/.test(d) ? (e.a = e.a || [], e.a.push(s(h, e.a))) : /\\s+AAAA\\s+/.test(d) ? (e.aaaa = e.aaaa || [], e.aaaa.push(o(h))) : /\\s+CNAME\\s+/.test(d) ? (e.cname = e.cname || [], e.cname.push(l(h))) : /\\s+MX\\s+/.test(d) ? (e.mx = e.mx || [], e.mx.push(p(h))) : /\\s+PTR\\s+/.test(d) ? (e.ptr = e.ptr || [], e.ptr.push(c(h, e.ptr, e.$origin))) : /\\s+SRV\\s+/.test(d) ? (e.srv = e.srv || [], e.srv.push(f(h))) : /\\s+SPF\\s+/.test(d) ? (e.spf = e.spf || [], e.spf.push(m(h))) : /\\s+URI\\s+/.test(d) && (e.uri = e.uri || [], e.uri.push(v(h)));\n      }\n    }\n    return e;\n  }(t = function (t) {\n    for (var r = [], n = /\\([\\s\\S]*?\\)/gim, e = n.exec(t); null !== e;) {\n      var a = e[0].replace(/\\s+/gm, \" \");\n      r.push({\n        match: e,\n        replacement: a\n      }), e = n.exec(t);\n    }\n    for (var i = t.split(\"\"), s = 0, o = r; s < o.length; s++) {\n      var l = o[s],\n        p = l.match;\n      i.splice(p.index, p[0].length, l.replacement);\n    }\n    return i.join(\"\").replace(/\\(|\\)/gim, \" \");\n  }(t = function (t) {\n    return t.replace(/(^|[^\\\\]);.*/g, function (t, r) {\n      return r || \"\";\n    });\n  }(t)));\n}\nfunction a(t) {\n  var r = {},\n    n = t.trim().split(/\\s+/g),\n    e = n.length;\n  return r.name = n[0], r.minimum = parseInt(n[e - 1], 10), r.expire = parseInt(n[e - 2], 10), r.retry = parseInt(n[e - 3], 10), r.refresh = parseInt(n[e - 4], 10), r.serial = parseInt(n[e - 5], 10), r.rname = n[e - 6], r.mname = n[e - 7], isNaN(n[1]) || (r.ttl = parseInt(n[1], 10)), r;\n}\nfunction i(t) {\n  var r = t.trim().split(/\\s+/g),\n    n = {\n      name: r[0],\n      host: r[r.length - 1]\n    };\n  return isNaN(r[1]) || (n.ttl = parseInt(r[1], 10)), n;\n}\nfunction s(t, r) {\n  var n = t.trim().split(/\\s+/g),\n    e = t.trim().toUpperCase().split(/\\s+/g),\n    a = {\n      name: n[0],\n      ip: n[n.length - 1]\n    };\n  return 0 === e.lastIndexOf(\"A\") && (a.name = r.length ? r[r.length - 1].name : \"@\"), isNaN(n[1]) || (a.ttl = parseInt(n[1], 10)), a;\n}\nfunction o(t) {\n  var r = t.trim().split(/\\s+/g),\n    n = {\n      name: r[0],\n      ip: r[r.length - 1]\n    };\n  return isNaN(r[1]) || (n.ttl = parseInt(r[1], 10)), n;\n}\nfunction l(t) {\n  var r = t.trim().split(/\\s+/g),\n    n = {\n      name: r[0],\n      alias: r[r.length - 1]\n    };\n  return isNaN(r[1]) || (n.ttl = parseInt(r[1], 10)), n;\n}\nfunction p(t) {\n  var r = t.trim().split(/\\s+/g),\n    n = r.length,\n    e = {\n      name: r[0],\n      preference: parseInt(r[n - 2], 10),\n      host: r[n - 1]\n    };\n  return isNaN(r[1]) || (e.ttl = parseInt(r[1], 10)), e;\n}\nfunction u(t) {\n  var r = t.trim().match(/[^\\s\"']+|\"[^\"]*\"|'[^']*'/g);\n  if (!r) throw new Error(\"Failure to tokenize TXT record\");\n  var n,\n    e = r.length,\n    a = r.indexOf(\"TXT\");\n  function i(t) {\n    return t.indexOf('\"') > -1 && (t = t.split('\"')[1]), t;\n  }\n  n = e - a - 1 > 1 ? [].concat(r.slice(a + 1).map(i)) : i(r[e - 1]);\n  var s = {\n    name: r[0],\n    txt: n\n  };\n  return isNaN(r[1]) || (s.ttl = parseInt(r[1], 10)), s;\n}\nfunction c(t, r, n) {\n  var e = t.trim().split(/\\s+/g);\n  0 === t.trim().toUpperCase().split(/\\s+/g).lastIndexOf(\"PTR\") && r[r.length - 1] && e.unshift(r[r.length - 1].name);\n  var a = {\n    name: e[0],\n    fullname: e[0] + \".\" + n,\n    host: e[e.length - 1]\n  };\n  return isNaN(e[1]) || (a.ttl = parseInt(e[1], 10)), a;\n}\nfunction f(t) {\n  var r = t.trim().split(/\\s+/g),\n    n = r.length,\n    e = {\n      name: r[0],\n      target: r[n - 1],\n      priority: parseInt(r[n - 4], 10),\n      weight: parseInt(r[n - 3], 10),\n      port: parseInt(r[n - 2], 10)\n    };\n  return isNaN(r[1]) || (e.ttl = parseInt(r[1], 10)), e;\n}\nfunction m(t) {\n  for (var r = t.trim().split(/\\s+/g), n = {\n      name: r[0],\n      data: \"\"\n    }, e = r.length; e-- > 4;) n.data = r[e] + \" \" + n.data.trim();\n  return isNaN(r[1]) || (n.ttl = parseInt(r[1], 10)), n;\n}\nfunction v(t) {\n  var r = t.trim().split(/\\s+/g),\n    n = r.length,\n    e = {\n      name: r[0],\n      target: r[n - 1].replace(/\"/g, \"\"),\n      priority: parseInt(r[n - 3], 10),\n      weight: parseInt(r[n - 2], 10)\n    };\n  return isNaN(r[1]) || (e.ttl = parseInt(r[1], 10)), e;\n}\nexports.ZoneFile = function () {\n  function t(t) {\n    this.jsonZoneFile = \"object\" == typeof t ? JSON.parse(JSON.stringify(t)) : \"string\" == typeof t ? e(t) : void 0;\n  }\n  var r = t.prototype;\n  return r.toJSON = function () {\n    return this.jsonZoneFile;\n  }, r.toString = function () {\n    return n(this.toJSON());\n  }, t;\n}(), exports.makeZoneFile = n, exports.parseZoneFile = e;","map":{"version":3,"names":["n","t","r","replace","$origin","$ttl","e","name","ttl","soa","a","i","done","s","value","host","ns","ip","aaaa","alias","cname","preference","mx","ptr","o","txt","Array","map","join","priority","weight","port","target","srv","data","spf","Date","toISOString","Math","round","now","uri","g","split","h","trim","d","toUpperCase","test","push","u","indexOf","parseInt","l","p","c","f","m","v","exec","match","replacement","length","splice","index","minimum","expire","retry","refresh","serial","rname","mname","isNaN","lastIndexOf","Error","concat","slice","unshift","fullname","exports","ZoneFile","jsonZoneFile","JSON","parse","stringify","prototype","toJSON","toString","makeZoneFile","parseZoneFile"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\zone-file\\src\\makeZoneFile.ts","C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\zone-file\\src\\zoneFileTemplate.ts","C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\zone-file\\src\\parseZoneFile.ts","C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\zone-file\\src\\zoneFile.ts"],"sourcesContent":["import {\n  AType,\n  CNAMEType,\n  MXType,\n  NSType,\n  SoaType,\n  SPFType,\n  SRVType,\n  TXTType,\n  URIType,\n  ZoneFileObject,\n} from './zoneFile';\n\nimport { getZoneFileTemplate } from './zoneFileTemplate';\n\nexport function makeZoneFile(jsonZoneFile: ZoneFileObject, template: string = getZoneFileTemplate()) {\n  template = processOrigin(jsonZoneFile['$origin'], template);\n  template = processTTL(jsonZoneFile['$ttl'], template);\n  template = processSOA(jsonZoneFile['soa'], template);\n  template = processNS(jsonZoneFile['ns'], template);\n  template = processA(jsonZoneFile['a'], template);\n  template = processAAAA(jsonZoneFile['aaaa'], template);\n  template = processCNAME(jsonZoneFile['cname'], template);\n  template = processMX(jsonZoneFile['mx'], template);\n  template = processPTR(jsonZoneFile['ptr'], template);\n  template = processTXT(jsonZoneFile['txt'], template);\n  template = processSRV(jsonZoneFile['srv'], template);\n  template = processSPF(jsonZoneFile['spf'], template);\n  template = processURI(jsonZoneFile['uri'], template);\n  template = processValues(jsonZoneFile, template);\n  return template.replace(/\\n{2,}/gim, '\\n\\n');\n}\n\nfunction processOrigin(data: string | undefined, template: string) {\n  let ret = '';\n  if (typeof data !== 'undefined') {\n    ret += '$ORIGIN ' + data;\n  }\n  return template.replace('{$origin}', ret);\n}\n\nfunction processTTL(data: number | undefined, template: string) {\n  let ret = '';\n  if (typeof data !== 'undefined') {\n    ret += '$TTL ' + data;\n  }\n  return template.replace('{$ttl}', ret);\n}\n\nfunction processSOA(data: SoaType | undefined, template: string) {\n  let ret = template;\n  if (typeof data !== 'undefined') {\n    data.name = data.name || '@';\n    data.ttl = data.ttl || '';\n    for (const key in data) {\n      const value = (data as Record<string, string>)[key];\n      ret = ret.replace('{' + key + '}', value + '\\t');\n    }\n  }\n  return ret;\n}\n\nfunction processNS(data: NSType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tNS\\t' + record.host + '\\n';\n    }\n  }\n  return template.replace('{ns}', ret);\n}\n\nfunction processA(data: AType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tA\\t' + record.ip + '\\n';\n    }\n  }\n  return template.replace('{a}', ret);\n}\n\nfunction processAAAA(data: AType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tAAAA\\t' + record.ip + '\\n';\n    }\n  }\n  return template.replace('{aaaa}', ret);\n}\n\nfunction processCNAME(data: CNAMEType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tCNAME\\t' + record.alias + '\\n';\n    }\n  }\n  return template.replace('{cname}', ret);\n}\n\nfunction processMX(data: MXType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tMX\\t' + record.preference + '\\t' + record.host + '\\n';\n    }\n  }\n  return template.replace('{mx}', ret);\n}\n\nfunction processPTR(data: NSType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tPTR\\t' + record.host + '\\n';\n    }\n  }\n  return template.replace('{ptr}', ret);\n}\n\nfunction processTXT(data: TXTType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tTXT\\t';\n      const txtData = record.txt;\n      if (typeof txtData === 'string') {\n        ret += '\"' + txtData + '\"';\n      } else if (txtData instanceof Array) {\n        ret += txtData\n          .map(function(datum) {\n            return '\"' + datum + '\"';\n          })\n          .join(' ');\n      }\n      ret += '\\n';\n    }\n  }\n  return template.replace('{txt}', ret);\n}\n\nfunction processSRV(data: SRVType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tSRV\\t' + record.priority + '\\t';\n      ret += record.weight + '\\t';\n      ret += record.port + '\\t';\n      ret += record.target + '\\n';\n    }\n  }\n  return template.replace('{srv}', ret);\n}\n\nfunction processSPF(data: SPFType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tSPF\\t' + record.data + '\\n';\n    }\n  }\n  return template.replace('{spf}', ret);\n}\n\nfunction processURI(data: URIType[] | undefined, template: string) {\n  let ret = '';\n  if (data) {\n    for (const record of data) {\n      ret += (record.name || '@') + '\\t';\n      if (record.ttl) ret += record.ttl + '\\t';\n      ret += 'IN\\tURI\\t' + record.priority + '\\t';\n      ret += record.weight + '\\t';\n      ret += '\"' + record.target + '\"\\n';\n    }\n  }\n  return template.replace('{uri}', ret);\n}\n\nfunction processValues(jsonZoneFile: ZoneFileObject, template: string) {\n  template = template.replace(\n    '{zone}',\n    jsonZoneFile['$origin'] || (jsonZoneFile['soa'] ? jsonZoneFile['soa']['name'] : false) || ''\n  );\n  template = template.replace('{datetime}', new Date().toISOString());\n  const time = Math.round(Date.now() / 1000);\n  return template.replace('{time}', `${time}`);\n}\n","export function getZoneFileTemplate() {\n  return '{$origin}\\n\\\n{$ttl}\\n\\\n\\n\\\n; SOA Record\\n\\\n{name} {ttl}    IN  SOA {mname}{rname}(\\n\\\n{serial} ;serial\\n\\\n{refresh} ;refresh\\n\\\n{retry} ;retry\\n\\\n{expire} ;expire\\n\\\n{minimum} ;minimum ttl\\n\\\n)\\n\\\n\\n\\\n; NS Records\\n\\\n{ns}\\n\\\n\\n\\\n; MX Records\\n\\\n{mx}\\n\\\n\\n\\\n; A Records\\n\\\n{a}\\n\\\n\\n\\\n; AAAA Records\\n\\\n{aaaa}\\n\\\n\\n\\\n; CNAME Records\\n\\\n{cname}\\n\\\n\\n\\\n; PTR Records\\n\\\n{ptr}\\n\\\n\\n\\\n; TXT Records\\n\\\n{txt}\\n\\\n\\n\\\n; SRV Records\\n\\\n{srv}\\n\\\n\\n\\\n; SPF Records\\n\\\n{spf}\\n\\\n\\n\\\n; URI Records\\n\\\n{uri}\\n\\\n';\n}\n","import {\n  NSType,\n  AType,\n  CNAMEType,\n  MXType,\n  TXTType,\n  SRVType,\n  SPFType,\n  URIType,\n  ZoneFileObject,\n  SoaType,\n} from './zoneFile';\n\nexport function parseZoneFile(text: string) {\n  text = removeComments(text);\n  text = flatten(text);\n  return parseRRs(text);\n}\n\nfunction removeComments(text: string) {\n  const re = /(^|[^\\\\]);.*/g;\n  return text.replace(re, function(_m, g1) {\n    return g1 ? g1 : ''; // if g1 is set/matched, re-insert it, else remove\n  });\n}\n\nfunction flatten(text: string) {\n  const captured = [];\n  const re = /\\([\\s\\S]*?\\)/gim;\n  let match = re.exec(text);\n  while (match !== null) {\n    const replacement = match[0].replace(/\\s+/gm, ' ');\n    captured.push({ match, replacement });\n    // captured Text, index, input\n    match = re.exec(text);\n  }\n  const arrText = text.split('');\n  for (const cur of captured) {\n    const { match, replacement } = cur;\n    arrText.splice(match.index, match[0].length, replacement);\n  }\n  return arrText.join('').replace(/\\(|\\)/gim, ' ');\n}\n\nfunction parseRRs(text: string) {\n  const ret: ZoneFileObject = {};\n  const rrs = text.split('\\n');\n  for (const rr of rrs) {\n    if (!rr || !rr.trim()) {\n      continue;\n    }\n    const uRR = rr.toUpperCase();\n    if (/\\s+TXT\\s+/.test(uRR)) {\n      ret.txt = ret.txt || [];\n      ret.txt.push(parseTXT(rr));\n    } else if (uRR.indexOf('$ORIGIN') === 0) {\n      ret.$origin = rr.split(/\\s+/g)[1];\n    } else if (uRR.indexOf('$TTL') === 0) {\n      ret.$ttl = parseInt(rr.split(/\\s+/g)[1], 10);\n    } else if (/\\s+SOA\\s+/.test(uRR)) {\n      ret.soa = parseSOA(rr);\n    } else if (/\\s+NS\\s+/.test(uRR)) {\n      ret.ns = ret.ns || [];\n      ret.ns.push(parseNS(rr));\n    } else if (/\\s+A\\s+/.test(uRR)) {\n      ret.a = ret.a || [];\n      ret.a.push(parseA(rr, ret.a));\n    } else if (/\\s+AAAA\\s+/.test(uRR)) {\n      ret.aaaa = ret.aaaa || [];\n      ret.aaaa.push(parseAAAA(rr));\n    } else if (/\\s+CNAME\\s+/.test(uRR)) {\n      ret.cname = ret.cname || [];\n      ret.cname.push(parseCNAME(rr));\n    } else if (/\\s+MX\\s+/.test(uRR)) {\n      ret.mx = ret.mx || [];\n      ret.mx.push(parseMX(rr));\n    } else if (/\\s+PTR\\s+/.test(uRR)) {\n      ret.ptr = ret.ptr || [];\n      ret.ptr.push(parsePTR(rr, ret.ptr, ret.$origin));\n    } else if (/\\s+SRV\\s+/.test(uRR)) {\n      ret.srv = ret.srv || [];\n      ret.srv.push(parseSRV(rr));\n    } else if (/\\s+SPF\\s+/.test(uRR)) {\n      ret.spf = ret.spf || [];\n      ret.spf.push(parseSPF(rr));\n    } else if (/\\s+URI\\s+/.test(uRR)) {\n      ret.uri = ret.uri || [];\n      ret.uri.push(parseURI(rr));\n    }\n  }\n  return ret;\n}\n\nfunction parseSOA(rr: string) {\n  const soa: SoaType = {};\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  soa.name = rrTokens[0];\n  soa.minimum = parseInt(rrTokens[l - 1], 10);\n  soa.expire = parseInt(rrTokens[l - 2], 10);\n  soa.retry = parseInt(rrTokens[l - 3], 10);\n  soa.refresh = parseInt(rrTokens[l - 4], 10);\n  soa.serial = parseInt(rrTokens[l - 5], 10);\n  soa.rname = rrTokens[l - 6];\n  soa.mname = rrTokens[l - 7];\n  if (!isNaN((rrTokens[1] as unknown) as number)) soa.ttl = parseInt(rrTokens[1], 10);\n  return soa;\n}\n\nfunction parseNS(rr: string) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result: NSType = {\n    name: rrTokens[0],\n    host: rrTokens[l - 1],\n  };\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseA(rr: string, recordsSoFar: AType[]) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const urrTokens = rr\n    .trim()\n    .toUpperCase()\n    .split(/\\s+/g);\n  const l = rrTokens.length;\n  const result: AType = {\n    name: rrTokens[0],\n    ip: rrTokens[l - 1],\n  };\n\n  if (urrTokens.lastIndexOf('A') === 0) {\n    if (recordsSoFar.length) {\n      result.name = recordsSoFar[recordsSoFar.length - 1].name;\n    } else {\n      result.name = '@';\n    }\n  }\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseAAAA(rr: string) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result: AType = {\n    name: rrTokens[0],\n    ip: rrTokens[l - 1],\n  };\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseCNAME(rr: string) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result: CNAMEType = {\n    name: rrTokens[0],\n    alias: rrTokens[l - 1],\n  };\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseMX(rr: string) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result: MXType = {\n    name: rrTokens[0],\n    preference: parseInt(rrTokens[l - 2], 10),\n    host: rrTokens[l - 1],\n  };\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseTXT(rr: string) {\n  const rrTokens = rr.trim().match(/[^\\s\"']+|\"[^\"]*\"|'[^']*'/g);\n  if (!rrTokens) throw new Error('Failure to tokenize TXT record');\n  const l = rrTokens.length;\n  const indexTXT = rrTokens.indexOf('TXT');\n\n  function stripText(txt: string) {\n    if (txt.indexOf('\"') > -1) {\n      txt = txt.split('\"')[1];\n    }\n    return txt;\n  }\n\n  let tokenTxt: string | string[];\n  if (l - indexTXT - 1 > 1) {\n    tokenTxt = [...rrTokens.slice(indexTXT + 1).map(stripText)];\n  } else {\n    tokenTxt = stripText(rrTokens[l - 1]);\n  }\n\n  const result: TXTType = {\n    name: rrTokens[0],\n    txt: tokenTxt,\n  };\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parsePTR(rr: string, recordsSoFar: NSType[], currentOrigin: string | undefined) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const urrTokens = rr\n    .trim()\n    .toUpperCase()\n    .split(/\\s+/g);\n\n  if (urrTokens.lastIndexOf('PTR') === 0 && recordsSoFar[recordsSoFar.length - 1]) {\n    rrTokens.unshift(recordsSoFar[recordsSoFar.length - 1].name as string);\n  }\n\n  const l = rrTokens.length;\n  const result: NSType = {\n    name: rrTokens[0],\n    fullname: rrTokens[0] + '.' + currentOrigin,\n    host: rrTokens[l - 1],\n  };\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseSRV(rr: string) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result: SRVType = {\n    name: rrTokens[0],\n    target: rrTokens[l - 1],\n    priority: parseInt(rrTokens[l - 4], 10),\n    weight: parseInt(rrTokens[l - 3], 10),\n    port: parseInt(rrTokens[l - 2], 10),\n  };\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseSPF(rr: string) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const result: SPFType = {\n    name: rrTokens[0],\n    data: '',\n  };\n\n  let l = rrTokens.length;\n  while (l-- > 4) {\n    result.data = rrTokens[l] + ' ' + result.data.trim();\n  }\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n\nfunction parseURI(rr: string) {\n  const rrTokens = rr.trim().split(/\\s+/g);\n  const l = rrTokens.length;\n  const result: URIType = {\n    name: rrTokens[0],\n    target: rrTokens[l - 1].replace(/\"/g, ''),\n    priority: parseInt(rrTokens[l - 3], 10),\n    weight: parseInt(rrTokens[l - 2], 10),\n  };\n\n  if (!isNaN((rrTokens[1] as unknown) as number)) result.ttl = parseInt(rrTokens[1], 10);\n  return result;\n}\n","import { makeZoneFile } from './makeZoneFile';\nimport { parseZoneFile } from './parseZoneFile';\n\nexport type SoaType = {\n  name?: string;\n  ttl?: number | string;\n  minimum?: number;\n  expire?: number;\n  retry?: number;\n  refresh?: number;\n  serial?: number;\n  rname?: string;\n  mname?: string;\n};\nexport type NSType = { name: string; ttl?: number; host: string; fullname?: string };\nexport type AType = { name: string; ttl?: number; ip: string };\nexport type CNAMEType = { name: string; ttl?: number; alias: string };\nexport type MXType = { name: string; ttl?: number; host: string; preference: number };\nexport type TXTType = { name: string; ttl?: number; txt: string | string[] };\nexport type SRVType = { name: string; ttl?: number; priority: number; weight: number; port: number; target: string };\nexport type SPFType = { name: string; ttl?: number; data: string };\nexport type URIType = { name: string; ttl?: number; priority: number; weight: number; target: string };\n\nexport type ZoneFileObject = {\n  $origin?: string;\n  $ttl?: number;\n  soa?: SoaType;\n  ns?: NSType[];\n  a?: AType[];\n  aaaa?: AType[];\n  cname?: CNAMEType[];\n  mx?: MXType[];\n  ptr?: NSType[];\n  txt?: TXTType[];\n  srv?: SRVType[];\n  spf?: SPFType[];\n  uri?: URIType[];\n  $domain?: string;\n};\n\nexport class ZoneFile {\n  jsonZoneFile: ZoneFileObject;\n\n  constructor(zoneFile: ZoneFileObject | string) {\n    if (typeof zoneFile === 'object') {\n      this.jsonZoneFile = JSON.parse(JSON.stringify(zoneFile));\n    } else if (typeof zoneFile === 'string') {\n      this.jsonZoneFile = parseZoneFile(zoneFile);\n    } else {\n      this.jsonZoneFile = (undefined as unknown) as ZoneFileObject;\n    }\n  }\n\n  toJSON() {\n    return this.jsonZoneFile;\n  }\n\n  toString() {\n    return makeZoneFile(this.toJSON());\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAegBA,EAAaC,CAAA,EAA8BD,CAAA;EAAA,kBAAAA,CAAA,KAAAA,CAAA,GCdlD,kaDePA,CAAA,GAiBF,UAAuBC,CAAA,EAA0BC,CAAA;IAAA,IAC3CF,CAAA,GAAM;IAAA,YACU,MAATC,CAAA,KACTD,CAAA,IAAO,aAAaC,CAAA,GAEfC,CAAA,CAASC,OAAA,CAAQ,aAAaH,CAAA;EAAA,CAtB1B,CAAcC,CAAA,CAAYG,OAAA,EAAaJ,CAAA,GAClDA,CAAA,GAwBF,UAAoBC,CAAA,EAA0BC,CAAA;IAAA,IACxCF,CAAA,GAAM;IAAA,YACU,MAATC,CAAA,KACTD,CAAA,IAAO,UAAUC,CAAA,GAEZC,CAAA,CAASC,OAAA,CAAQ,UAAUH,CAAA;EAAA,CA7BvB,CAAWC,CAAA,CAAYI,IAAA,EAAUL,CAAA,GAC5CA,CAAA,GA+BF,UAAoBC,CAAA,EAA2BC,CAAA;IAAA,IACzCF,CAAA,GAAME,CAAA;IAAA,SACU,MAATD,CAAA,OAGJ,IAAMK,CAAA,IAFXL,CAAA,CAAKM,IAAA,GAAON,CAAA,CAAKM,IAAA,IAAQ,KACzBN,CAAA,CAAKO,GAAA,GAAMP,CAAA,CAAKO,GAAA,IAAO,IACLP,CAAA,EAEhBD,CAAA,GAAMA,CAAA,CAAIG,OAAA,CAAQ,MAAMG,CAAA,GAAM,KADfL,CAAA,CAAgCK,CAAA,IACJ;IAAA,OAGxCN,CAAA;EAAA,CAzCI,CAAWC,CAAA,CAAYQ,GAAA,EAAST,CAAA,GAC3CA,CAAA,GA2CF,UAAmBC,CAAA,EAA4BD,CAAA;IAAA,IACzCM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,aAAaO,CAAA,CAAOE,IAAA,GAAO;IAAA;IAAA,OAG/Bf,CAAA,CAASG,OAAA,CAAQ,QAAQG,CAAA;EAAA,CApDrB,CAAUL,CAAA,CAAYe,EAAA,EAAQhB,CAAA,GACzCA,CAAA,GAsDF,UAAkBC,CAAA,EAA2BD,CAAA;IAAA,IACvCM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,YAAYO,CAAA,CAAOI,EAAA,GAAK;IAAA;IAAA,OAG5BjB,CAAA,CAASG,OAAA,CAAQ,OAAOG,CAAA;EAAA,CA/DpB,CAASL,CAAA,CAAYS,CAAA,EAAOV,CAAA,GACvCA,CAAA,GAiEF,UAAqBC,CAAA,EAA2BD,CAAA;IAAA,IAC1CM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,eAAeO,CAAA,CAAOI,EAAA,GAAK;IAAA;IAAA,OAG/BjB,CAAA,CAASG,OAAA,CAAQ,UAAUG,CAAA;EAAA,CA1EvB,CAAYL,CAAA,CAAYiB,IAAA,EAAUlB,CAAA,GAC7CA,CAAA,GA4EF,UAAsBC,CAAA,EAA+BD,CAAA;IAAA,IAC/CM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,gBAAgBO,CAAA,CAAOM,KAAA,GAAQ;IAAA;IAAA,OAGnCnB,CAAA,CAASG,OAAA,CAAQ,WAAWG,CAAA;EAAA,CArFxB,CAAaL,CAAA,CAAYmB,KAAA,EAAWpB,CAAA,GAC/CA,CAAA,GAuFF,UAAmBC,CAAA,EAA4BD,CAAA;IAAA,IACzCM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,aAAaO,CAAA,CAAOQ,UAAA,GAAa,OAAOR,CAAA,CAAOE,IAAA,GAAO;IAAA;IAAA,OAG1Df,CAAA,CAASG,OAAA,CAAQ,QAAQG,CAAA;EAAA,CAhGrB,CAAUL,CAAA,CAAYqB,EAAA,EAAQtB,CAAA,GACzCA,CAAA,GAkGF,UAAoBC,CAAA,EAA4BD,CAAA;IAAA,IAC1CM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,cAAcO,CAAA,CAAOE,IAAA,GAAO;IAAA;IAAA,OAGhCf,CAAA,CAASG,OAAA,CAAQ,SAASG,CAAA;EAAA,CA3GtB,CAAWL,CAAA,CAAYsB,GAAA,EAASvB,CAAA,GAC3CA,CAAA,GA6GF,UAAoBC,CAAA,EAA6BD,CAAA;IAAA,IAC3CM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO;MAAA,IACDkB,CAAA,GAAUX,CAAA,CAAOY,GAAA;MACA,mBAAZD,CAAA,GACTlB,CAAA,IAAO,MAAMkB,CAAA,GAAU,MACdA,CAAA,YAAmBE,KAAA,KAC5BpB,CAAA,IAAOkB,CAAA,CACJG,GAAA,CAAI,UAAS1B,CAAA;QAAA,OACL,MAAMA,CAAA,GAAQ;MAAA,GAEtB2B,IAAA,CAAK,OAEVtB,CAAA,IAAO;IAAA;IAAA,OAGJN,CAAA,CAASG,OAAA,CAAQ,SAASG,CAAA;EAAA,CAjItB,CAAWL,CAAA,CAAYwB,GAAA,EAASzB,CAAA,GAC3CA,CAAA,GAmIF,UAAoBC,CAAA,EAA6BD,CAAA;IAAA,IAC3CM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,cAAcO,CAAA,CAAOgB,QAAA,GAAW,MACvCvB,CAAA,IAAOO,CAAA,CAAOiB,MAAA,GAAS,MACvBxB,CAAA,IAAOO,CAAA,CAAOkB,IAAA,GAAO,MACrBzB,CAAA,IAAOO,CAAA,CAAOmB,MAAA,GAAS;IAAA;IAAA,OAGpBhC,CAAA,CAASG,OAAA,CAAQ,SAASG,CAAA;EAAA,CA/ItB,CAAWL,CAAA,CAAYgC,GAAA,EAASjC,CAAA,GAC3CA,CAAA,GAiJF,UAAoBC,CAAA,EAA6BD,CAAA;IAAA,IAC3CM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,cAAcO,CAAA,CAAOqB,IAAA,GAAO;IAAA;IAAA,OAGhClC,CAAA,CAASG,OAAA,CAAQ,SAASG,CAAA;EAAA,CA1JtB,CAAWL,CAAA,CAAYkC,GAAA,EAASnC,CAAA,IAE3CA,CAAA,GAyKF,UAAuBC,CAAA,EAA8BC,CAAA;IAKnDA,CAAA,IAJAA,CAAA,GAAWA,CAAA,CAASC,OAAA,CAClB,UACAF,CAAA,CAAYG,OAAA,MAAgBH,CAAA,CAAYQ,GAAA,IAAUR,CAAA,CAAYQ,GAAA,CAAZF,IAAA,IAAwC,KAExEJ,OAAA,CAAQ,cAAc,IAAIiC,IAAA,GAAOC,WAAA;IAAA,IAC/CrC,CAAA,GAAOsC,IAAA,CAAKC,KAAA,CAAMH,IAAA,CAAKI,GAAA,KAAQ;IAAA,OAC9BtC,CAAA,CAASC,OAAA,CAAQ,eAAaH,CAAA;EAAA,CAhL1B,CAAcC,CAAA,EADzBD,CAAA,GA4JF,UAAoBC,CAAA,EAA6BD,CAAA;IAAA,IAC3CM,CAAA,GAAM;IAAA,IACNL,CAAA,WAAAS,CAAA,EAAAC,CAAA,GAAAT,CAAA,CACmBD,CAAA,KAAAS,CAAA,GAAAC,CAAA,IAAAC,IAAA,GAAM;MAAA,IAAhBC,CAAA,GAAAH,CAAA,CAAAI,KAAA;MACTR,CAAA,KAAQO,CAAA,CAAON,IAAA,IAAQ,OAAO,MAC1BM,CAAA,CAAOL,GAAA,KAAKF,CAAA,IAAOO,CAAA,CAAOL,GAAA,GAAM,OACpCF,CAAA,IAAO,cAAcO,CAAA,CAAOgB,QAAA,GAAW,MACvCvB,CAAA,IAAOO,CAAA,CAAOiB,MAAA,GAAS,MACvBxB,CAAA,IAAO,MAAMO,CAAA,CAAOmB,MAAA,GAAS;IAAA;IAAA,OAG1BhC,CAAA,CAASG,OAAA,CAAQ,SAASG,CAAA;EAAA,CAvKtB,CAAWL,CAAA,CAAYwC,GAAA,EAASzC,CAAA,IAE3BG,OAAA,CAAQ,aAAa;AAAA;AAAA,SEjBvBG,EAAcL,CAAA;EAAA,OA+B9B,UAAkBA,CAAA;IAAA,SAAAD,CAAA,EACVM,CAAA,GAAsB,IAAAoC,CAAA,GAAAxC,CAAA,CAChBD,CAAA,CAAK0C,KAAA,CAAM,UAAA3C,CAAA,GAAA0C,CAAA,IAAA9B,IAAA,GACD;MAAA,IAAXgC,CAAA,GAAA5C,CAAA,CAAAc,KAAA;MAAA,IACJ8B,CAAA,IAAOA,CAAA,CAAGC,IAAA;QAAA,IAGTC,CAAA,GAAMF,CAAA,CAAGG,WAAA;QACX,YAAYC,IAAA,CAAKF,CAAA,KACnBxC,CAAA,CAAImB,GAAA,GAAMnB,CAAA,CAAImB,GAAA,IAAO,IACrBnB,CAAA,CAAImB,GAAA,CAAIwB,IAAA,CAAKC,CAAA,CAASN,CAAA,MACc,MAA3BE,CAAA,CAAIK,OAAA,CAAQ,aACrB7C,CAAA,CAAIF,OAAA,GAAUwC,CAAA,CAAGD,KAAA,CAAM,QAAQ,KACE,MAAxBG,CAAA,CAAIK,OAAA,CAAQ,UACrB7C,CAAA,CAAID,IAAA,GAAO+C,QAAA,CAASR,CAAA,CAAGD,KAAA,CAAM,QAAQ,IAAI,MAChC,YAAYK,IAAA,CAAKF,CAAA,IAC1BxC,CAAA,CAAIG,GAAA,GAAMC,CAAA,CAASkC,CAAA,IACV,WAAWI,IAAA,CAAKF,CAAA,KACzBxC,CAAA,CAAIU,EAAA,GAAKV,CAAA,CAAIU,EAAA,IAAM,IACnBV,CAAA,CAAIU,EAAA,CAAGiC,IAAA,CAAKtC,CAAA,CAAQiC,CAAA,MACX,UAAUI,IAAA,CAAKF,CAAA,KACxBxC,CAAA,CAAII,CAAA,GAAIJ,CAAA,CAAII,CAAA,IAAK,IACjBJ,CAAA,CAAII,CAAA,CAAEuC,IAAA,CAAKpC,CAAA,CAAO+B,CAAA,EAAItC,CAAA,CAAII,CAAA,MACjB,aAAasC,IAAA,CAAKF,CAAA,KAC3BxC,CAAA,CAAIY,IAAA,GAAOZ,CAAA,CAAIY,IAAA,IAAQ,IACvBZ,CAAA,CAAIY,IAAA,CAAK+B,IAAA,CAAKzB,CAAA,CAAUoB,CAAA,MACf,cAAcI,IAAA,CAAKF,CAAA,KAC5BxC,CAAA,CAAIc,KAAA,GAAQd,CAAA,CAAIc,KAAA,IAAS,IACzBd,CAAA,CAAIc,KAAA,CAAM6B,IAAA,CAAKI,CAAA,CAAWT,CAAA,MACjB,WAAWI,IAAA,CAAKF,CAAA,KACzBxC,CAAA,CAAIgB,EAAA,GAAKhB,CAAA,CAAIgB,EAAA,IAAM,IACnBhB,CAAA,CAAIgB,EAAA,CAAG2B,IAAA,CAAKK,CAAA,CAAQV,CAAA,MACX,YAAYI,IAAA,CAAKF,CAAA,KAC1BxC,CAAA,CAAIiB,GAAA,GAAMjB,CAAA,CAAIiB,GAAA,IAAO,IACrBjB,CAAA,CAAIiB,GAAA,CAAI0B,IAAA,CAAKM,CAAA,CAASX,CAAA,EAAItC,CAAA,CAAIiB,GAAA,EAAKjB,CAAA,CAAIF,OAAA,MAC9B,YAAY4C,IAAA,CAAKF,CAAA,KAC1BxC,CAAA,CAAI2B,GAAA,GAAM3B,CAAA,CAAI2B,GAAA,IAAO,IACrB3B,CAAA,CAAI2B,GAAA,CAAIgB,IAAA,CAAKO,CAAA,CAASZ,CAAA,MACb,YAAYI,IAAA,CAAKF,CAAA,KAC1BxC,CAAA,CAAI6B,GAAA,GAAM7B,CAAA,CAAI6B,GAAA,IAAO,IACrB7B,CAAA,CAAI6B,GAAA,CAAIc,IAAA,CAAKQ,CAAA,CAASb,CAAA,MACb,YAAYI,IAAA,CAAKF,CAAA,MAC1BxC,CAAA,CAAImC,GAAA,GAAMnC,CAAA,CAAImC,GAAA,IAAO,IACrBnC,CAAA,CAAImC,GAAA,CAAIQ,IAAA,CAAKS,CAAA,CAASd,CAAA;MAAA;IAAA;IAAA,OAGnBtC,CAAA;EAAA,CA1EA,CADPL,CAAA,GAWF,UAAiBA,CAAA;IAAA,SACTC,CAAA,GAAW,IACXF,CAAA,GAAK,mBACPM,CAAA,GAAQN,CAAA,CAAG2D,IAAA,CAAK1D,CAAA,GACH,SAAVK,CAAA,GAAgB;MAAA,IACfI,CAAA,GAAcJ,CAAA,CAAM,GAAGH,OAAA,CAAQ,SAAS;MAC9CD,CAAA,CAAS+C,IAAA,CAAK;QAAEW,KAAA,EAAAtD,CAAA;QAAOuD,WAAA,EAAAnD;MAAA,IAEvBJ,CAAA,GAAQN,CAAA,CAAG2D,IAAA,CAAK1D,CAAA;IAAA;IAAA,SAEZU,CAAA,GAAUV,CAAA,CAAK0C,KAAA,CAAM,KAAA9B,CAAA,MAAAW,CAAA,GACTtB,CAAA,EAAAW,CAAA,GAAAW,CAAA,CAAAsC,MAAA,EAAAjD,CAAA,IAAU;MAAA,IAAjBwC,CAAA,GAAA7B,CAAA,CAAAX,CAAA;QACDyC,CAAA,GAAuBD,CAAA,CAAvBO,KAAA;MACRjD,CAAA,CAAQoD,MAAA,CAAOT,CAAA,CAAMU,KAAA,EAAOV,CAAA,CAAM,GAAGQ,MAAA,EADNT,CAAA,CAAhBQ,WAAA;IAAA;IAAA,OAGVlD,CAAA,CAAQiB,IAAA,CAAK,IAAIzB,OAAA,CAAQ,YAAY;EAAA,CA1BrC,CADPF,CAAA,GAKF,UAAwBA,CAAA;IAAA,OAEfA,CAAA,CAAKE,OAAA,CADD,iBACa,UAASF,CAAA,EAAIC,CAAA;MAAA,OAC5BA,CAAA,IAAU;IAAA;EAAA,CARZ,CAAeD,CAAA;AAAA;AA+ExB,SAASS,EAAST,CAAA;EAAA,IACVC,CAAA,GAAe;IACfF,CAAA,GAAWC,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;IAC3BrC,CAAA,GAAIN,CAAA,CAAS8D,MAAA;EAAA,OACnB5D,CAAA,CAAIK,IAAA,GAAOP,CAAA,CAAS,IACpBE,CAAA,CAAI+D,OAAA,GAAUb,QAAA,CAASpD,CAAA,CAASM,CAAA,GAAI,IAAI,KACxCJ,CAAA,CAAIgE,MAAA,GAASd,QAAA,CAASpD,CAAA,CAASM,CAAA,GAAI,IAAI,KACvCJ,CAAA,CAAIiE,KAAA,GAAQf,QAAA,CAASpD,CAAA,CAASM,CAAA,GAAI,IAAI,KACtCJ,CAAA,CAAIkE,OAAA,GAAUhB,QAAA,CAASpD,CAAA,CAASM,CAAA,GAAI,IAAI,KACxCJ,CAAA,CAAImE,MAAA,GAASjB,QAAA,CAASpD,CAAA,CAASM,CAAA,GAAI,IAAI,KACvCJ,CAAA,CAAIoE,KAAA,GAAQtE,CAAA,CAASM,CAAA,GAAI,IACzBJ,CAAA,CAAIqE,KAAA,GAAQvE,CAAA,CAASM,CAAA,GAAI,IACpBkE,KAAA,CAAOxE,CAAA,CAAS,QAA2BE,CAAA,CAAIM,GAAA,GAAM4C,QAAA,CAASpD,CAAA,CAAS,IAAI,MACzEE,CAAA;AAAA;AAGT,SAASS,EAAQV,CAAA;EAAA,IACTC,CAAA,GAAWD,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;IAE3B3C,CAAA,GAAiB;MACrBO,IAAA,EAAML,CAAA,CAAS;MACfa,IAAA,EAAMb,CAAA,CAHEA,CAAA,CAAS4D,MAAA,GAGE;IAAA;EAAA,OAGhBU,KAAA,CAAOtE,CAAA,CAAS,QAA2BF,CAAA,CAAOQ,GAAA,GAAM4C,QAAA,CAASlD,CAAA,CAAS,IAAI,MAC5EF,CAAA;AAAA;AAGT,SAASa,EAAOZ,CAAA,EAAYC,CAAA;EAAA,IACpBF,CAAA,GAAWC,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;IAC3BrC,CAAA,GAAYL,CAAA,CACf4C,IAAA,GACAE,WAAA,GACAJ,KAAA,CAAM;IAEHjC,CAAA,GAAgB;MACpBH,IAAA,EAAMP,CAAA,CAAS;MACfiB,EAAA,EAAIjB,CAAA,CAHIA,CAAA,CAAS8D,MAAA,GAGA;IAAA;EAAA,OAGgB,MAA/BxD,CAAA,CAAUmE,WAAA,CAAY,SAEtB/D,CAAA,CAAOH,IAAA,GADLL,CAAA,CAAa4D,MAAA,GACD5D,CAAA,CAAaA,CAAA,CAAa4D,MAAA,GAAS,GAAGvD,IAAA,GAEtC,MAIbiE,KAAA,CAAOxE,CAAA,CAAS,QAA2BU,CAAA,CAAOF,GAAA,GAAM4C,QAAA,CAASpD,CAAA,CAAS,IAAI,MAC5EU,CAAA;AAAA;AAGT,SAASc,EAAUvB,CAAA;EAAA,IACXC,CAAA,GAAWD,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;IAE3B3C,CAAA,GAAgB;MACpBO,IAAA,EAAML,CAAA,CAAS;MACfe,EAAA,EAAIf,CAAA,CAHIA,CAAA,CAAS4D,MAAA,GAGA;IAAA;EAAA,OAGdU,KAAA,CAAOtE,CAAA,CAAS,QAA2BF,CAAA,CAAOQ,GAAA,GAAM4C,QAAA,CAASlD,CAAA,CAAS,IAAI,MAC5EF,CAAA;AAAA;AAGT,SAASqD,EAAWpD,CAAA;EAAA,IACZC,CAAA,GAAWD,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;IAE3B3C,CAAA,GAAoB;MACxBO,IAAA,EAAML,CAAA,CAAS;MACfiB,KAAA,EAAOjB,CAAA,CAHCA,CAAA,CAAS4D,MAAA,GAGG;IAAA;EAAA,OAGjBU,KAAA,CAAOtE,CAAA,CAAS,QAA2BF,CAAA,CAAOQ,GAAA,GAAM4C,QAAA,CAASlD,CAAA,CAAS,IAAI,MAC5EF,CAAA;AAAA;AAGT,SAASsD,EAAQrD,CAAA;EAAA,IACTC,CAAA,GAAWD,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;IAC3B3C,CAAA,GAAIE,CAAA,CAAS4D,MAAA;IACbxD,CAAA,GAAiB;MACrBC,IAAA,EAAML,CAAA,CAAS;MACfmB,UAAA,EAAY+B,QAAA,CAASlD,CAAA,CAASF,CAAA,GAAI,IAAI;MACtCe,IAAA,EAAMb,CAAA,CAASF,CAAA,GAAI;IAAA;EAAA,OAGhBwE,KAAA,CAAOtE,CAAA,CAAS,QAA2BI,CAAA,CAAOE,GAAA,GAAM4C,QAAA,CAASlD,CAAA,CAAS,IAAI,MAC5EI,CAAA;AAAA;AAGT,SAAS4C,EAASjD,CAAA;EAAA,IACVC,CAAA,GAAWD,CAAA,CAAG4C,IAAA,GAAOe,KAAA,CAAM;EAAA,KAC5B1D,CAAA,EAAU,MAAM,IAAIwE,KAAA,CAAM;EAAA,IAW3B1E,CAAA;IAVEM,CAAA,GAAIJ,CAAA,CAAS4D,MAAA;IACbpD,CAAA,GAAWR,CAAA,CAASiD,OAAA,CAAQ;EAAA,SAEzBxC,EAAUV,CAAA;IAAA,OACbA,CAAA,CAAIkD,OAAA,CAAQ,QAAQ,MACtBlD,CAAA,GAAMA,CAAA,CAAI0C,KAAA,CAAM,KAAK,KAEhB1C,CAAA;EAAA;EAKPD,CAAA,GADEM,CAAA,GAAII,CAAA,GAAW,IAAI,OAAAiE,MAAA,CACNzE,CAAA,CAAS0E,KAAA,CAAMlE,CAAA,GAAW,GAAGiB,GAAA,CAAIhB,CAAA,KAErCA,CAAA,CAAUT,CAAA,CAASI,CAAA,GAAI;EAAA,IAG9BO,CAAA,GAAkB;IACtBN,IAAA,EAAML,CAAA,CAAS;IACfuB,GAAA,EAAKzB;EAAA;EAAA,OAGFwE,KAAA,CAAOtE,CAAA,CAAS,QAA2BW,CAAA,CAAOL,GAAA,GAAM4C,QAAA,CAASlD,CAAA,CAAS,IAAI,MAC5EW,CAAA;AAAA;AAGT,SAAS0C,EAAStD,CAAA,EAAYC,CAAA,EAAwBF,CAAA;EAAA,IAC9CM,CAAA,GAAWL,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;EAMI,MALnB1C,CAAA,CACf4C,IAAA,GACAE,WAAA,GACAJ,KAAA,CAAM,QAEK8B,WAAA,CAAY,UAAgBvE,CAAA,CAAaA,CAAA,CAAa4D,MAAA,GAAS,MAC3ExD,CAAA,CAASuE,OAAA,CAAQ3E,CAAA,CAAaA,CAAA,CAAa4D,MAAA,GAAS,GAAGvD,IAAA;EAAA,IAInDG,CAAA,GAAiB;IACrBH,IAAA,EAAMD,CAAA,CAAS;IACfwE,QAAA,EAAUxE,CAAA,CAAS,KAAK,MAAMN,CAAA;IAC9Be,IAAA,EAAMT,CAAA,CAJEA,CAAA,CAASwD,MAAA,GAIE;EAAA;EAAA,OAGhBU,KAAA,CAAOlE,CAAA,CAAS,QAA2BI,CAAA,CAAOF,GAAA,GAAM4C,QAAA,CAAS9C,CAAA,CAAS,IAAI,MAC5EI,CAAA;AAAA;AAGT,SAAS8C,EAASvD,CAAA;EAAA,IACVC,CAAA,GAAWD,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;IAC3B3C,CAAA,GAAIE,CAAA,CAAS4D,MAAA;IACbxD,CAAA,GAAkB;MACtBC,IAAA,EAAML,CAAA,CAAS;MACf8B,MAAA,EAAQ9B,CAAA,CAASF,CAAA,GAAI;MACrB6B,QAAA,EAAUuB,QAAA,CAASlD,CAAA,CAASF,CAAA,GAAI,IAAI;MACpC8B,MAAA,EAAQsB,QAAA,CAASlD,CAAA,CAASF,CAAA,GAAI,IAAI;MAClC+B,IAAA,EAAMqB,QAAA,CAASlD,CAAA,CAASF,CAAA,GAAI,IAAI;IAAA;EAAA,OAG7BwE,KAAA,CAAOtE,CAAA,CAAS,QAA2BI,CAAA,CAAOE,GAAA,GAAM4C,QAAA,CAASlD,CAAA,CAAS,IAAI,MAC5EI,CAAA;AAAA;AAGT,SAASmD,EAASxD,CAAA;EAAA,SACVC,CAAA,GAAWD,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM,SAC3B3C,CAAA,GAAkB;MACtBO,IAAA,EAAML,CAAA,CAAS;MACfgC,IAAA,EAAM;IAAA,GAGJ5B,CAAA,GAAIJ,CAAA,CAAS4D,MAAA,EACVxD,CAAA,KAAM,IACXN,CAAA,CAAOkC,IAAA,GAAOhC,CAAA,CAASI,CAAA,IAAK,MAAMN,CAAA,CAAOkC,IAAA,CAAKW,IAAA;EAAA,OAG3C2B,KAAA,CAAOtE,CAAA,CAAS,QAA2BF,CAAA,CAAOQ,GAAA,GAAM4C,QAAA,CAASlD,CAAA,CAAS,IAAI,MAC5EF,CAAA;AAAA;AAGT,SAAS0D,EAASzD,CAAA;EAAA,IACVC,CAAA,GAAWD,CAAA,CAAG4C,IAAA,GAAOF,KAAA,CAAM;IAC3B3C,CAAA,GAAIE,CAAA,CAAS4D,MAAA;IACbxD,CAAA,GAAkB;MACtBC,IAAA,EAAML,CAAA,CAAS;MACf8B,MAAA,EAAQ9B,CAAA,CAASF,CAAA,GAAI,GAAGG,OAAA,CAAQ,MAAM;MACtC0B,QAAA,EAAUuB,QAAA,CAASlD,CAAA,CAASF,CAAA,GAAI,IAAI;MACpC8B,MAAA,EAAQsB,QAAA,CAASlD,CAAA,CAASF,CAAA,GAAI,IAAI;IAAA;EAAA,OAG/BwE,KAAA,CAAOtE,CAAA,CAAS,QAA2BI,CAAA,CAAOE,GAAA,GAAM4C,QAAA,CAASlD,CAAA,CAAS,IAAI,MAC5EI,CAAA;AAAA;AAAAyE,OAAA,CAAAC,QAAA;EAAA,SAAA/E,ECxOKA,CAAA;IAAA,KAEHgF,YAAA,GADiB,mBAAbhF,CAAA,GACWiF,IAAA,CAAKC,KAAA,CAAMD,IAAA,CAAKE,SAAA,CAAUnF,CAAA,KACjB,mBAAbA,CAAA,GACIK,CAAA,CAAcL,CAAA,SAEb;EAAA;EAAA,IAAAC,CAAA,GAAAD,CAAA,CAAAoF,SAAA;EAAA,OAAAnF,CAAA,CAIzBoF,MAAA;IAAA,OACS,KAAKL,YAAA;EAAA,GAAA/E,CAAA,CAGdqF,QAAA;IAAA,OACSvF,CAAA,CAAa,KAAKsF,MAAA;EAAA,GAAArF,CAAA;AAAA,KAAA8E,OAAA,CAAAS,YAAA,GAAAxF,CAAA,EAAA+E,OAAA,CAAAU,aAAA,GAAAnF,CAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}