{"ast":null,"code":"export function equals(a, b) {\n  if (a.byteLength !== b.byteLength) return false;\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nexport function alloc(length, value) {\n  const a = new Uint8Array(length);\n  for (let i = 0; i < length; i++) {\n    a[i] = value;\n  }\n  return a;\n}\nexport function readUInt16BE(source, offset) {\n  return (source[offset + 0] << 8 | source[offset + 1]) >>> 0;\n}\nexport function writeUInt16BE(source, value, offset) {\n  source[offset + 0] = value >>> 8;\n  source[offset + 1] = value >>> 0;\n}\nexport function readUInt8(source, offset) {\n  return source[offset];\n}\nexport function writeUInt8(destination, value, offset) {\n  destination[offset] = value;\n}\nexport function readUInt16LE(source, offset) {\n  return source[offset + 0] << 0 >>> 0 | source[offset + 1] << 8 >>> 0;\n}\nexport function writeUInt16LE(destination, value, offset) {\n  destination[offset + 0] = value & 255;\n  value >>>= 8;\n  destination[offset + 1] = value & 255;\n}\nexport function readUInt32BE(source, offset) {\n  return source[offset] * 2 ** 24 + source[offset + 1] * 2 ** 16 + source[offset + 2] * 2 ** 8 + source[offset + 3];\n}\nexport function writeUInt32BE(destination, value, offset) {\n  destination[offset + 3] = value;\n  value >>>= 8;\n  destination[offset + 2] = value;\n  value >>>= 8;\n  destination[offset + 1] = value;\n  value >>>= 8;\n  destination[offset] = value;\n}\nexport function readUInt32LE(source, offset) {\n  return source[offset + 0] << 0 >>> 0 | source[offset + 1] << 8 >>> 0 | source[offset + 2] << 16 >>> 0 | source[offset + 3] << 24 >>> 0;\n}\nexport function writeUInt32LE(destination, value, offset) {\n  destination[offset + 0] = value & 255;\n  value >>>= 8;\n  destination[offset + 1] = value & 255;\n  value >>>= 8;\n  destination[offset + 2] = value & 255;\n  value >>>= 8;\n  destination[offset + 3] = value & 255;\n}","map":{"version":3,"names":["equals","a","b","byteLength","i","alloc","length","value","Uint8Array","readUInt16BE","source","offset","writeUInt16BE","readUInt8","writeUInt8","destination","readUInt16LE","writeUInt16LE","readUInt32BE","writeUInt32BE","readUInt32LE","writeUInt32LE"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\common\\src\\buffer.ts"],"sourcesContent":["/** @ignore */\nexport function equals(a: Uint8Array, b: Uint8Array) {\n  if (a.byteLength !== b.byteLength) return false;\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\n/**\n * @ignore\n * TODO: maybe remove and use string repeat\n */\nexport function alloc(length: number, value: number) {\n  const a = new Uint8Array(length);\n  for (let i = 0; i < length; i++) {\n    a[i] = value;\n  }\n  return a;\n}\n\n/** @ignore */\nexport function readUInt16BE(source: Uint8Array, offset: number): number {\n  return ((source[offset + 0] << 8) | source[offset + 1]) >>> 0;\n}\n\n/** @ignore */\nexport function writeUInt16BE(source: Uint8Array, value: number, offset: number): void {\n  source[offset + 0] = value >>> 8;\n  source[offset + 1] = value >>> 0;\n}\n\n// The following methods are based on `microsoft/vscode` implementation\n// https://github.com/microsoft/vscode/blob/1e6ac12df197fc3e5d1c1bdb25702125cccb135a/src/vs/base/common/buffer.ts\n\n// Copyright (c) 2015 - present Microsoft Corporation\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the “Software”), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n/** @ignore */\nexport function readUInt8(source: Uint8Array, offset: number): number {\n  return source[offset];\n}\n\n/** @ignore */\nexport function writeUInt8(destination: Uint8Array, value: number, offset: number): void {\n  destination[offset] = value;\n}\n\n/** @ignore */\nexport function readUInt16LE(source: Uint8Array, offset: number): number {\n  return ((source[offset + 0] << 0) >>> 0) | ((source[offset + 1] << 8) >>> 0);\n}\n\n/** @ignore */\nexport function writeUInt16LE(destination: Uint8Array, value: number, offset: number): void {\n  destination[offset + 0] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 1] = value & 0b1111_1111;\n}\n\n/** @ignore */\nexport function readUInt32BE(source: Uint8Array, offset: number): number {\n  return (\n    source[offset] * 2 ** 24 +\n    source[offset + 1] * 2 ** 16 +\n    source[offset + 2] * 2 ** 8 +\n    source[offset + 3]\n  );\n}\n\n/** @ignore */\nexport function writeUInt32BE(destination: Uint8Array, value: number, offset: number): void {\n  destination[offset + 3] = value;\n  value >>>= 8;\n  destination[offset + 2] = value;\n  value >>>= 8;\n  destination[offset + 1] = value;\n  value >>>= 8;\n  destination[offset] = value;\n}\n\n/** @ignore */\nexport function readUInt32LE(source: Uint8Array, offset: number): number {\n  return (\n    ((source[offset + 0] << 0) >>> 0) |\n    ((source[offset + 1] << 8) >>> 0) |\n    ((source[offset + 2] << 16) >>> 0) |\n    ((source[offset + 3] << 24) >>> 0)\n  );\n}\n\n/** @ignore */\nexport function writeUInt32LE(destination: Uint8Array, value: number, offset: number): void {\n  destination[offset + 0] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 1] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 2] = value & 0b1111_1111;\n  value >>>= 8;\n  destination[offset + 3] = value & 0b1111_1111;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}