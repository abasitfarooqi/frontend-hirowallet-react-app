{"ast":null,"code":"import { decodeToken } from 'jsontokens';\nimport { BLOCKSTACK_HANDLER, getGlobalObject } from '@stacks/common';\nimport { createFetchFn } from '@stacks/network';\nexport function getAuthRequestFromURL() {\n  const location = getGlobalObject('location', {\n    throwIfUnavailable: true,\n    usageDesc: 'getAuthRequestFromURL'\n  });\n  const params = new URLSearchParams(location?.search);\n  return params.get('authRequest')?.replaceAll(`${BLOCKSTACK_HANDLER}:`, '') ?? null;\n}\nexport async function fetchAppManifest(authRequest) {\n  let fetchFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createFetchFn();\n  if (!authRequest) {\n    throw new Error('Invalid auth request');\n  }\n  const payload = decodeToken(authRequest).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  const manifestURI = payload.manifest_uri;\n  try {\n    const response = await fetchFn(manifestURI);\n    const responseText = await response.text();\n    const responseJSON = JSON.parse(responseText);\n    return {\n      ...responseJSON,\n      manifestURI\n    };\n  } catch (error) {\n    console.log(error);\n    throw new Error('Could not fetch manifest.json');\n  }\n}","map":{"version":3,"names":["decodeToken","BLOCKSTACK_HANDLER","getGlobalObject","createFetchFn","getAuthRequestFromURL","location","throwIfUnavailable","usageDesc","params","URLSearchParams","search","get","replaceAll","fetchAppManifest","authRequest","fetchFn","arguments","length","undefined","Error","payload","manifestURI","manifest_uri","response","responseText","text","responseJSON","JSON","parse","error","console","log"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\auth\\src\\provider.ts"],"sourcesContent":["import { decodeToken } from 'jsontokens';\nimport { BLOCKSTACK_HANDLER, getGlobalObject } from '@stacks/common';\nimport { createFetchFn, FetchFn } from '@stacks/network';\n\n/**\n * Retrieves the authentication request from the query string\n * @return {String|null} the authentication request or `null` if\n * the query string parameter `authRequest` is not found\n * @private\n * @ignore\n */\nexport function getAuthRequestFromURL(): string | null {\n  const location = getGlobalObject('location', {\n    throwIfUnavailable: true,\n    usageDesc: 'getAuthRequestFromURL',\n  });\n\n  const params = new URLSearchParams(location?.search);\n  return params.get('authRequest')?.replaceAll(`${BLOCKSTACK_HANDLER}:`, '') ?? null;\n}\n\n/**\n * Fetches the contents of the manifest file specified in the authentication request\n *\n * @param  {String} authRequest encoded and signed authentication request\n * @return {Promise<Object|String>} Returns a `Promise` that resolves to the JSON\n * object manifest file unless there's an error in which case rejects with an error\n * message.\n * @private\n * @ignore\n */\nexport async function fetchAppManifest(\n  authRequest: string,\n  fetchFn: FetchFn = createFetchFn()\n): Promise<any> {\n  if (!authRequest) {\n    throw new Error('Invalid auth request');\n  }\n  const payload = decodeToken(authRequest).payload;\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n  const manifestURI = payload.manifest_uri as string;\n  try {\n    // Logger.debug(`Fetching manifest from ${manifestURI}`)\n    const response = await fetchFn(manifestURI);\n    const responseText = await response.text();\n    const responseJSON = JSON.parse(responseText);\n    return { ...responseJSON, manifestURI };\n  } catch (error) {\n    console.log(error);\n    throw new Error('Could not fetch manifest.json');\n  }\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,YAAY;AACxC,SAASC,kBAAkB,EAAEC,eAAe,QAAQ,gBAAgB;AACpE,SAASC,aAAa,QAAiB,iBAAiB;AASxD,OAAM,SAAUC,qBAAqBA,CAAA;EACnC,MAAMC,QAAQ,GAAGH,eAAe,CAAC,UAAU,EAAE;IAC3CI,kBAAkB,EAAE,IAAI;IACxBC,SAAS,EAAE;GACZ,CAAC;EAEF,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAACJ,QAAQ,EAAEK,MAAM,CAAC;EACpD,OAAOF,MAAM,CAACG,GAAG,CAAC,aAAa,CAAC,EAAEC,UAAU,CAAC,GAAGX,kBAAkB,GAAG,EAAE,EAAE,CAAC,IAAI,IAAI;AACpF;AAYA,OAAO,eAAeY,gBAAgBA,CACpCC,WAAmB,EACe;EAAA,IAAlCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmBb,aAAa,EAAE;EAElC,IAAI,CAACW,WAAW,EAAE;IAChB,MAAM,IAAIK,KAAK,CAAC,sBAAsB,CAAC;;EAEzC,MAAMC,OAAO,GAAGpB,WAAW,CAACc,WAAW,CAAC,CAACM,OAAO;EAChD,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC/B,MAAM,IAAID,KAAK,CAAC,yCAAyC,CAAC;;EAE5D,MAAME,WAAW,GAAGD,OAAO,CAACE,YAAsB;EAClD,IAAI;IAEF,MAAMC,QAAQ,GAAG,MAAMR,OAAO,CAACM,WAAW,CAAC;IAC3C,MAAMG,YAAY,GAAG,MAAMD,QAAQ,CAACE,IAAI,EAAE;IAC1C,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;IAC7C,OAAO;MAAE,GAAGE,YAAY;MAAEL;IAAW,CAAE;GACxC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,MAAM,IAAIV,KAAK,CAAC,+BAA+B,CAAC;;AAEpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}