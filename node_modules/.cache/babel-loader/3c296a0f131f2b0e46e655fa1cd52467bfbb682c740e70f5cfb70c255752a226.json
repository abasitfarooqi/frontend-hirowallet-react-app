{"ast":null,"code":"import { ClarityType } from '../constants';\nfunction listCV(values) {\n  return {\n    type: ClarityType.List,\n    list: values\n  };\n}\nexport { listCV };","map":{"version":3,"names":["ClarityType","listCV","values","type","List","list"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\transactions\\src\\clarity\\types\\listCV.ts"],"sourcesContent":["import { ClarityValue } from '../clarityValue';\nimport { ClarityType } from '../constants';\n\ninterface ListCV<T extends ClarityValue = ClarityValue> {\n  type: ClarityType.List;\n  list: T[];\n}\n\n/**\n * Create list of clarity types\n *\n * @param {ClarityValue[]} list of ClarityValues to be converted to ListCV clarity type\n *\n * @returns {ListCV<T>} instance of type ListCV<T> of the provided values\n *\n * @example\n * ```\n *  import { listCV, intCV } from '@stacks/transactions';\n *\n *  const list = listCV([intCV(1), intCV(2), intCV(3), intCV(-4)]);\n *  // { type: 11, list: [ { type: 0, value: 1n }, { type: 0, value: 2n }, { type: 0, value: 3n }, { type: 0, value: -4n } ] }\n * ```\n *\n * @see\n * {@link https://github.com/hirosystems/stacks.js/blob/master/packages/transactions/tests/clarity.test.ts | clarity test cases for more examples}\n */\nfunction listCV<T extends ClarityValue = ClarityValue>(values: T[]): ListCV<T> {\n  return { type: ClarityType.List, list: values };\n}\n\nexport { ListCV, listCV };\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,cAAc;AAyB1C,SAASC,MAAMA,CAAwCC,MAAW;EAChE,OAAO;IAAEC,IAAI,EAAEH,WAAW,CAACI,IAAI;IAAEC,IAAI,EAAEH;EAAM,CAAE;AACjD;AAEA,SAAiBD,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}