{"ast":null,"code":"import { bytesToHex, concatArray, hexToBytes, intToBigInt, intToBytes, writeUInt16BE } from '@stacks/common';\nimport { AddressHashMode, AuthType, PubKeyEncoding, RECOVERABLE_ECDSA_SIG_LENGTH_BYTES, StacksMessageType } from './constants';\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport { serializeMessageSignature, deserializeMessageSignature } from './signature';\nimport { addressFromPublicKeys, createEmptyAddress, createLPList, deserializeLPList, serializeLPList } from './types';\nimport { createStacksPublicKey, getPublicKey, isCompressed, publicKeyFromSignatureVrs, signWithKey } from './keys';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nexport function emptyMessageSignature() {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES))\n  };\n}\nexport function createSingleSigSpendingCondition(hashMode, pubKey, nonce, fee) {\n  const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey)) ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed;\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    keyEncoding,\n    signature: emptyMessageSignature()\n  };\n}\nexport function createMultiSigSpendingCondition(hashMode, numSigs, pubKeys, nonce, fee) {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n  const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    fields: [],\n    signaturesRequired: numSigs\n  };\n}\nexport function isSingleSig(condition) {\n  return 'signature' in condition;\n}\nfunction clearCondition(condition) {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = 0;\n  cloned.fee = 0;\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n  return {\n    ...cloned,\n    nonce: BigInt(0),\n    fee: BigInt(0)\n  };\n}\nexport function serializeSingleSigSpendingCondition(condition) {\n  const bytesArray = [condition.hashMode, hexToBytes(condition.signer), intToBytes(condition.nonce, false, 8), intToBytes(condition.fee, false, 8), condition.keyEncoding, serializeMessageSignature(condition.signature)];\n  return concatArray(bytesArray);\n}\nexport function serializeMultiSigSpendingCondition(condition) {\n  const bytesArray = [condition.hashMode, hexToBytes(condition.signer), intToBytes(condition.nonce, false, 8), intToBytes(condition.fee, false, 8)];\n  const fields = createLPList(condition.fields);\n  bytesArray.push(serializeLPList(fields));\n  const numSigs = new Uint8Array(2);\n  writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n  bytesArray.push(numSigs);\n  return concatArray(bytesArray);\n}\nexport function deserializeSingleSigSpendingCondition(hashMode, bytesReader) {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n  const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n  const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  if (hashMode === AddressHashMode.SerializeP2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n    throw new DeserializationError('Failed to parse singlesig spending condition: incomaptible hash mode and key encoding');\n  }\n  const signature = deserializeMessageSignature(bytesReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature\n  };\n}\nexport function deserializeMultiSigSpendingCondition(hashMode, bytesReader) {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n  const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n  const fields = deserializeLPList(bytesReader, StacksMessageType.TransactionAuthField).values;\n  let haveUncompressed = false;\n  let numSigs = 0;\n  for (const field of fields) {\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        numSigs += 1;\n        if (numSigs === 65536) throw new VerificationError('Failed to parse multisig spending condition: too many signatures');\n        break;\n    }\n  }\n  const signaturesRequired = bytesReader.readUInt16BE();\n  if (haveUncompressed && hashMode === AddressHashMode.SerializeP2SH) throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired\n  };\n}\nexport function serializeSpendingCondition(condition) {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  }\n  return serializeMultiSigSpendingCondition(condition);\n}\nexport function deserializeSpendingCondition(bytesReader) {\n  const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n  }\n}\nexport function makeSigHashPreSign(curSigHash, authType, fee, nonce) {\n  const hashLength = 32 + 1 + 8 + 8;\n  const sigHash = curSigHash + bytesToHex(new Uint8Array([authType])) + bytesToHex(intToBytes(fee, false, 8)) + bytesToHex(intToBytes(nonce, false, 8));\n  if (hexToBytes(sigHash).byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n  return txidFromData(hexToBytes(sigHash));\n}\nfunction makeSigHashPostSign(curSigHash, pubKey, signature) {\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n  const pubKeyEncoding = isCompressed(pubKey) ? PubKeyEncoding.Compressed : PubKeyEncoding.Uncompressed;\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n  const sigHashBytes = hexToBytes(sigHash);\n  if (sigHashBytes.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n  return txidFromData(sigHashBytes);\n}\nexport function nextSignature(curSigHash, authType, fee, nonce, privateKey) {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n  return {\n    nextSig: signature,\n    nextSigHash\n  };\n}\nexport function nextVerification(initialSigHash, authType, fee, nonce, pubKeyEncoding, signature) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n  const publicKey = createStacksPublicKey(publicKeyFromSignatureVrs(sigHashPreSign, signature, pubKeyEncoding));\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n  return {\n    pubKey: publicKey,\n    nextSigHash\n  };\n}\nfunction newInitialSigHash() {\n  const spendingCondition = createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, '', 0, 0);\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\nfunction verify(condition, initialSigHash, authType) {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    return verifyMultiSig(condition, initialSigHash, authType);\n  }\n}\nfunction verifySingleSig(condition, initialSigHash, authType) {\n  const {\n    pubKey,\n    nextSigHash\n  } = nextVerification(initialSigHash, authType, condition.fee, condition.nonce, condition.keyEncoding, condition.signature);\n  const addrBytes = addressFromPublicKeys(0, condition.hashMode, 1, [pubKey]).hash160;\n  if (addrBytes !== condition.signer) throw new VerificationError(`Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`);\n  return nextSigHash;\n}\nfunction verifyMultiSig(condition, initialSigHash, authType) {\n  const publicKeys = [];\n  let curSigHash = initialSigHash;\n  let haveUncompressed = false;\n  let numSigs = 0;\n  for (const field of condition.fields) {\n    let foundPubKey;\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        foundPubKey = field.contents;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        const {\n          pubKey,\n          nextSigHash\n        } = nextVerification(curSigHash, authType, condition.fee, condition.nonce, field.pubKeyEncoding, field.contents);\n        curSigHash = nextSigHash;\n        foundPubKey = pubKey;\n        numSigs += 1;\n        if (numSigs === 65536) throw new VerificationError('Too many signatures');\n        break;\n    }\n    publicKeys.push(foundPubKey);\n  }\n  if (numSigs !== condition.signaturesRequired) throw new VerificationError('Incorrect number of signatures');\n  if (haveUncompressed && condition.hashMode === AddressHashMode.SerializeP2SH) throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n  const addrBytes = addressFromPublicKeys(0, condition.hashMode, condition.signaturesRequired, publicKeys).hash160;\n  if (addrBytes !== condition.signer) throw new VerificationError(`Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`);\n  return curSigHash;\n}\nexport function createStandardAuth(spendingCondition) {\n  return {\n    authType: AuthType.Standard,\n    spendingCondition\n  };\n}\nexport function createSponsoredAuth(spendingCondition, sponsorSpendingCondition) {\n  return {\n    authType: AuthType.Sponsored,\n    spendingCondition,\n    sponsorSpendingCondition: sponsorSpendingCondition ? sponsorSpendingCondition : createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, '0'.repeat(66), 0, 0)\n  };\n}\nexport function intoInitialSighashAuth(auth) {\n  if (auth.spendingCondition) {\n    switch (auth.authType) {\n      case AuthType.Standard:\n        return createStandardAuth(clearCondition(auth.spendingCondition));\n      case AuthType.Sponsored:\n        return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n      default:\n        throw new SigningError('Unexpected authorization type for signing');\n    }\n  }\n  throw new Error('Authorization missing SpendingCondition');\n}\nexport function verifyOrigin(auth, initialSigHash) {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    case AuthType.Sponsored:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    default:\n      throw new SigningError('Invalid origin auth type');\n  }\n}\nexport function setFee(auth, amount) {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      const spendingCondition = {\n        ...auth.spendingCondition,\n        fee: intToBigInt(amount, false)\n      };\n      return {\n        ...auth,\n        spendingCondition\n      };\n    case AuthType.Sponsored:\n      const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        fee: intToBigInt(amount, false)\n      };\n      return {\n        ...auth,\n        sponsorSpendingCondition\n      };\n  }\n}\nexport function getFee(auth) {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return auth.spendingCondition.fee;\n    case AuthType.Sponsored:\n      return auth.sponsorSpendingCondition.fee;\n  }\n}\nexport function setNonce(auth, nonce) {\n  const spendingCondition = {\n    ...auth.spendingCondition,\n    nonce: intToBigInt(nonce, false)\n  };\n  return {\n    ...auth,\n    spendingCondition\n  };\n}\nexport function setSponsorNonce(auth, nonce) {\n  const sponsorSpendingCondition = {\n    ...auth.sponsorSpendingCondition,\n    nonce: intToBigInt(nonce, false)\n  };\n  return {\n    ...auth,\n    sponsorSpendingCondition\n  };\n}\nexport function setSponsor(auth, sponsorSpendingCondition) {\n  const sc = {\n    ...sponsorSpendingCondition,\n    nonce: intToBigInt(sponsorSpendingCondition.nonce, false),\n    fee: intToBigInt(sponsorSpendingCondition.fee, false)\n  };\n  return {\n    ...auth,\n    sponsorSpendingCondition: sc\n  };\n}\nexport function serializeAuthorization(auth) {\n  const bytesArray = [];\n  bytesArray.push(auth.authType);\n  switch (auth.authType) {\n    case AuthType.Standard:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      break;\n    case AuthType.Sponsored:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      bytesArray.push(serializeSpendingCondition(auth.sponsorSpendingCondition));\n      break;\n  }\n  return concatArray(bytesArray);\n}\nexport function deserializeAuthorization(bytesReader) {\n  const authType = bytesReader.readUInt8Enum(AuthType, n => {\n    throw new DeserializationError(`Could not parse ${n} as AuthType`);\n  });\n  let spendingCondition;\n  switch (authType) {\n    case AuthType.Standard:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      return createStandardAuth(spendingCondition);\n    case AuthType.Sponsored:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n      return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n  }\n}","map":{"version":3,"names":["bytesToHex","concatArray","hexToBytes","intToBigInt","intToBytes","writeUInt16BE","AddressHashMode","AuthType","PubKeyEncoding","RECOVERABLE_ECDSA_SIG_LENGTH_BYTES","StacksMessageType","cloneDeep","leftPadHex","txidFromData","serializeMessageSignature","deserializeMessageSignature","addressFromPublicKeys","createEmptyAddress","createLPList","deserializeLPList","serializeLPList","createStacksPublicKey","getPublicKey","isCompressed","publicKeyFromSignatureVrs","signWithKey","DeserializationError","SigningError","VerificationError","emptyMessageSignature","type","MessageSignature","data","Uint8Array","createSingleSigSpendingCondition","hashMode","pubKey","nonce","fee","signer","hash160","keyEncoding","Compressed","Uncompressed","signature","createMultiSigSpendingCondition","numSigs","pubKeys","stacksPublicKeys","map","fields","signaturesRequired","isSingleSig","condition","clearCondition","cloned","BigInt","serializeSingleSigSpendingCondition","bytesArray","serializeMultiSigSpendingCondition","push","deserializeSingleSigSpendingCondition","bytesReader","readBytes","readUInt8Enum","n","SerializeP2WPKH","deserializeMultiSigSpendingCondition","TransactionAuthField","values","haveUncompressed","field","contents","PublicKey","pubKeyEncoding","readUInt16BE","SerializeP2SH","serializeSpendingCondition","deserializeSpendingCondition","SerializeP2PKH","makeSigHashPreSign","curSigHash","authType","hashLength","sigHash","byteLength","Error","makeSigHashPostSign","toString","sigHashBytes","nextSignature","privateKey","sigHashPreSign","publicKey","nextSigHash","nextSig","nextVerification","initialSigHash","newInitialSigHash","spendingCondition","verify","verifySingleSig","verifyMultiSig","addrBytes","publicKeys","foundPubKey","createStandardAuth","Standard","createSponsoredAuth","sponsorSpendingCondition","Sponsored","repeat","intoInitialSighashAuth","auth","verifyOrigin","setFee","amount","getFee","setNonce","setSponsorNonce","setSponsor","sc","serializeAuthorization","deserializeAuthorization"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\transactions\\src\\authorization.ts"],"sourcesContent":["import {\n  bytesToHex,\n  concatArray,\n  hexToBytes,\n  IntegerType,\n  intToBigInt,\n  intToBytes,\n  writeUInt16BE,\n} from '@stacks/common';\nimport {\n  AddressHashMode,\n  AuthType,\n  MultiSigHashMode,\n  PubKeyEncoding,\n  RECOVERABLE_ECDSA_SIG_LENGTH_BYTES,\n  SingleSigHashMode,\n  StacksMessageType,\n} from './constants';\n\nimport { cloneDeep, leftPadHex, txidFromData } from './utils';\nimport {\n  TransactionAuthField,\n  serializeMessageSignature,\n  deserializeMessageSignature,\n} from './signature';\nimport {\n  addressFromPublicKeys,\n  createEmptyAddress,\n  createLPList,\n  deserializeLPList,\n  serializeLPList,\n} from './types';\n\nimport {\n  createStacksPublicKey,\n  getPublicKey,\n  isCompressed,\n  publicKeyFromSignatureVrs,\n  signWithKey,\n  StacksPrivateKey,\n  StacksPublicKey,\n} from './keys';\n\nimport { MessageSignature } from './common';\nimport { DeserializationError, SigningError, VerificationError } from './errors';\nimport { BytesReader } from './bytesReader';\n\nexport function emptyMessageSignature(): MessageSignature {\n  return {\n    type: StacksMessageType.MessageSignature,\n    data: bytesToHex(new Uint8Array(RECOVERABLE_ECDSA_SIG_LENGTH_BYTES)),\n  };\n}\n\nexport interface SingleSigSpendingCondition {\n  hashMode: SingleSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  keyEncoding: PubKeyEncoding;\n  signature: MessageSignature;\n}\n\nexport interface SingleSigSpendingConditionOpts\n  extends Omit<SingleSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport interface MultiSigSpendingCondition {\n  hashMode: MultiSigHashMode;\n  signer: string;\n  nonce: bigint;\n  fee: bigint;\n  fields: TransactionAuthField[];\n  signaturesRequired: number;\n}\n\nexport interface MultiSigSpendingConditionOpts\n  extends Omit<MultiSigSpendingCondition, 'nonce' | 'fee'> {\n  nonce: IntegerType;\n  fee: IntegerType;\n}\n\nexport type SpendingCondition = SingleSigSpendingCondition | MultiSigSpendingCondition;\n\nexport type SpendingConditionOpts = SingleSigSpendingConditionOpts | MultiSigSpendingConditionOpts;\n\nexport function createSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  pubKey: string,\n  nonce: IntegerType,\n  fee: IntegerType\n): SingleSigSpendingCondition {\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, 1, [createStacksPublicKey(pubKey)]).hash160;\n  const keyEncoding = isCompressed(createStacksPublicKey(pubKey))\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    keyEncoding,\n    signature: emptyMessageSignature(),\n  };\n}\n\nexport function createMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  numSigs: number,\n  pubKeys: string[],\n  nonce: IntegerType,\n  fee: IntegerType\n): MultiSigSpendingCondition {\n  const stacksPublicKeys = pubKeys.map(createStacksPublicKey);\n\n  // address version arg doesn't matter for signer hash generation\n  const signer = addressFromPublicKeys(0, hashMode, numSigs, stacksPublicKeys).hash160;\n\n  return {\n    hashMode,\n    signer,\n    nonce: intToBigInt(nonce, false),\n    fee: intToBigInt(fee, false),\n    fields: [],\n    signaturesRequired: numSigs,\n  };\n}\n\nexport function isSingleSig(\n  condition: SpendingConditionOpts\n): condition is SingleSigSpendingConditionOpts {\n  return 'signature' in condition;\n}\n\nfunction clearCondition(condition: SpendingConditionOpts): SpendingCondition {\n  const cloned = cloneDeep(condition);\n  cloned.nonce = 0;\n  cloned.fee = 0;\n\n  if (isSingleSig(cloned)) {\n    cloned.signature = emptyMessageSignature();\n  } else {\n    cloned.fields = [];\n  }\n\n  return {\n    ...cloned,\n    nonce: BigInt(0),\n    fee: BigInt(0),\n  };\n}\n\nexport function serializeSingleSigSpendingCondition(\n  condition: SingleSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, false, 8),\n    intToBytes(condition.fee, false, 8),\n    condition.keyEncoding as number,\n    serializeMessageSignature(condition.signature),\n  ];\n  return concatArray(bytesArray);\n}\n\nexport function serializeMultiSigSpendingCondition(\n  condition: MultiSigSpendingConditionOpts\n): Uint8Array {\n  const bytesArray = [\n    condition.hashMode,\n    hexToBytes(condition.signer),\n    intToBytes(condition.nonce, false, 8),\n    intToBytes(condition.fee, false, 8),\n  ];\n\n  const fields = createLPList(condition.fields);\n  bytesArray.push(serializeLPList(fields));\n\n  const numSigs = new Uint8Array(2);\n  writeUInt16BE(numSigs, condition.signaturesRequired, 0);\n  bytesArray.push(numSigs);\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeSingleSigSpendingCondition(\n  hashMode: SingleSigHashMode,\n  bytesReader: BytesReader\n): SingleSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n  const fee = BigInt(`0x${bytesToHex(bytesReader.readBytes(8))}`);\n\n  const keyEncoding = bytesReader.readUInt8Enum(PubKeyEncoding, n => {\n    throw new DeserializationError(`Could not parse ${n} as PubKeyEncoding`);\n  });\n  if (hashMode === AddressHashMode.SerializeP2WPKH && keyEncoding != PubKeyEncoding.Compressed) {\n    throw new DeserializationError(\n      'Failed to parse singlesig spending condition: incomaptible hash mode and key encoding'\n    );\n  }\n  const signature = deserializeMessageSignature(bytesReader);\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    keyEncoding,\n    signature,\n  };\n}\n\nexport function deserializeMultiSigSpendingCondition(\n  hashMode: MultiSigHashMode,\n  bytesReader: BytesReader\n): MultiSigSpendingCondition {\n  const signer = bytesToHex(bytesReader.readBytes(20));\n  const nonce = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n  const fee = BigInt('0x' + bytesToHex(bytesReader.readBytes(8)));\n\n  const fields = deserializeLPList(bytesReader, StacksMessageType.TransactionAuthField)\n    .values as TransactionAuthField[];\n\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of fields) {\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        numSigs += 1;\n        if (numSigs === 65536)\n          throw new VerificationError(\n            'Failed to parse multisig spending condition: too many signatures'\n          );\n        break;\n    }\n  }\n  const signaturesRequired = bytesReader.readUInt16BE();\n\n  // Partially signed multi-sig tx can be serialized and deserialized without exception (Incorrect number of signatures)\n  // No need to check numSigs !== signaturesRequired to throw Incorrect number of signatures error\n\n  if (haveUncompressed && hashMode === AddressHashMode.SerializeP2SH)\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  return {\n    hashMode,\n    signer,\n    nonce,\n    fee,\n    fields,\n    signaturesRequired,\n  };\n}\n\nexport function serializeSpendingCondition(condition: SpendingConditionOpts): Uint8Array {\n  if (isSingleSig(condition)) {\n    return serializeSingleSigSpendingCondition(condition);\n  }\n  return serializeMultiSigSpendingCondition(condition);\n}\n\nexport function deserializeSpendingCondition(bytesReader: BytesReader): SpendingCondition {\n  const hashMode = bytesReader.readUInt8Enum(AddressHashMode, n => {\n    throw new DeserializationError(`Could not parse ${n} as AddressHashMode`);\n  });\n\n  if (hashMode === AddressHashMode.SerializeP2PKH || hashMode === AddressHashMode.SerializeP2WPKH) {\n    return deserializeSingleSigSpendingCondition(hashMode, bytesReader);\n  } else {\n    return deserializeMultiSigSpendingCondition(hashMode, bytesReader);\n  }\n}\n\nexport function makeSigHashPreSign(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType\n): string {\n  // new hash combines the previous hash and all the new data this signature will add. This\n  // includes:\n  // * the previous hash\n  // * the auth flag\n  // * the tx fee (big-endian 8-byte number)\n  // * nonce (big-endian 8-byte number)\n  const hashLength = 32 + 1 + 8 + 8;\n\n  const sigHash =\n    curSigHash +\n    bytesToHex(new Uint8Array([authType])) +\n    bytesToHex(intToBytes(fee, false, 8)) +\n    bytesToHex(intToBytes(nonce, false, 8));\n\n  if (hexToBytes(sigHash).byteLength !== hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(hexToBytes(sigHash));\n}\n\nfunction makeSigHashPostSign(\n  curSigHash: string,\n  pubKey: StacksPublicKey,\n  signature: MessageSignature\n): string {\n  // new hash combines the previous hash and all the new data this signature will add.  This\n  // includes:\n  // * the public key compression flag\n  // * the signature\n  const hashLength = 32 + 1 + RECOVERABLE_ECDSA_SIG_LENGTH_BYTES;\n\n  const pubKeyEncoding = isCompressed(pubKey)\n    ? PubKeyEncoding.Compressed\n    : PubKeyEncoding.Uncompressed;\n\n  const sigHash = curSigHash + leftPadHex(pubKeyEncoding.toString(16)) + signature.data;\n\n  const sigHashBytes = hexToBytes(sigHash);\n  if (sigHashBytes.byteLength > hashLength) {\n    throw Error('Invalid signature hash length');\n  }\n\n  return txidFromData(sigHashBytes);\n}\n\nexport function nextSignature(\n  curSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  privateKey: StacksPrivateKey\n): {\n  nextSig: MessageSignature;\n  nextSigHash: string;\n} {\n  const sigHashPreSign = makeSigHashPreSign(curSigHash, authType, fee, nonce);\n\n  const signature = signWithKey(privateKey, sigHashPreSign);\n  const publicKey = getPublicKey(privateKey);\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    nextSig: signature,\n    nextSigHash,\n  };\n}\n\nexport function nextVerification(\n  initialSigHash: string,\n  authType: AuthType,\n  fee: IntegerType,\n  nonce: IntegerType,\n  pubKeyEncoding: PubKeyEncoding,\n  signature: MessageSignature\n) {\n  const sigHashPreSign = makeSigHashPreSign(initialSigHash, authType, fee, nonce);\n\n  const publicKey = createStacksPublicKey(\n    publicKeyFromSignatureVrs(sigHashPreSign, signature, pubKeyEncoding)\n  );\n\n  const nextSigHash = makeSigHashPostSign(sigHashPreSign, publicKey, signature);\n\n  return {\n    pubKey: publicKey,\n    nextSigHash,\n  };\n}\n\nfunction newInitialSigHash(): SpendingCondition {\n  const spendingCondition = createSingleSigSpendingCondition(\n    AddressHashMode.SerializeP2PKH,\n    '',\n    0,\n    0\n  );\n  spendingCondition.signer = createEmptyAddress().hash160;\n  spendingCondition.keyEncoding = PubKeyEncoding.Compressed;\n  spendingCondition.signature = emptyMessageSignature();\n  return spendingCondition;\n}\n\nfunction verify(\n  condition: SpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  if (isSingleSig(condition)) {\n    return verifySingleSig(condition, initialSigHash, authType);\n  } else {\n    return verifyMultiSig(condition, initialSigHash, authType);\n  }\n}\n\nfunction verifySingleSig(\n  condition: SingleSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const { pubKey, nextSigHash } = nextVerification(\n    initialSigHash,\n    authType,\n    condition.fee,\n    condition.nonce,\n    condition.keyEncoding,\n    condition.signature\n  );\n\n  // address version arg doesn't matter for signer hash generation\n  const addrBytes = addressFromPublicKeys(0, condition.hashMode, 1, [pubKey]).hash160;\n\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return nextSigHash;\n}\n\nfunction verifyMultiSig(\n  condition: MultiSigSpendingConditionOpts,\n  initialSigHash: string,\n  authType: AuthType\n): string {\n  const publicKeys: StacksPublicKey[] = [];\n  let curSigHash = initialSigHash;\n  let haveUncompressed = false;\n  let numSigs = 0;\n\n  for (const field of condition.fields) {\n    let foundPubKey: StacksPublicKey;\n\n    switch (field.contents.type) {\n      case StacksMessageType.PublicKey:\n        if (!isCompressed(field.contents)) haveUncompressed = true;\n        foundPubKey = field.contents;\n        break;\n      case StacksMessageType.MessageSignature:\n        if (field.pubKeyEncoding === PubKeyEncoding.Uncompressed) haveUncompressed = true;\n        const { pubKey, nextSigHash } = nextVerification(\n          curSigHash,\n          authType,\n          condition.fee,\n          condition.nonce,\n          field.pubKeyEncoding,\n          field.contents\n        );\n        curSigHash = nextSigHash;\n        foundPubKey = pubKey;\n\n        numSigs += 1;\n        if (numSigs === 65536) throw new VerificationError('Too many signatures');\n\n        break;\n    }\n    publicKeys.push(foundPubKey);\n  }\n\n  if (numSigs !== condition.signaturesRequired)\n    throw new VerificationError('Incorrect number of signatures');\n\n  if (haveUncompressed && condition.hashMode === AddressHashMode.SerializeP2SH)\n    throw new VerificationError('Uncompressed keys are not allowed in this hash mode');\n\n  const addrBytes = addressFromPublicKeys(\n    0,\n    condition.hashMode,\n    condition.signaturesRequired,\n    publicKeys\n  ).hash160;\n  if (addrBytes !== condition.signer)\n    throw new VerificationError(\n      `Signer hash does not equal hash of public key(s): ${addrBytes} != ${condition.signer}`\n    );\n\n  return curSigHash;\n}\n\nexport type Authorization = StandardAuthorization | SponsoredAuthorization;\n\nexport interface StandardAuthorization {\n  authType: AuthType.Standard;\n  spendingCondition: SpendingCondition;\n}\n\nexport interface SponsoredAuthorization {\n  authType: AuthType.Sponsored;\n  spendingCondition: SpendingCondition;\n  sponsorSpendingCondition: SpendingCondition;\n}\n\nexport function createStandardAuth(spendingCondition: SpendingCondition): StandardAuthorization {\n  return {\n    authType: AuthType.Standard,\n    spendingCondition,\n  };\n}\n\nexport function createSponsoredAuth(\n  spendingCondition: SpendingCondition,\n  sponsorSpendingCondition?: SpendingCondition\n): Authorization {\n  return {\n    authType: AuthType.Sponsored,\n    spendingCondition,\n    sponsorSpendingCondition: sponsorSpendingCondition\n      ? sponsorSpendingCondition\n      : createSingleSigSpendingCondition(AddressHashMode.SerializeP2PKH, '0'.repeat(66), 0, 0),\n  };\n}\n\nexport function intoInitialSighashAuth(auth: Authorization): Authorization {\n  if (auth.spendingCondition) {\n    switch (auth.authType) {\n      case AuthType.Standard:\n        return createStandardAuth(clearCondition(auth.spendingCondition));\n      case AuthType.Sponsored:\n        return createSponsoredAuth(clearCondition(auth.spendingCondition), newInitialSigHash());\n      default:\n        throw new SigningError('Unexpected authorization type for signing');\n    }\n  }\n\n  throw new Error('Authorization missing SpendingCondition');\n}\n\nexport function verifyOrigin(auth: Authorization, initialSigHash: string): string {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    case AuthType.Sponsored:\n      return verify(auth.spendingCondition, initialSigHash, AuthType.Standard);\n    default:\n      throw new SigningError('Invalid origin auth type');\n  }\n}\n\nexport function setFee(auth: Authorization, amount: IntegerType): Authorization {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      const spendingCondition = {\n        ...auth.spendingCondition,\n        fee: intToBigInt(amount, false),\n      };\n      return { ...auth, spendingCondition };\n    case AuthType.Sponsored:\n      const sponsorSpendingCondition = {\n        ...auth.sponsorSpendingCondition,\n        fee: intToBigInt(amount, false),\n      };\n      return { ...auth, sponsorSpendingCondition };\n  }\n}\n\nexport function getFee(auth: Authorization): bigint {\n  switch (auth.authType) {\n    case AuthType.Standard:\n      return auth.spendingCondition.fee;\n    case AuthType.Sponsored:\n      return auth.sponsorSpendingCondition.fee;\n  }\n}\n\nexport function setNonce(auth: Authorization, nonce: IntegerType): Authorization {\n  const spendingCondition = {\n    ...auth.spendingCondition,\n    nonce: intToBigInt(nonce, false),\n  };\n\n  return {\n    ...auth,\n    spendingCondition,\n  };\n}\n\nexport function setSponsorNonce(auth: SponsoredAuthorization, nonce: IntegerType): Authorization {\n  const sponsorSpendingCondition = {\n    ...auth.sponsorSpendingCondition,\n    nonce: intToBigInt(nonce, false),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition,\n  };\n}\n\nexport function setSponsor(\n  auth: SponsoredAuthorization,\n  sponsorSpendingCondition: SpendingConditionOpts\n): Authorization {\n  const sc = {\n    ...sponsorSpendingCondition,\n    nonce: intToBigInt(sponsorSpendingCondition.nonce, false),\n    fee: intToBigInt(sponsorSpendingCondition.fee, false),\n  };\n\n  return {\n    ...auth,\n    sponsorSpendingCondition: sc,\n  };\n}\n\nexport function serializeAuthorization(auth: Authorization): Uint8Array {\n  const bytesArray = [];\n  bytesArray.push(auth.authType);\n\n  switch (auth.authType) {\n    case AuthType.Standard:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      break;\n    case AuthType.Sponsored:\n      bytesArray.push(serializeSpendingCondition(auth.spendingCondition));\n      bytesArray.push(serializeSpendingCondition(auth.sponsorSpendingCondition));\n      break;\n  }\n\n  return concatArray(bytesArray);\n}\n\nexport function deserializeAuthorization(bytesReader: BytesReader) {\n  const authType = bytesReader.readUInt8Enum(AuthType, n => {\n    throw new DeserializationError(`Could not parse ${n} as AuthType`);\n  });\n\n  let spendingCondition;\n  switch (authType) {\n    case AuthType.Standard:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      return createStandardAuth(spendingCondition);\n    case AuthType.Sponsored:\n      spendingCondition = deserializeSpendingCondition(bytesReader);\n      const sponsorSpendingCondition = deserializeSpendingCondition(bytesReader);\n      return createSponsoredAuth(spendingCondition, sponsorSpendingCondition);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}