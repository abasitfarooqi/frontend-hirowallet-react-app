{"ast":null,"code":"import { DEFAULT_SCOPE, DEFAULT_BLOCKSTACK_HOST } from './constants';\nimport { getGlobalObject } from '@stacks/common';\nexport class AppConfig {\n  constructor() {\n    var _getGlobalObject;\n    let scopes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCOPE.slice();\n    let appDomain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (_getGlobalObject = getGlobalObject('location', {\n      returnEmptyObject: true\n    })) === null || _getGlobalObject === void 0 ? void 0 : _getGlobalObject.origin;\n    let redirectPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    let manifestPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '/manifest.json';\n    let coreNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    let authenticatorURL = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DEFAULT_BLOCKSTACK_HOST;\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n    this.coreNode = coreNode;\n    this.authenticatorURL = authenticatorURL;\n  }\n  redirectURI() {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n  manifestURI() {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n}","map":{"version":3,"names":["DEFAULT_SCOPE","DEFAULT_BLOCKSTACK_HOST","getGlobalObject","AppConfig","constructor","_getGlobalObject","scopes","arguments","length","undefined","slice","appDomain","returnEmptyObject","origin","redirectPath","manifestPath","coreNode","authenticatorURL","redirectURI","manifestURI"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\auth\\src\\appConfig.ts"],"sourcesContent":["import { DEFAULT_SCOPE, DEFAULT_BLOCKSTACK_HOST, AuthScope } from './constants';\nimport { getGlobalObject } from '@stacks/common';\n\n/**\n * Configuration data for the current app.\n *\n * On browser platforms, creating an instance of this\n * class without any arguments will use\n * `window.location.origin` as the app domain.\n * On non-browser platforms, you need to\n * specify an app domain as the second argument.\n *\n */\nexport class AppConfig {\n  /**\n   * Blockstack apps are uniquely identified by their app domain.\n   *\n   */\n  appDomain?: string;\n\n  /**\n   * An array of string representing permissions requested by the app.\n   *\n   */\n  scopes: (AuthScope | string)[];\n\n  /**\n   * Path on app domain to redirect users to after authentication. The\n   * authentication response token will be postpended in a query.\n   *\n   */\n  redirectPath: string;\n\n  /**\n   * Path relative to app domain of app's manifest file.\n   *\n   * This file needs to have CORS headers set so that it can be fetched\n   * from any origin. Typically this means return the header `Access-Control-Allow-Origin: *`.\n   *\n   */\n  manifestPath: string;\n\n  /**\n   * The URL of Blockstack core node to use for this app. If this is\n   * `null`, the core node specified by the user or default core node\n   * will be used.\n   *\n   */\n  coreNode?: string;\n\n  /**\n   * The URL of a web-based Blockstack Authenticator to use in the event\n   * the user doesn't have Blockstack installed on their machine. If this\n   * is not specified, the current default in this library will be used.\n   *\n   */\n  authenticatorURL?: string;\n\n  /**\n   * @param {Array<string>} scopes - permissions this app is requesting\n   * @param {string} appDomain - the app domain\n   * @param {string} redirectPath - path on app domain to redirect users to after authentication\n   * @param {string} manifestPath - path relative to app domain of app's manifest file\n   * @param {string | undefined} coreNode - override the default or user selected core node\n   * @param {string} authenticatorURL - the web-based fall back authenticator\n   * ([[DEFAULT_BLOCKSTACK_HOST]])\n   */\n  constructor(\n    scopes: string[] = DEFAULT_SCOPE.slice(),\n    appDomain: string | undefined = getGlobalObject('location', { returnEmptyObject: true })\n      ?.origin,\n    redirectPath = '',\n    manifestPath = '/manifest.json',\n    coreNode: string | undefined = undefined,\n    authenticatorURL: string = DEFAULT_BLOCKSTACK_HOST\n  ) {\n    this.appDomain = appDomain;\n    this.scopes = scopes;\n    this.redirectPath = redirectPath;\n    this.manifestPath = manifestPath;\n    this.coreNode = coreNode;\n    this.authenticatorURL = authenticatorURL;\n  }\n\n  /**\n   * The location to which the authenticator should\n   * redirect the user.\n   * @returns {string} - URI\n   */\n  redirectURI(): string {\n    return `${this.appDomain}${this.redirectPath}`;\n  }\n\n  /**\n   * The location of the app's manifest file.\n   * @returns {string} - URI\n   */\n  manifestURI(): string {\n    return `${this.appDomain}${this.manifestPath}`;\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,uBAAuB,QAAmB,aAAa;AAC/E,SAASC,eAAe,QAAQ,gBAAgB;AAYhD,OAAM,MAAOC,SAAS;EAsDpBC,YAAA,EAOoD;IAAA,IAAAC,gBAAA;IAAA,IANlDC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmBP,aAAa,CAACU,KAAK,EAAE;IAAA,IACxCC,SAAA,GAAAJ,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,OAAAF,gBAAA,GAAgCH,eAAe,CAAC,UAAU,EAAE;MAAEU,iBAAiB,EAAE;IAAI,CAAE,CAAC,cAAAP,gBAAA,uBAAxDA,gBAAA,CAC5BQ,MAAM;IAAA,IACVC,YAAY,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IACjBQ,YAAY,GAAAR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,gBAAgB;IAAA,IAC/BS,QAAA,GAAAT,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+BE,SAAS;IAAA,IACxCQ,gBAAA,GAAAV,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA2BN,uBAAuB;IAElD,IAAI,CAACU,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACL,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACQ,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,gBAAgB,GAAGA,gBAAgB;EAC1C;EAOAC,WAAWA,CAAA;IACT,OAAO,GAAG,IAAI,CAACP,SAAS,GAAG,IAAI,CAACG,YAAY,EAAE;EAChD;EAMAK,WAAWA,CAAA;IACT,OAAO,GAAG,IAAI,CAACR,SAAS,GAAG,IAAI,CAACI,YAAY,EAAE;EAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}