{"ast":null,"code":"import { InvalidDIDError } from '@stacks/common';\nexport function makeDIDFromAddress(address) {\n  return `did:btc-addr:${address}`;\n}\nexport function makeDIDFromPublicKey(publicKey) {\n  return `did:ecdsa-pub:${publicKey}`;\n}\nexport function getDIDType(decentralizedID) {\n  const didParts = decentralizedID.split(':');\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n  return didParts[1].toLowerCase();\n}\nexport function getAddressFromDID(decentralizedID) {\n  if (decentralizedID) {\n    const didType = getDIDType(decentralizedID);\n    if (didType === 'btc-addr') {\n      return decentralizedID.split(':')[2];\n    } else {\n      return undefined;\n    }\n  }\n  return undefined;\n}","map":{"version":3,"names":["InvalidDIDError","makeDIDFromAddress","address","makeDIDFromPublicKey","publicKey","getDIDType","decentralizedID","didParts","split","length","toLowerCase","getAddressFromDID","didType","undefined"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\auth\\src\\dids.ts"],"sourcesContent":["import { InvalidDIDError } from '@stacks/common';\n\n/**\n * @ignore\n */\nexport function makeDIDFromAddress(address: string) {\n  return `did:btc-addr:${address}`;\n}\n\n/**\n * @ignore\n */\nexport function makeDIDFromPublicKey(publicKey: string) {\n  return `did:ecdsa-pub:${publicKey}`;\n}\n\n/**\n * @ignore\n */\nexport function getDIDType(decentralizedID: string) {\n  const didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\n\n/**\n * @ignore\n */\nexport function getAddressFromDID(decentralizedID?: string): string | undefined {\n  if (decentralizedID) {\n    const didType = getDIDType(decentralizedID);\n    if (didType === 'btc-addr') {\n      return decentralizedID.split(':')[2];\n    } else {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n\n/*\nexport function getPublicKeyOrAddressFromDID(decentralizedID) {\n  const didParts = decentralizedID.split(':')\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts')\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"')\n  }\n\n  if (didParts[1].toLowerCase() === 'ecdsa-pub') {\n    return didParts[2]\n  } else if (didParts[1].toLowerCase() === 'btc-addr') {\n    return didParts[2]\n  } else {\n    throw new InvalidDIDError('Decentralized ID format not supported')\n  }\n}\n*/\n"],"mappings":"AAAA,SAASA,eAAe,QAAQ,gBAAgB;AAKhD,OAAM,SAAUC,kBAAkBA,CAACC,OAAe;EAChD,OAAO,gBAAgBA,OAAO,EAAE;AAClC;AAKA,OAAM,SAAUC,oBAAoBA,CAACC,SAAiB;EACpD,OAAO,iBAAiBA,SAAS,EAAE;AACrC;AAKA,OAAM,SAAUC,UAAUA,CAACC,eAAuB;EAChD,MAAMC,QAAQ,GAAGD,eAAe,CAACE,KAAK,CAAC,GAAG,CAAC;EAE3C,IAAID,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;IACzB,MAAM,IAAIT,eAAe,CAAC,qCAAqC,CAAC;;EAGlE,IAAIO,QAAQ,CAAC,CAAC,CAAC,CAACG,WAAW,EAAE,KAAK,KAAK,EAAE;IACvC,MAAM,IAAIV,eAAe,CAAC,yCAAyC,CAAC;;EAGtE,OAAOO,QAAQ,CAAC,CAAC,CAAC,CAACG,WAAW,EAAE;AAClC;AAKA,OAAM,SAAUC,iBAAiBA,CAACL,eAAwB;EACxD,IAAIA,eAAe,EAAE;IACnB,MAAMM,OAAO,GAAGP,UAAU,CAACC,eAAe,CAAC;IAC3C,IAAIM,OAAO,KAAK,UAAU,EAAE;MAC1B,OAAON,eAAe,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACrC,MAAM;MACL,OAAOK,SAAS;;;EAGpB,OAAOA,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}