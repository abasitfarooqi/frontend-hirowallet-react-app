{"ast":null,"code":"import 'cross-fetch/polyfill';\nconst defaultFetchOpts = {\n  referrerPolicy: 'origin'\n};\nexport const getFetchOptions = () => {\n  return defaultFetchOpts;\n};\nexport const setFetchOptions = ops => {\n  return Object.assign(defaultFetchOpts, ops);\n};\nexport async function fetchWrapper(input, init) {\n  const fetchOpts = {};\n  Object.assign(fetchOpts, init, defaultFetchOpts);\n  const fetchResult = await fetch(input, fetchOpts);\n  return fetchResult;\n}\nexport function hostMatches(host, pattern) {\n  if (typeof pattern === 'string') return pattern === host;\n  return pattern.exec(host);\n}\nexport function createApiKeyMiddleware(_ref) {\n  let {\n    apiKey,\n    host = /(.*)api(.*)\\.stacks\\.co$/i,\n    httpHeader = 'x-api-key'\n  } = _ref;\n  return {\n    pre: context => {\n      const reqUrl = new URL(context.url);\n      if (!hostMatches(reqUrl.host, host)) return;\n      const headers = new Headers(context.init.headers);\n      headers.set(httpHeader, apiKey);\n      context.init.headers = headers;\n    }\n  };\n}\nfunction argsForCreateFetchFn(args) {\n  let fetchLib = fetchWrapper;\n  let middlewares = [];\n  if (args.length > 0 && typeof args[0] === 'function') {\n    fetchLib = args.shift();\n  }\n  if (args.length > 0) {\n    middlewares = args;\n  }\n  return {\n    fetchLib,\n    middlewares\n  };\n}\nexport function createFetchFn() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const {\n    fetchLib,\n    middlewares\n  } = argsForCreateFetchFn(args);\n  const fetchFn = async (url, init) => {\n    let fetchParams = {\n      url,\n      init: init !== null && init !== void 0 ? init : {}\n    };\n    for (const middleware of middlewares) {\n      if (typeof middleware.pre === 'function') {\n        const result = await Promise.resolve(middleware.pre({\n          fetch: fetchLib,\n          ...fetchParams\n        }));\n        fetchParams = result !== null && result !== void 0 ? result : fetchParams;\n      }\n    }\n    let response = await fetchLib(fetchParams.url, fetchParams.init);\n    for (const middleware of middlewares) {\n      if (typeof middleware.post === 'function') {\n        var _response$clone, _response;\n        const result = await Promise.resolve(middleware.post({\n          fetch: fetchLib,\n          url: fetchParams.url,\n          init: fetchParams.init,\n          response: (_response$clone = (_response = response) === null || _response === void 0 ? void 0 : _response.clone()) !== null && _response$clone !== void 0 ? _response$clone : response\n        }));\n        response = result !== null && result !== void 0 ? result : response;\n      }\n    }\n    return response;\n  };\n  return fetchFn;\n}","map":{"version":3,"names":["defaultFetchOpts","referrerPolicy","getFetchOptions","setFetchOptions","ops","Object","assign","fetchWrapper","input","init","fetchOpts","fetchResult","fetch","hostMatches","host","pattern","exec","createApiKeyMiddleware","_ref","apiKey","httpHeader","pre","context","reqUrl","URL","url","headers","Headers","set","argsForCreateFetchFn","args","fetchLib","middlewares","length","shift","createFetchFn","_len","arguments","Array","_key","fetchFn","fetchParams","middleware","result","Promise","resolve","response","post","_response$clone","_response","clone"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\network\\src\\fetch.ts"],"sourcesContent":["import 'cross-fetch/polyfill';\n\n// Define a default request options and allow modification using getters, setters\n// Reference: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\nconst defaultFetchOpts: RequestInit = {\n  // By default referrer value will be client:origin: above reference link\n  referrerPolicy: 'origin', // Use origin value for referrer policy\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\n};\n\n/**\n * Get fetch options\n * @category Network\n */\nexport const getFetchOptions = () => {\n  return defaultFetchOpts;\n};\n\n/**\n * Sets global fetch options for stacks.js network calls.\n *\n * @example\n * Users can change the default referrer as well as other options when fetch is used internally by stacks.js:\n * ```\n * setFetchOptions({ referrer: 'no-referrer', referrerPolicy: 'no-referrer', ...otherRequestOptions });\n * ```\n * After calling {@link setFetchOptions} all subsequent network calls will use the specified options above.\n *\n * @see MDN Request: https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n * @returns global fetch options after merging with previous options (or defaults)\n * @category Network\n * @related {@link getFetchOptions}\n */\nexport const setFetchOptions = (ops: RequestInit): RequestInit => {\n  return Object.assign(defaultFetchOpts, ops);\n};\n\n/** @internal */\nexport async function fetchWrapper(input: RequestInfo, init?: RequestInit): Promise<Response> {\n  const fetchOpts = {};\n  // Use the provided options in request options along with default or user provided values\n  Object.assign(fetchOpts, init, defaultFetchOpts);\n\n  const fetchResult = await fetch(input, fetchOpts);\n  return fetchResult;\n}\n\nexport type FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\n\nexport interface RequestContext {\n  fetch: FetchFn;\n  url: string;\n  init: RequestInit;\n}\n\nexport interface ResponseContext {\n  fetch: FetchFn;\n  url: string;\n  init: RequestInit;\n  response: Response;\n}\n\nexport interface FetchParams {\n  url: string;\n  init: RequestInit;\n}\n\nexport interface FetchMiddleware {\n  pre?: (context: RequestContext) => PromiseLike<FetchParams | void> | FetchParams | void;\n  post?: (context: ResponseContext) => Promise<Response | void> | Response | void;\n}\nexport interface ApiKeyMiddlewareOpts {\n  /** The middleware / API key header will only be added to requests matching this host. */\n  host?: RegExp | string;\n  /** The http header name used for specifying the API key value. */\n  httpHeader?: string;\n  /** The API key string to specify as an http header value. */\n  apiKey: string;\n}\n\n/** @internal */\nexport function hostMatches(host: string, pattern: string | RegExp) {\n  if (typeof pattern === 'string') return pattern === host;\n  return (pattern as RegExp).exec(host);\n}\n\n/**\n * Creates a new middleware from an API key.\n * @example\n * ```\n * const apiMiddleware = createApiKeyMiddleware(\"example_e8e044a3_41d8b0fe_3dd3988ef302\");\n * const fetchFn = createFetchFn(apiMiddleware);\n * const network = new StacksMainnet({ fetchFn });\n * ```\n * @category Network\n * @related {@link createFetchFn}, {@link StacksNetwork}\n */\nexport function createApiKeyMiddleware({\n  apiKey,\n  host = /(.*)api(.*)\\.stacks\\.co$/i,\n  httpHeader = 'x-api-key',\n}: ApiKeyMiddlewareOpts): FetchMiddleware {\n  return {\n    pre: context => {\n      const reqUrl = new URL(context.url);\n      if (!hostMatches(reqUrl.host, host)) return; // Skip middleware if host does not match pattern\n\n      const headers = new Headers(context.init.headers);\n      headers.set(httpHeader, apiKey);\n      context.init.headers = headers;\n    },\n  };\n}\n\nfunction argsForCreateFetchFn(args: any[]): { fetchLib: FetchFn; middlewares: FetchMiddleware[] } {\n  let fetchLib: FetchFn = fetchWrapper;\n  let middlewares: FetchMiddleware[] = [];\n  if (args.length > 0 && typeof args[0] === 'function') {\n    fetchLib = args.shift();\n  }\n  if (args.length > 0) {\n    middlewares = args; // remaining args\n  }\n  return { fetchLib, middlewares };\n}\n\n/**\n * Creates a new network fetching function, which combines an optional fetch-compatible library with optional middlware.\n * @example\n * ```\n * const customFetch = createFetchFn(someMiddleware)\n * const customFetch = createFetchFn(fetch, someMiddleware)\n * const customFetch = createFetchFn(fetch, middlewareA, middlewareB)\n * ```\n * @category Network\n */\nexport function createFetchFn(fetchLib: FetchFn, ...middleware: FetchMiddleware[]): FetchFn;\nexport function createFetchFn(...middleware: FetchMiddleware[]): FetchFn;\nexport function createFetchFn(...args: any[]): FetchFn {\n  const { fetchLib, middlewares } = argsForCreateFetchFn(args);\n\n  const fetchFn = async (url: string, init?: RequestInit | undefined): Promise<Response> => {\n    let fetchParams = { url, init: init ?? {} };\n\n    for (const middleware of middlewares) {\n      if (typeof middleware.pre === 'function') {\n        const result = await Promise.resolve(\n          middleware.pre({\n            fetch: fetchLib,\n            ...fetchParams,\n          })\n        );\n        fetchParams = result ?? fetchParams;\n      }\n    }\n\n    let response = await fetchLib(fetchParams.url, fetchParams.init);\n\n    for (const middleware of middlewares) {\n      if (typeof middleware.post === 'function') {\n        const result = await Promise.resolve(\n          middleware.post({\n            fetch: fetchLib,\n            url: fetchParams.url,\n            init: fetchParams.init,\n            response: response?.clone() ?? response,\n          })\n        );\n        response = result ?? response;\n      }\n    }\n    return response;\n  };\n  return fetchFn;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}