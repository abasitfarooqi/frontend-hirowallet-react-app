{"ast":null,"code":"\"use strict\";\n\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\nfunction assertNumber(n) {\n  if (!Number.isSafeInteger(n)) throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction chain() {\n  const wrap = (a, b) => c => a(b(c));\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const encode = Array.from(args).reverse().reduce((acc, i) => acc ? wrap(acc, i.encode) : i.encode, undefined);\n  const decode = args.reduce((acc, i) => acc ? wrap(acc, i.decode) : i.decode, undefined);\n  return {\n    encode,\n    decode\n  };\n}\nfunction alphabet(alphabet) {\n  return {\n    encode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('alphabet.encode input should be an array of numbers');\n      return digits.map(i => {\n        assertNumber(i);\n        if (i < 0 || i >= alphabet.length) throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n        return alphabet[i];\n      });\n    },\n    decode: input => {\n      if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('alphabet.decode input should be array of strings');\n      return input.map(letter => {\n        if (typeof letter !== 'string') throw new Error(`alphabet.decode: not string element=${letter}`);\n        const index = alphabet.indexOf(letter);\n        if (index === -1) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n        return index;\n      });\n    }\n  };\n}\nfunction join() {\n  let separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  if (typeof separator !== 'string') throw new Error('join separator should be string');\n  return {\n    encode: from => {\n      if (!Array.isArray(from) || from.length && typeof from[0] !== 'string') throw new Error('join.encode input should be array of strings');\n      for (let i of from) if (typeof i !== 'string') throw new Error(`join.encode: non-string input=${i}`);\n      return from.join(separator);\n    },\n    decode: to => {\n      if (typeof to !== 'string') throw new Error('join.decode input should be string');\n      return to.split(separator);\n    }\n  };\n}\nfunction padding(bits) {\n  let chr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '=';\n  assertNumber(bits);\n  if (typeof chr !== 'string') throw new Error('padding chr should be string');\n  return {\n    encode(data) {\n      if (!Array.isArray(data) || data.length && typeof data[0] !== 'string') throw new Error('padding.encode input should be array of strings');\n      for (let i of data) if (typeof i !== 'string') throw new Error(`padding.encode: non-string input=${i}`);\n      while (data.length * bits % 8) data.push(chr);\n      return data;\n    },\n    decode(input) {\n      if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('padding.encode input should be array of strings');\n      for (let i of input) if (typeof i !== 'string') throw new Error(`padding.decode: non-string input=${i}`);\n      let end = input.length;\n      if (end * bits % 8) throw new Error('Invalid padding: string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        if (!((end - 1) * bits % 8)) throw new Error('Invalid padding: string has too much padding');\n      }\n      return input.slice(0, end);\n    }\n  };\n}\nfunction normalize(fn) {\n  if (typeof fn !== 'function') throw new Error('normalize fn should be function');\n  return {\n    encode: from => from,\n    decode: to => fn(to)\n  };\n}\nfunction convertRadix(data, from, to) {\n  if (from < 2) throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n  if (!Array.isArray(data)) throw new Error('convertRadix: data should be array');\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data);\n  digits.forEach(d => {\n    assertNumber(d);\n    if (d < 0 || d >= from) throw new Error(`Wrong integer: ${d}`);\n  });\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < digits.length; i++) {\n      const digit = digits[i];\n      const digitBase = from * carry + digit;\n      if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      carry = digitBase % to;\n      digits[i] = Math.floor(digitBase / to);\n      if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase) throw new Error('convertRadix: carry overflow');\n      if (!done) continue;else if (!digits[i]) pos = i;else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\nconst gcd = (a, b) => !b ? a : gcd(b, a % b);\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n  if (!Array.isArray(data)) throw new Error('convertRadix2: data should be array');\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n  }\n  let carry = 0;\n  let pos = 0;\n  const mask = 2 ** to - 1;\n  const res = [];\n  for (const n of data) {\n    assertNumber(n);\n    if (n >= 2 ** from) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = carry << from | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push((carry >> pos - to & mask) >>> 0);\n    carry &= 2 ** pos - 1;\n  }\n  carry = carry << to - pos & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\nfunction radix(num) {\n  assertNumber(num);\n  return {\n    encode: bytes => {\n      if (!(bytes instanceof Uint8Array)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), 2 ** 8, num);\n    },\n    decode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix.decode input should be array of strings');\n      return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n    }\n  };\n}\nfunction radix2(bits) {\n  let revPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  assertNumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error('radix2: carry overflow');\n  return {\n    encode: bytes => {\n      if (!(bytes instanceof Uint8Array)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix2.decode input should be array of strings');\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    }\n  };\n}\nfunction unsafeWrapper(fn) {\n  if (typeof fn !== 'function') throw new Error('unsafeWrapper fn should be function');\n  return function () {\n    try {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\nfunction checksum(len, fn) {\n  assertNumber(len);\n  if (typeof fn !== 'function') throw new Error('checksum fn should be function');\n  return {\n    encode(data) {\n      if (!(data instanceof Uint8Array)) throw new Error('checksum.encode: input should be Uint8Array');\n      const checksum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(checksum, data.length);\n      return res;\n    },\n    decode(data) {\n      if (!(data instanceof Uint8Array)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const newChecksum = fn(payload).slice(0, len);\n      const oldChecksum = data.slice(-len);\n      for (let i = 0; i < len; i++) if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    }\n  };\n}\nexports.utils = {\n  alphabet,\n  chain,\n  checksum,\n  radix,\n  radix2,\n  join,\n  padding\n};\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize(s => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = abc => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n  encode(data) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n    }\n    return res;\n  },\n  decode(str) {\n    let res = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = exports.base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  }\n};\nconst base58check = sha256 => chain(checksum(4, data => sha256(sha256(data))), exports.base58);\nexports.base58check = base58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];\n  }\n  return chk;\n}\nfunction bechChecksum(prefix, words) {\n  let encodingConst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ c >> 5;\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 0x1f;\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n  function encode(prefix, words) {\n    let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 90;\n    if (typeof prefix !== 'string') throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n    if (!Array.isArray(words) || words.length && typeof words[0] !== 'number') throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n    const actualLength = prefix.length + 7 + words.length;\n    if (limit !== false && actualLength > limit) throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    prefix = prefix.toLowerCase();\n    return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n  }\n  function decode(str) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 90;\n    if (typeof str !== 'string') throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n    if (str.length < 8 || limit !== false && str.length > limit) throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase()) throw new Error(`String must be lowercase or uppercase`);\n    str = lowered;\n    const sepIndex = str.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1) throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = str.slice(0, sepIndex);\n    const _words = str.slice(sepIndex + 1);\n    if (_words.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!_words.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return {\n      prefix,\n      words\n    };\n  }\n  const decodeUnsafe = unsafeWrapper(decode);\n  function decodeToBytes(str) {\n    const {\n      prefix,\n      words\n    } = decode(str, false);\n    return {\n      prefix,\n      words,\n      bytes: fromWords(words)\n    };\n  }\n  return {\n    encode,\n    decode,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords\n  };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n  encode: data => new TextDecoder().decode(data),\n  decode: str => new TextEncoder().encode(str)\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize(s => {\n  if (typeof s !== 'string' || s.length % 2) throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n  return s.toLowerCase();\n}));\nconst CODERS = {\n  utf8: exports.utf8,\n  hex: exports.hex,\n  base16: exports.base16,\n  base32: exports.base32,\n  base64: exports.base64,\n  base64url: exports.base64url,\n  base58: exports.base58,\n  base58xmr: exports.base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!(bytes instanceof Uint8Array)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString;\nconst stringToBytes = (type, str) => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;","map":{"version":3,"names":["Object","defineProperty","exports","value","bytes","stringToBytes","str","bytesToString","hex","utf8","bech32m","bech32","base58check","base58xmr","base58xrp","base58flickr","base58","base64url","base64","base32crockford","base32hex","base32","base16","utils","assertNumber","n","Number","isSafeInteger","Error","chain","wrap","a","b","c","_len","arguments","length","args","Array","_key","encode","from","reverse","reduce","acc","i","undefined","decode","alphabet","digits","isArray","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","Uint8Array","radix2","revPadding","unsafeWrapper","_len2","_key2","apply","e","checksum","len","set","payload","newChecksum","oldChecksum","s","toUpperCase","replace","genBase58","abc","XMR_BLOCK_LEN","block","subarray","padStart","blockLen","j","concat","sha256","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","TextDecoder","TextEncoder","CODERS","coderTypeError","keys","type","hasOwnProperty"],"sources":["C:/Users/abasi/Desktop/web3-apps/react-cra/node_modules/@scure/base/lib/index.js"],"sourcesContent":["\"use strict\";\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexports.utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = exports.base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\nexports.base58check = base58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString;\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}