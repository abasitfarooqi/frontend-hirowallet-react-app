{"ast":null,"code":"import { asciiToBytes, hexToBytes, utf8ToBytes } from '@stacks/common';\nimport { boolCV, bufferCV, contractPrincipalCV, deserializeCV, intCV, listCV, noneCV, responseErrorCV, responseOkCV, serializeCV, someCV, standardPrincipalCV, stringAsciiCV, stringUtf8CV, tupleCV, uintCV } from './clarity';\nexport const bool = boolCV;\nexport const int = intCV;\nexport const uint = uintCV;\nexport const contractPrincipal = contractPrincipalCV;\nexport const standardPrincipal = standardPrincipalCV;\nexport const list = listCV;\nexport const stringAscii = stringAsciiCV;\nexport const stringUtf8 = stringUtf8CV;\nexport const buffer = bufferCV;\nexport const bufferFromHex = hex => bufferCV(hexToBytes(hex));\nexport const bufferFromAscii = ascii => bufferCV(asciiToBytes(ascii));\nexport const bufferFromUtf8 = utf8 => bufferCV(utf8ToBytes(utf8));\nexport const none = noneCV;\nexport const some = someCV;\nexport const ok = responseOkCV;\nexport const error = responseErrorCV;\nexport const tuple = tupleCV;\nexport const serialize = serializeCV;\nexport const deserialize = deserializeCV;","map":{"version":3,"names":["asciiToBytes","hexToBytes","utf8ToBytes","boolCV","bufferCV","contractPrincipalCV","deserializeCV","intCV","listCV","noneCV","responseErrorCV","responseOkCV","serializeCV","someCV","standardPrincipalCV","stringAsciiCV","stringUtf8CV","tupleCV","uintCV","bool","int","uint","contractPrincipal","standardPrincipal","list","stringAscii","stringUtf8","buffer","bufferFromHex","hex","bufferFromAscii","ascii","bufferFromUtf8","utf8","none","some","ok","error","tuple","serialize","deserialize"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\transactions\\src\\cl.ts"],"sourcesContent":["import { asciiToBytes, hexToBytes, utf8ToBytes } from '@stacks/common';\nimport {\n  BufferCV,\n  boolCV,\n  bufferCV,\n  contractPrincipalCV,\n  deserializeCV,\n  intCV,\n  listCV,\n  noneCV,\n  responseErrorCV,\n  responseOkCV,\n  serializeCV,\n  someCV,\n  standardPrincipalCV,\n  stringAsciiCV,\n  stringUtf8CV,\n  tupleCV,\n  uintCV,\n} from './clarity';\n\n// todo: https://github.com/hirosystems/clarinet/issues/786\n\n// Primitives //////////////////////////////////////////////////////////////////\n/**\n * `Cl.bool` — Creates a Clarity boolean type, represented as a JS object\n *\n * Alias for {@link boolCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const bool = boolCV;\n/**\n * `Cl.int` — Creates a Clarity `int` type, represented as a JS object\n *\n * Alias for {@link intCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const int = intCV;\n/**\n * `Cl.uInt` — Creates a Clarity `uint` type, represented as a JS object\n *\n * Alias for {@link uintCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const uint = uintCV;\n/**\n * `Cl.contractPrincipal` — Creates a Clarity contract `principal` type, represented as a JS object\n *\n * Alias for {@link contractPrincipalCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const contractPrincipal = contractPrincipalCV;\n/**\n * `Cl.standardPrincipal` — Creates a Clarity standard `principal` type, represented as a JS object\n *\n * Alias for {@link standardPrincipalCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const standardPrincipal = standardPrincipalCV;\n// todo: add .principal method that detects `.` inside string for both standard and contract principals\n\n// Sequences ///////////////////////////////////////////////////////////////////\n/**\n * `Cl.list` — Creates a Clarity `list` type, represented as a JS object\n *\n * Alias for {@link listCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const list = listCV;\n/**\n * `Cl.stringAscii` — Creates a Clarity `string-ascii` type, represented as a JS object\n *\n * Alias for {@link stringAsciiCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const stringAscii = stringAsciiCV;\n/**\n * `Cl.stringUtf8` — Creates a Clarity `string-utf8` type, represented as a JS object\n *\n * Alias for {@link stringUtf8CV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const stringUtf8 = stringUtf8CV;\n/**\n * `Cl.buffer` — Creates a Clarity `buffer` type, represented as a JS object\n *\n * Alias for {@link bufferCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const buffer = bufferCV;\n/**\n * `Cl.bufferFromHex` — Converts bytes (from a hex string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as a hex string\n * @returns input encoded as a {@link BufferCV}\n */\nexport const bufferFromHex = (hex: string) => bufferCV(hexToBytes(hex));\n/**\n * `Cl.bufferFromAscii` — Converts bytes (from an ASCII string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as an ASCII string\n * @returns input encoded as a {@link BufferCV}\n */\nexport const bufferFromAscii = (ascii: string) => bufferCV(asciiToBytes(ascii));\n/**\n * `Cl.bufferFromUtf8` — Converts bytes (from an UTF-8 string) to a Clarity `buffer` type, represented as a JS object\n * @param hex bytes encoded as a UTF-8 string\n * @returns input encoded as a {@link BufferCV}\n */\nexport const bufferFromUtf8 = (utf8: string) => bufferCV(utf8ToBytes(utf8));\n\n// Composites //////////////////////////////////////////////////////////////////\n/**\n * `Cl.none` — Creates a Clarity optional `none` type, represented as a JS object\n *\n * Alias for {@link noneCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const none = noneCV;\n/**\n * `Cl.some` — Creates a Clarity optional `some` type, represented as a JS object\n *\n * Alias for {@link someCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const some = someCV;\n/**\n * `Cl.ok` — Creates a Clarity response `ok` type, represented as a JS object\n *\n * Alias for {@link responseOkCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const ok = responseOkCV;\n/**\n * `Cl.error` — Creates a Clarity response `error` type, represented as a JS object\n *\n * Alias for {@link responseErrorCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const error = responseErrorCV;\n/**\n * `Cl.tuple` — Creates a Clarity `tuple` type, represented as a JS object\n *\n * Alias for {@link tupleCV}\n * @see {@link serialize}, {@link deserialize}\n */\nexport const tuple = tupleCV;\n\n// Methods /////////////////////////////////////////////////////////////////////\n/**\n * `Cl.serialize` — Serializes a Clarity JS object to the equivalent hex-encoded representation\n *\n * Alias for {@link serializeCV}\n * @see {@link deserialize}\n */\nexport const serialize = serializeCV;\n/**\n * `Cl.deserialize` — Deserializes a hex string to the equivalent Clarity JS object\n *\n * Alias for {@link deserializeCV}\n * @see {@link serialize}\n */\nexport const deserialize = deserializeCV;\n\n// todo: add `deserializeReadable` methods that translates enums into name strings\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,EAAEC,WAAW,QAAQ,gBAAgB;AACtE,SAEEC,MAAM,EACNC,QAAQ,EACRC,mBAAmB,EACnBC,aAAa,EACbC,KAAK,EACLC,MAAM,EACNC,MAAM,EACNC,eAAe,EACfC,YAAY,EACZC,WAAW,EACXC,MAAM,EACNC,mBAAmB,EACnBC,aAAa,EACbC,YAAY,EACZC,OAAO,EACPC,MAAM,QACD,WAAW;AAWlB,OAAO,MAAMC,IAAI,GAAGhB,MAAM;AAO1B,OAAO,MAAMiB,GAAG,GAAGb,KAAK;AAOxB,OAAO,MAAMc,IAAI,GAAGH,MAAM;AAO1B,OAAO,MAAMI,iBAAiB,GAAGjB,mBAAmB;AAOpD,OAAO,MAAMkB,iBAAiB,GAAGT,mBAAmB;AAUpD,OAAO,MAAMU,IAAI,GAAGhB,MAAM;AAO1B,OAAO,MAAMiB,WAAW,GAAGV,aAAa;AAOxC,OAAO,MAAMW,UAAU,GAAGV,YAAY;AAOtC,OAAO,MAAMW,MAAM,GAAGvB,QAAQ;AAM9B,OAAO,MAAMwB,aAAa,GAAIC,GAAW,IAAKzB,QAAQ,CAACH,UAAU,CAAC4B,GAAG,CAAC,CAAC;AAMvE,OAAO,MAAMC,eAAe,GAAIC,KAAa,IAAK3B,QAAQ,CAACJ,YAAY,CAAC+B,KAAK,CAAC,CAAC;AAM/E,OAAO,MAAMC,cAAc,GAAIC,IAAY,IAAK7B,QAAQ,CAACF,WAAW,CAAC+B,IAAI,CAAC,CAAC;AAS3E,OAAO,MAAMC,IAAI,GAAGzB,MAAM;AAO1B,OAAO,MAAM0B,IAAI,GAAGtB,MAAM;AAO1B,OAAO,MAAMuB,EAAE,GAAGzB,YAAY;AAO9B,OAAO,MAAM0B,KAAK,GAAG3B,eAAe;AAOpC,OAAO,MAAM4B,KAAK,GAAGrB,OAAO;AAS5B,OAAO,MAAMsB,SAAS,GAAG3B,WAAW;AAOpC,OAAO,MAAM4B,WAAW,GAAGlC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}