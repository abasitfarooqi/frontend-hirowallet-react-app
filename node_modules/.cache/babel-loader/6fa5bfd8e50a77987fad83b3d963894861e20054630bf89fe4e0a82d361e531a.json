{"ast":null,"code":"function formatAccount(serviceName, data) {\n  let proofUrl;\n  if (data.proof && data.proof.url) {\n    proofUrl = data.proof.url;\n  }\n  return {\n    '@type': 'Account',\n    service: serviceName,\n    identifier: data.username,\n    proofType: 'http',\n    proofUrl\n  };\n}\nexport function getPersonFromLegacyFormat(profile) {\n  const profileData = {\n    '@type': 'Person'\n  };\n  if (profile) {\n    if (profile.name && profile.name.formatted) {\n      profileData.name = profile.name.formatted;\n    }\n    if (profile.bio) {\n      profileData.description = profile.bio;\n    }\n    if (profile.location && profile.location.formatted) {\n      profileData.address = {\n        '@type': 'PostalAddress',\n        addressLocality: profile.location.formatted\n      };\n    }\n    const images = [];\n    if (profile.avatar && profile.avatar.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'avatar',\n        contentUrl: profile.avatar.url\n      });\n    }\n    if (profile.cover && profile.cover.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'cover',\n        contentUrl: profile.cover.url\n      });\n    }\n    if (images.length) {\n      profileData.image = images;\n    }\n    if (profile.website) {\n      profileData.website = [{\n        '@type': 'WebSite',\n        url: profile.website\n      }];\n    }\n    const accounts = [];\n    if (profile.bitcoin && profile.bitcoin.address) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'payment',\n        service: 'bitcoin',\n        identifier: profile.bitcoin.address\n      });\n    }\n    if (profile.twitter && profile.twitter.username) {\n      accounts.push(formatAccount('twitter', profile.twitter));\n    }\n    if (profile.facebook && profile.facebook.username) {\n      accounts.push(formatAccount('facebook', profile.facebook));\n    }\n    if (profile.github && profile.github.username) {\n      accounts.push(formatAccount('github', profile.github));\n    }\n    if (profile.auth) {\n      if (profile.auth.length > 0) {\n        if (profile.auth[0] && profile.auth[0].publicKeychain) {\n          accounts.push({\n            '@type': 'Account',\n            role: 'key',\n            service: 'bip32',\n            identifier: profile.auth[0].publicKeychain\n          });\n        }\n      }\n    }\n    if (profile.pgp && profile.pgp.url) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'key',\n        service: 'pgp',\n        identifier: profile.pgp.fingerprint,\n        contentUrl: profile.pgp.url\n      });\n    }\n    profileData.account = accounts;\n  }\n  return profileData;\n}","map":{"version":3,"names":["formatAccount","serviceName","data","proofUrl","proof","url","service","identifier","username","proofType","getPersonFromLegacyFormat","profile","profileData","name","formatted","bio","description","location","address","addressLocality","images","avatar","push","contentUrl","cover","length","image","website","accounts","bitcoin","role","twitter","facebook","github","auth","publicKeychain","pgp","fingerprint","account"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\profile\\src\\profileSchemas\\personLegacy.ts"],"sourcesContent":["import { ProfileType } from '../types';\n\n/**\n *\n * @param serviceName\n * @param data\n *\n * @ignore\n */\nfunction formatAccount(serviceName: string, data: any) {\n  let proofUrl;\n  if (data.proof && data.proof.url) {\n    proofUrl = data.proof.url;\n  }\n  return {\n    '@type': 'Account',\n    service: serviceName,\n    identifier: data.username,\n    proofType: 'http',\n    proofUrl,\n  };\n}\n\n/**\n *\n * @param profile\n *\n * @ignore\n */\nexport function getPersonFromLegacyFormat(profile: any) {\n  const profileData: {\n    ['@type']: ProfileType;\n    account?: any[];\n    name?: string;\n    description?: string;\n    address?: {\n      ['@type']: string;\n      addressLocality: string;\n    };\n    image?: any[];\n    website?: {\n      ['@type']: string;\n      url: string;\n    }[];\n  } = {\n    '@type': 'Person',\n  };\n\n  if (profile) {\n    if (profile.name && profile.name.formatted) {\n      profileData.name = profile.name.formatted;\n    }\n\n    if (profile.bio) {\n      profileData.description = profile.bio;\n    }\n\n    if (profile.location && profile.location.formatted) {\n      profileData.address = {\n        '@type': 'PostalAddress',\n        addressLocality: profile.location.formatted,\n      };\n    }\n\n    const images = [];\n    if (profile.avatar && profile.avatar.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'avatar',\n        contentUrl: profile.avatar.url,\n      });\n    }\n    if (profile.cover && profile.cover.url) {\n      images.push({\n        '@type': 'ImageObject',\n        name: 'cover',\n        contentUrl: profile.cover.url,\n      });\n    }\n    if (images.length) {\n      profileData.image = images;\n    }\n\n    if (profile.website) {\n      profileData.website = [\n        {\n          '@type': 'WebSite',\n          url: profile.website,\n        },\n      ];\n    }\n\n    const accounts = [];\n    if (profile.bitcoin && profile.bitcoin.address) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'payment',\n        service: 'bitcoin',\n        identifier: profile.bitcoin.address,\n      });\n    }\n    if (profile.twitter && profile.twitter.username) {\n      accounts.push(formatAccount('twitter', profile.twitter));\n    }\n    if (profile.facebook && profile.facebook.username) {\n      accounts.push(formatAccount('facebook', profile.facebook));\n    }\n    if (profile.github && profile.github.username) {\n      accounts.push(formatAccount('github', profile.github));\n    }\n\n    if (profile.auth) {\n      if (profile.auth.length > 0) {\n        if (profile.auth[0] && profile.auth[0].publicKeychain) {\n          accounts.push({\n            '@type': 'Account',\n            role: 'key',\n            service: 'bip32',\n            identifier: profile.auth[0].publicKeychain,\n          });\n        }\n      }\n    }\n    if (profile.pgp && profile.pgp.url) {\n      accounts.push({\n        '@type': 'Account',\n        role: 'key',\n        service: 'pgp',\n        identifier: profile.pgp.fingerprint,\n        contentUrl: profile.pgp.url,\n      });\n    }\n\n    profileData.account = accounts;\n  }\n\n  return profileData;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}