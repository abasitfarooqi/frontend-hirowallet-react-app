{"ast":null,"code":"const NAMESPACE = 'connect-ui';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = function (fnName) {\n  let tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  {\n    return () => {\n      return;\n    };\n  }\n};\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = v => v != null;\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n  var _a, _b, _c;\n  return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = function (nodeName, vnodeData) {\n  let child = null;\n  let simple = false;\n  let lastSimple = false;\n  const vNodeChildren = [];\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n        lastSimple = simple;\n      }\n    }\n  };\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n  walk(children);\n  if (vnodeData) {\n    {\n      const classData = vnodeData.className || vnodeData.class;\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n  return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = node => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    // redundant return here for better minification\n    return propValue;\n  }\n  // not sure exactly what type we want\n  // so no need to change to a different type\n  return propValue;\n};\nconst getElement = ref => getHostRef(ref).$hostElement$;\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n  if (supportsConstructableStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    if (typeof style === 'string') {\n      style = cssText;\n    } else {\n      style.replaceSync(cssText);\n    }\n  } else {\n    style = cssText;\n  }\n  styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  var _a;\n  let scopeId = getScopeId(cmpMeta);\n  const style = styles.get(scopeId);\n  // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n  styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n      if (!appliedStyles.has(scopeId)) {\n        {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          // Apply CSP nonce to the style tag if it exists\n          const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n          if (nonce != null) {\n            styleElm.setAttribute('nonce', nonce);\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n  return scopeId;\n};\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n  if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n  }\n  endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + cmp.$tagName$;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n    if (memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (!isProp && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n      if (oldValue) {\n        plt.rel(elm, memberName, oldValue, false);\n      }\n      if (newValue) {\n        plt.ael(elm, memberName, newValue, false);\n      }\n    } else {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            const n = newValue == null ? '' : newValue;\n            // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  }\n  // add new & update changed attributes\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  const newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  if (newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else {\n    // create element\n    elm = newVNode.$elm$ = doc.createElement(newVNode.$tag$);\n    // add css classes, attrs, props, listeners, etc.\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n    if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i);\n        // return node could have been null\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n  }\n  return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm;\n  let childNode;\n  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, before);\n      }\n    }\n  }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n * @param vnode a VNode\n * @param elm an element\n */\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$;\n      // remove the vnode's element from the dom\n      elm.remove();\n    }\n  }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // VNode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      // if the start nodes are the same then we should patch the new VNode\n      // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n      // indices to reflect that. We don't need to move any DOM Nodes around\n      // since things are matched up in order.\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      // likewise, if the end nodes are the same we patch new onto old and\n      // decrement our end indices, and also likewise in this case we don't\n      // need to move any DOM Nodes.\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      patch(oldStartVnode, newEndVnode);\n      // We need to move the element for `oldStartVnode` into a position which\n      // will be appropriate for `newEndVnode`. For this we can use\n      // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n      // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n      // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n      //\n      // <old-start-node />\n      // <some-intervening-node />\n      // <old-end-node />\n      // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n      // <next-sibling />\n      //\n      // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n      // the node for `oldStartVnode` at the end of the children of\n      // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n      // aren't any siblings, and passing `null` to `Node.insertBefore` will\n      // append it to the children of the parent element.\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      patch(oldEndVnode, newStartVnode);\n      // We've already checked above if `oldStartVnode` and `newStartVnode` are\n      // the same node, so since we're here we know that they are not. Thus we\n      // can move the element for `oldEndVnode` _before_ the element for\n      // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n      // future.\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      {\n        // We either didn't find an element in the old children that matches\n        // the key of the first new child OR the build is not using `key`\n        // attributes at all. In either case we need to create a new element\n        // for the new node.\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n      if (node) {\n        // if we created a new node then handle inserting it to the DOM\n        {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    // we have some more new nodes to add which don't match up with old nodes\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    // there are nodes in the `oldCh` array which no longer correspond to nodes\n    // in the new array, so lets remove them (which entails cleaning up the\n    // relevant DOM nodes)\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (leftVNode.$tag$ === rightVNode.$tag$) {\n    return true;\n  }\n  return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const text = newVNode.$text$;\n  if (text === null) {\n    {\n      {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      // so we need to call `updateChildren` to reconcile them\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      }\n      // add the new vnode children\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n  } else if (oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n */\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;\n  {\n    scopeId = hostElm['s-sc'];\n  }\n  // synchronous patch\n  patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n  }\n\n  if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n    hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n    return;\n  }\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n  // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n  return writeTask(dispatch);\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n  // updateComponent\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  const rc = elm['s-rc'];\n  if (isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n  const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n  {\n    callRender(hostRef, instance);\n  }\n  if (rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(cb => cb());\n    elm['s-rc'] = undefined;\n  }\n  endRender();\n  endUpdate();\n  {\n    const childrenPromises = elm['s-p'];\n    const postUpdate = () => postUpdateComponent(hostRef);\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n      childrenPromises.length = 0;\n    }\n  }\n};\nconst callRender = (hostRef, instance, elm) => {\n  try {\n    instance = instance.render();\n    {\n      hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n\n    {\n      hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n    }\n\n    {\n      {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        {\n          renderVdom(hostRef, instance);\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n  return null;\n};\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n    hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    endPostUpdate();\n  }\n  // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n    if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n    hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n  }\n  // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal);\n  // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n  if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n    if (instance) {\n      if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    // It's better to have a const than two Object.entries()\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(_ref => {\n      let [memberName, [memberFlags]] = _ref;\n      if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ || flags & 2 /* PROXY_FLAGS.proxyState */ && memberFlags & 32 /* MEMBER_FLAGS.State */) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      }\n    });\n  }\n  return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n  // initializeComponent\n  if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n    {\n      // we haven't initialized this element yet\n      hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n      // lazy loaded components\n      // request the component's implementation to be\n      // wired up with the host element\n      Cstr = loadModule(cmpMeta);\n      if (Cstr.then) {\n        // Await creates a micro-task avoid if possible\n        const endLoad = uniqueTime();\n        Cstr = await Cstr;\n        endLoad();\n      }\n      if (!Cstr.isProxied) {\n        proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n        Cstr.isProxied = true;\n      }\n      const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n      // ok, time to construct the instance\n      // but let's keep track of when we start and stop\n      // so that the getters/setters don't incorrectly step on data\n      {\n        hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n      }\n      // construct the lazy-loaded component implementation\n      // passing the hostRef is very important during\n      // construction in order to directly wire together the\n      // host element and the lazy-loaded instance\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e);\n      }\n      {\n        hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n      }\n\n      endNewInstance();\n    }\n    if (Cstr.style) {\n      // this component has styles but we haven't registered them yet\n      let style = Cstr.style;\n      const scopeId = getScopeId(cmpMeta);\n      if (!styles.has(scopeId)) {\n        const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n        registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n        endRegisterStyles();\n      }\n    }\n  }\n  // we've successfully created a lazy instance\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  const schedule = () => scheduleUpdate(hostRef, true);\n  if (ancestorComponent && ancestorComponent['s-rc']) {\n    // this is the initial load and this component it has an ancestor component\n    // but the ancestor component has NOT fired its will update lifecycle yet\n    // so let's just cool our jets and wait for the ancestor to continue first\n    // this will get fired off when the ancestor component\n    // finally gets around to rendering its lazy self\n    // fire off the initial update\n    ancestorComponent['s-rc'].push(schedule);\n  } else {\n    schedule();\n  }\n};\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n    if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      }\n      // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(_ref2 => {\n          let [memberName, [memberFlags]] = _ref2;\n          if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    }\n    endConnected();\n  }\n};\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n    getHostRef(elm);\n  }\n};\nconst bootstrapLazy = function (lazyBundles) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      const tagName = cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n          if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            {\n              {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            }\n          }\n        }\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n      };\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n      }\n    });\n  });\n\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    // Apply CSP nonce to the style tag if it exists\n    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n    if (nonce != null) {\n      visibilityStyle.setAttribute('nonce', nonce);\n    }\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  }\n  // Process deferred connectedCallbacks now all components have been registered\n  isBootstrapping = false;\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  }\n  // Fallback appLoad event\n  endBootstrap();\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = nonce => plt.$nonce$ = nonce;\nconst hostRefs = /*@__PURE__*/new WeakMap();\nconst getHostRef = ref => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n  if (module) {\n    return module[exportName];\n  }\n  if (!hmrVersionId || !BUILD.hotModuleReplacement) {\n    const processMod = importedModule => {\n      cmpModules.set(bundleId, importedModule);\n      return importedModule[exportName];\n    };\n    switch (bundleId) {\n      case 'connect-modal':\n        return import( /* webpackMode: \"lazy\" */\n        './connect-modal.entry.js').then(processMod, consoleError);\n    }\n  }\n  return import( /* @vite-ignore */\n  /* webpackInclude: /\\.entry\\.js$/ */\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${''}`).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\nconst styles = /*@__PURE__*/new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\nconst promiseResolve = v => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replaceSync === 'function';\n  } catch (e) {}\n  return false;\n})();\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n  if (!queuePending) {\n    queuePending = true;\n    if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  queue.length = 0;\n};\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads);\n  // DOM WRITES!!!\n  {\n    consume(queueDomWrites);\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { bootstrapLazy as b, getElement as g, h, promiseResolve as p, registerInstance as r, setNonce as s };","map":{"version":3,"names":["NAMESPACE","scopeId","hostTagName","isSvgMode","queuePending","createTime","fnName","tagName","arguments","length","undefined","uniqueTime","key","measureText","HYDRATED_CSS","EMPTY_OBJ","isDef","v","isComplexType","o","queryNonceMetaTagContent","doc","_a","_b","_c","head","querySelector","getAttribute","h","nodeName","vnodeData","child","simple","lastSimple","vNodeChildren","walk","c","i","Array","isArray","String","$text$","push","newVNode","_len","children","_key","classData","className","class","Object","keys","filter","k","join","vnode","$attrs$","$children$","tag","text","$flags$","$tag$","$elm$","Host","isHost","node","parsePropertyValue","propValue","propType","getElement","ref","getHostRef","$hostElement$","emitEvent","elm","name","opts","ev","plt","ce","dispatchEvent","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","nonce","$nonce$","setAttribute","insertBefore","add","adoptedStyleSheets","includes","attachStyles","hostRef","$cmpMeta$","flags","endAttachStyles","$tagName$","shadowRoot","getRootNode","classList","cmp","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","oldClasses","parseClassList","newClasses","remove","slice","win","rel","ael","isComplex","n","e","removeAttribute","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","createTextNode","appendChild","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","nextSibling","parentNode","leftVNode","rightVNode","oldVNode","oldChildren","newChildren","textContent","data","renderVdom","renderFnResults","$vnode$","rootVnode","attachToAncestor","ancestorComponent","$onRenderResolve$","Promise","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","$lazyInstance$","promise","then","updateComponent","endUpdate","rc","endRender","callRender","map","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","nextTick","who","documentElement","detail","namespace","thenFn","getValue","propName","$instanceValues$","setValue","newVal","oldVal","areBothNaN","Number","isNaN","didValueChange","proxyComponent","Cstr","$members$","members","entries","prototype","_ref","memberFlags","defineProperty","configurable","enumerable","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","schedule","connectedCallback","endConnected","_ref2","hasOwnProperty","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","assign","$resourcesUrl$","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","HTMLElement","constructor","self","registerHost","attachShadow","clearTimeout","jmp","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","setNonce","hostRefs","registerInstance","lazyInstance","Map","el","console","error","cmpModules","exportName","replace","bundleId","module","BUILD","hotModuleReplacement","processMod","importedModule","window","document","raf","requestAnimationFrame","eventName","listener","addEventListener","removeEventListener","CustomEvent","promiseResolve","resolve","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","b","g","p","s"],"sources":["C:/Users/abasi/Desktop/web3-apps/react-cra/node_modules/@stacks/connect-react/node_modules/@stacks/connect-ui/dist/esm/index-9d57a6fd.js"],"sourcesContent":["const NAMESPACE = 'connect-ui';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    var _a;\n    let scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n * @param vnode a VNode\n * @param elm an element\n */\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n */\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        getHostRef(elm);\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            visibilityStyle.setAttribute('nonce', nonce);\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    \n    if (!hmrVersionId || !BUILD.hotModuleReplacement) {\n      const processMod = importedModule => {\n        cmpModules.set(bundleId, importedModule);\n        return importedModule[exportName];\n      }\n      switch(bundleId) {\n        \n        case 'connect-modal':\n          return import(\n            /* webpackMode: \"lazy\" */\n            './connect-modal.entry.js').then(processMod, consoleError);\n      }\n    }\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { bootstrapLazy as b, getElement as g, h, promiseResolve as p, registerInstance as r, setNonce as s };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}