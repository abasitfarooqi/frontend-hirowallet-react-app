{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nexports.fromBig = fromBig;\nfunction split(lst) {\n  let le = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\n// prettier-ignore\nconst u64 = {\n  fromBig,\n  split,\n  toBig: exports.toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexports.default = u64;","map":{"version":3,"names":["Object","defineProperty","exports","value","add","toBig","split","fromBig","U32_MASK64","BigInt","_32n","n","le","arguments","length","undefined","h","Number","l","lst","Ah","Uint32Array","Al","i","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","default"],"sources":["C:/Users/abasi/Desktop/web3-apps/react-cra/node_modules/@noble/hashes/_u64.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}