{"ast":null,"code":"import { intToBigInt } from '@stacks/common';\nimport { PostConditionType, StacksMessageType } from './constants';\nimport { parseAssetInfoString, parsePrincipalString } from './postcondition-types';\nexport function createSTXPostCondition(principal, conditionCode, amount) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false)\n  };\n}\nexport function createFungiblePostCondition(principal, conditionCode, amount, assetInfo) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo\n  };\n}\nexport function createNonFungiblePostCondition(principal, conditionCode, assetInfo, assetName) {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName\n  };\n}","map":{"version":3,"names":["intToBigInt","PostConditionType","StacksMessageType","parseAssetInfoString","parsePrincipalString","createSTXPostCondition","principal","conditionCode","amount","type","PostCondition","conditionType","STX","createFungiblePostCondition","assetInfo","Fungible","createNonFungiblePostCondition","assetName","NonFungible"],"sources":["C:\\Users\\abasi\\Desktop\\web3-apps\\react-cra\\node_modules\\@stacks\\transactions\\src\\postcondition.ts"],"sourcesContent":["import { IntegerType, intToBigInt } from '@stacks/common';\nimport {\n  PostConditionType,\n  FungibleConditionCode,\n  NonFungibleConditionCode,\n  StacksMessageType,\n} from './constants';\n\nimport {\n  AssetInfo,\n  PostConditionPrincipal,\n  parseAssetInfoString,\n  parsePrincipalString,\n  STXPostCondition,\n  FungiblePostCondition,\n  NonFungiblePostCondition,\n} from './postcondition-types';\n\nimport { ClarityValue } from './clarity';\n\nexport function createSTXPostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType\n): STXPostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.STX,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n  };\n}\n\nexport function createFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: FungibleConditionCode,\n  amount: IntegerType,\n  assetInfo: string | AssetInfo\n): FungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.Fungible,\n    principal,\n    conditionCode,\n    amount: intToBigInt(amount, false),\n    assetInfo,\n  };\n}\n\nexport function createNonFungiblePostCondition(\n  principal: string | PostConditionPrincipal,\n  conditionCode: NonFungibleConditionCode,\n  assetInfo: string | AssetInfo,\n  assetName: ClarityValue\n): NonFungiblePostCondition {\n  if (typeof principal === 'string') {\n    principal = parsePrincipalString(principal);\n  }\n  if (typeof assetInfo === 'string') {\n    assetInfo = parseAssetInfoString(assetInfo);\n  }\n\n  return {\n    type: StacksMessageType.PostCondition,\n    conditionType: PostConditionType.NonFungible,\n    principal,\n    conditionCode,\n    assetInfo,\n    assetName,\n  };\n}\n"],"mappings":"AAAA,SAAsBA,WAAW,QAAQ,gBAAgB;AACzD,SACEC,iBAAiB,EAGjBC,iBAAiB,QACZ,aAAa;AAEpB,SAGEC,oBAAoB,EACpBC,oBAAoB,QAIf,uBAAuB;AAI9B,OAAM,SAAUC,sBAAsBA,CACpCC,SAA0C,EAC1CC,aAAoC,EACpCC,MAAmB;EAEnB,IAAI,OAAOF,SAAS,KAAK,QAAQ,EAAE;IACjCA,SAAS,GAAGF,oBAAoB,CAACE,SAAS,CAAC;;EAG7C,OAAO;IACLG,IAAI,EAAEP,iBAAiB,CAACQ,aAAa;IACrCC,aAAa,EAAEV,iBAAiB,CAACW,GAAG;IACpCN,SAAS;IACTC,aAAa;IACbC,MAAM,EAAER,WAAW,CAACQ,MAAM,EAAE,KAAK;GAClC;AACH;AAEA,OAAM,SAAUK,2BAA2BA,CACzCP,SAA0C,EAC1CC,aAAoC,EACpCC,MAAmB,EACnBM,SAA6B;EAE7B,IAAI,OAAOR,SAAS,KAAK,QAAQ,EAAE;IACjCA,SAAS,GAAGF,oBAAoB,CAACE,SAAS,CAAC;;EAE7C,IAAI,OAAOQ,SAAS,KAAK,QAAQ,EAAE;IACjCA,SAAS,GAAGX,oBAAoB,CAACW,SAAS,CAAC;;EAG7C,OAAO;IACLL,IAAI,EAAEP,iBAAiB,CAACQ,aAAa;IACrCC,aAAa,EAAEV,iBAAiB,CAACc,QAAQ;IACzCT,SAAS;IACTC,aAAa;IACbC,MAAM,EAAER,WAAW,CAACQ,MAAM,EAAE,KAAK,CAAC;IAClCM;GACD;AACH;AAEA,OAAM,SAAUE,8BAA8BA,CAC5CV,SAA0C,EAC1CC,aAAuC,EACvCO,SAA6B,EAC7BG,SAAuB;EAEvB,IAAI,OAAOX,SAAS,KAAK,QAAQ,EAAE;IACjCA,SAAS,GAAGF,oBAAoB,CAACE,SAAS,CAAC;;EAE7C,IAAI,OAAOQ,SAAS,KAAK,QAAQ,EAAE;IACjCA,SAAS,GAAGX,oBAAoB,CAACW,SAAS,CAAC;;EAG7C,OAAO;IACLL,IAAI,EAAEP,iBAAiB,CAACQ,aAAa;IACrCC,aAAa,EAAEV,iBAAiB,CAACiB,WAAW;IAC5CZ,SAAS;IACTC,aAAa;IACbO,SAAS;IACTG;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}